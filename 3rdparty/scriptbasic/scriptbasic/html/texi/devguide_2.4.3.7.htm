<HEAD>
<TITLE>ScriptBasic Developers Manual: ex_PushWaitingLabel()</TITLE>

<META NAME="description" CONTENT="ScriptBasic Developers Manual: ex_PushWaitingLabel()">
<META NAME="keywords" CONTENT="ScriptBasic Developers Manual: ex_PushWaitingLabel()">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="t2h.pl">

</HEAD>

<BODY>
<FONT FACE="Verdana" Size="2">

<H1>ex_PushWaitingLabel()</H1>
<A HREF="devguide_2.4.3.6.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.8.htm">[&gt;&gt;&gt;]</A>
<P>

This function is used to define a label.
<P>
<FONT SIZE="3" COLOR="BLUE"><PRE>
int ex_PushWaitingLabel(peXobject pEx,
                         pSymbolLABEL pLbl
  )@{
</PRE></FONT>
<P>
When a label is defined the <font size="3"><tt>eNode_l</tt></font> that the label is going to belong still does not exists, and
therefore the <font size="3"><tt>NodeId</tt></font> of that <font size="3"><tt>eNode_l</tt></font> is not known. This function together with <a href="devguide_2.4.3.8.htm">ex_PopWaitingLabel()</A>
maintains a stack that can store labels which are currently defined and still need a line to be assigned
to them. These labels all point to the same line. Altough it is very rare that many labels point to
the same line, it is possible. The number of labels that can point the same line is defined by the
constant <font size="3"><tt>MAX_SAME_LABELS</tt></font> defined in <font size="3"><tt>expression.c</tt></font>
<P>
To make it clear see the following BASIC code:
<P>
<FONT SIZE="3" COLOR="BLUE"><PRE>
<P>
this_is_a_label:
REM this is a comment
            PRINT "hello word!!"
<P>
</PRE></FONT>
<P>
The label is defined on the first line of the example. However the label belongs to the
third line containing the statement <font size="3"><tt>PRINT</tt></font>. When the label is processed the compiler does
not know the node number of the code segment which is generated from the third line. Therefore
this function maintains a label-stack to store all labels that need a line. Whenever a line is
compiled so that a label can be assigned to that very line the stack is emptied and all labels waiting on the
stack are assigned to the line just built up. (Or the line is assigned to the labels if you
like the sentence the other way around.)
<P>
Note that not only labels given by a label defining statement are pushed on this stack, but also
labels generated by commands like 'while/wend' of 'if/else/endif'.<HR>
<A HREF="devguide_2.4.3.6.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.8.htm">[&gt;&gt;&gt;]</A>
</FONT>
</BODY>

</HTML>
