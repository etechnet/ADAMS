<HEAD>
<TITLE>ScriptBasic Developers Manual: What is an expression in ScriptBasic</TITLE>

<META NAME="description" CONTENT="ScriptBasic Developers Manual: What is an expression in ScriptBasic">
<META NAME="keywords" CONTENT="ScriptBasic Developers Manual: What is an expression in ScriptBasic">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="t2h.pl">

</HEAD>

<BODY>
<FONT FACE="Verdana" Size="2">

<H1>What is an expression in ScriptBasic</H1>
<A HREF="devguide_2.4.3.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.2.htm">[&gt;&gt;&gt;]</A>
<P>

Altough the syntax defintion in script basic is table driven and can easily be modified
expressions are not. The syntax of an expression is somewhat fix. Here we formally define
what the program thinks to be an expression. This restriction should not cause problem
in the usage of this module because this is the usual syntax of an expression. Any altering
to this would result in an expression syntax which is unusual, and therefore difficult to
use for the common users. The operators and functions along with therir precedence values are
defined in tables anyway, so you have flexibility.
<P>
The formal description of an expression syntax:
<P>
<FONT SIZE="3" COLOR="BLUE"><PRE>
 tag ::= UNOP tag
         NUMBER
         STRING
         '(' expression ')'
         VARIABLE @{ '[' expression_list ']' }
         VARIABLE '@{' expression_list '}'
         FUNC '(' expression_list ')'
         .
<P>
 expression_list ::= expression [ ',' expression_list ] .
<P>
 expression_i(1) ::= tag .
<P>
 expression_i(i) := expression_i(i-1) [ OP(i) expression_i(i) ] .
<P>
 expression ::= expression_i(MAX_PREC) .
<P>
 left_value ::= variable @{ '[' expression_list ']' } 
                variable '@{' expression_list '}' .
<P>
</PRE></FONT>
<P>
<UL>
<LI> UNOP
<P>
is unary operator as defined in tables in file operators.h
<P>
<LI> NUMBER 
<P>
is a number, lexical element.
<P>
<LI> STRING 
<P>
is a string, lexical element.
<P>
<LI> VARIABLE 
<P>
is a lexical element.
<P>
<LI> FUNC 
<P>
is a function either built in, or user defined
<P>
<LI> OP(i)
<P>
is an operator of precendece i as defined in tables.
<P>
@end itemize<HR>
<A HREF="devguide_2.4.3.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.2.htm">[&gt;&gt;&gt;]</A>
</FONT>
</BODY>

</HTML>
