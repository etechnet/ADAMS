<HEAD>
<TITLE>ScriptBasic Developers Manual: Some NOTE on SymbolXXX functions</TITLE>

<META NAME="description" CONTENT="ScriptBasic Developers Manual: Some NOTE on SymbolXXX functions">
<META NAME="keywords" CONTENT="ScriptBasic Developers Manual: Some NOTE on SymbolXXX functions">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="t2h.pl">

</HEAD>

<BODY>
<FONT FACE="Verdana" Size="2">

<H1>Some NOTE on SymbolXXX functions</H1>
<A HREF="devguide_2.4.3.11.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.13.htm">[&gt;&gt;&gt;]</A>
<P>

The functions named <font size="3"><tt>SymbolXXX</tt></font> like <font size="3"><tt>SymbolLABEL</tt></font>, or <font size="3"><tt>SymbolUF</tt></font> do NOT store 
the names of the symbols. They are named <font size="3"><tt>SymbolXXX</tt></font> because they are natural
extensions of the symbol table system. In other compilers the functionality to
retrieve the arguments of a symbol is part of the symbol table handling routines.
<P>
In script basic the symbol table handling routines were developed to be general purpose.
Therefore all the arguments the symbol table functions bind toa symbol is a <font size="3"><tt>void *</tt></font>
pointer. This pointer points to a struct that holds the arguments of the symbols,
and the functions <font size="3"><tt>SymbolXXX</tt></font> allocate the storage for the arguments.
<P>
This way it is possible to allocate arguments for non-existing symbols, as it is done
for labels. Script basic uses non-named labels to arrange the "jump" instructions for
<font size="3"><tt>IF/ELSE/ENDIF</tt></font> constructs. (And for some other constructs as well.) The label and
jump constructs look like:
<P>
<FONT SIZE="3" COLOR="BLUE"><PRE>
<P>
       IF expression Then
<P>
       ELSE
label1:
<P>

       END IF
label2:
<P>
</PRE></FONT>
<P>
The labels <font size="3"><tt>label1</tt></font> and <font size="3"><tt>label2</tt></font> do not have names in the system, not even autogenerated names.
They are referenced via pointers and their value (the <font size="3"><tt>NodeId</tt></font> of the instruction) get into the
<font size="3"><tt>SymbolLABEL</tt></font> structure and later int o the <font size="3"><tt>cNODE</tt></font> during build.<HR>
<A HREF="devguide_2.4.3.11.htm">[&lt;&lt;&lt;]</A> <A HREF="devguide_2.4.3.13.htm">[&gt;&gt;&gt;]</A>
</FONT>
</BODY>

</HTML>
