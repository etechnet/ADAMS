'
' FILE: CIOQUEENS.SB
'
' This program places n queens on a chess table of size n so that no
' queen pairs attack each other.
'
' In this sample the size of the chess table is given by the variable n
' Altering that variable you can calculate the number of solutions for any
' table size. Experiment with it.
'
import cio.bas
cio::NoBreak()
MaxX = cio::SizeX()
MaxY = cio::SizeY()

' the size of the table
' try to change it and experience the result
' be careful setting it too large
n = 8

TableYOffset = 1

'
' Clear the screen
'
DefaultScreenColor = BBlue or FWhite
FlashScreenColor   = FBlue or BWhite
cio::SetColor DefaultScreenColor
cio::Cls

FastMode = FALSE

'
' Print the title to the screen
'
Title$ = "Put " & n & " queens on a chess table of size " & n & "x" & n
cio::GotoXY( (MaxX-len(Title$)) / 2, 1)
print Title$
cio::SetTitle Title$
cio::SetCursor 100

call DrawChessTable

Message$ = """
This program places queens on
a chess table so that none of
them attacks any other.

The program runs slow to show
how the search is done. To
switch to fast mode press F
as for 'fast'. To switch back
to 'slow' mode press 'S'.

To quit the program press 'Q'.
"""
splita Message$ by "\n" to MesLines$
for i=lbound(MesLines$) to ubound(MesLines$)
  cio::gotoXY 1,3+i
  print MesLines$[i]
next

Message$ = """
The program does not count
duplicated solutions that
can be created from a
prvious solution using rot-
ation or mirroring or both.

The program also
demonstrates how to disable
the Control-C in an NT
console Window.

Author: Peter Verhas
"""
splita Message$ by "\n" to MesLines$
for i=lbound(MesLines$) to ubound(MesLines$)
  cio::gotoXY 52,3+i
  print MesLines$[i]
next

' this variable holds the actual number of solutions found
SolutionNumber = 1

' this variable holds the actual row in which we try to place a queen
ActualRow = 1

' initially we set the queen before the table and the program
' starts putting it one step forward (onto the table)
QueenPosition[1] = 0

' here we start a loop to find all solutions not only one
repeat

  ' do this loop until all queens are positioned
  while ActualRow <= n

    ' step the queen one step further
    call CleanFigure ActualRow,QueenPosition[ActualRow]
    QueenPosition[ActualRow] += 1
    call PutFigure ActualRow,QueenPosition[ActualRow]
    call mysleep
    ' if we stepped off the table
    IF QueenPosition[ActualRow] > n THEN

      ' step one row back
      ActualRow -= 1
      ' if this was the first row then we are finished
      if ActualRow < 1 then
        goto PrintAllSolutionsFound
      end if

    ELSE
      'if we are still on the table
      ' check that the actual position is OK or not
      PositionIsOk = TRUE
      for i=1 to ActualRow-1
        if QueenPosition[i] = QueenPosition[ActualRow] or _
           abs(QueenPosition[i]-QueenPosition[ActualRow]) = ActualRow - i then
          PositionIsOk = FALSE
          call FlashRows(i,ActualRow)
        end if
      next i
      if PositionIsOk then
        ActualRow += 1
        if ActualRow <= n then QueenPosition[ActualRow] = 0
      end if

    END IF
  wend

  '
  ' Check if the actual solution is the same as a previous one
  '
  NewSolutionIsFound = TRUE
  for j=1 to SolutionNumber-1

  HorizontalMirrorCheck:
    for i=1 to n
      if n - QueenPosition[i] <> SavedQueenPosition[j,i] then goto VerticalMirrorCheck
    next i
    NewSolutionIsFound = FALSE
    goto EndCheckLoop

  VerticalMirrorCheck:
    for i=1 to n
      if QueenPosition[n-i+1] <> SavedQueenPosition[j,i] then goto RotateCheck
    next i
    NewSolutionIsFound = FALSE
    goto EndCheckLoop

  RotateCheck:
    for i=1 to n
      RotPos[i] = QueenPosition[i]
    next i
    for k=1 to 3
      for i=1 to n
        TmpPos[n-RotPos[i]+1] = i
      next i
      for i=1 to n
        RotPos[i] = TmpPos[i]
      next i
      for i=1 to n
        if RotPos[i] <> SavedQueenPosition[j,i] then goto NextRotate
      next i
      NewSolutionIsFound = FALSE
      goto EndCheckLoop
    NextRotate:
    next k

  next j
  EndCheckLoop:

  if NewSolutionIsFound then
    for i=1 to n
      SavedQueenPosition[SolutionNumber,i] = QueenPosition[i]
    next i
    cio::gotoXY(1,22)
    print "A new solution #",SolutionNumber," was found. Press any key to find the next solution..."
    while cio::KbHit()
      cio::GetCh()
    wend
    cio::GetCh()
    SolutionNumber += 1
  endif

  ' step back after the solution was found
  ActualRow -= 1

until false

PrintAllSolutionsFound:

cio::gotoXY(1,22)
print "There were ",SolutionNumber-1," solutions. Press any key...                                "
while cio::KbHit()
  cio::GetCh()
wend
cio::GetCh()



STOP

sub PositionOnTable(x,y)
  cio::gotoXY( (MaxX-2*n) \ 2 + 2*x-1 , 2*y+TableYOffset+1)
end sub

sub PutCharOnTable(x,y,c)
  if x > 0 and x <= n and y > 0 and y <= n then
    PositionOnTable x,y
    print c
    PositionOnTable x,y
  end if
end sub

' put a figure on position x,y
sub PutFigure(x,y)
  PutCharOnTable x,y,"*"
end sub

' clean off a figure from position x,y
sub CleanFigure(x,y)
  PutCharOnTable x,y," "
end sub

sub FlashRows(x,y)
  PositionOnTable x,QueenPosition[x]
  cio::SetColor FlashScreenColor
  print "*"
  PositionOnTable y,QueenPosition[y]
  cio::SetColor FlashScreenColor
  print "*"
  PositionOnTable y,QueenPosition[y]
  cio::SetCursor 1
  call mysleep
  cio::SetCursor 100
  PositionOnTable x,QueenPosition[x]
  cio::SetColor DefaultScreenColor
  print "*"
  PositionOnTable y,QueenPosition[y]
  cio::SetColor DefaultScreenColor
  print "*"
  PositionOnTable y,QueenPosition[y]
  call mysleep
end sub

sub ::CheckKeyPress
  ' check if the user has pressed any key
  if cio::KbHit() then
    cio::gotoXY 1,16
    ch = chr(cio::GetCh())
    if ch = "f" or ch = "F" then FastMode = TRUE
    if ch = "s" or ch = "S" then FastMode = FALSE
    if ch = "q" or ch = "Q" then
      cio::cls
      print """
You instructed the program to stop processing and to
quit. Press any key to stop the program...
"""
      while cio::KbHit()
        cio::GetCh()
      wend
      cio::GetCh()
      cio::SetColor DefaultScreenColor
      cio::cls
      STOP
    end if
  end if
end sub

sub mysleep
  CheckKeyPress
  if Not FastMode then sleep 1
end sub

'
' Draws the empty chess table
'
sub DrawChessTable
  '
  ' print the table on the screen
  '
  for i=1 to n

   cio::gotoXY( (MaxX-2*n) \ 2 , 2*i+TableYOffset )
   'print the top of the row
   for j=1 to n
    print "+-"
   next
   ' print the closing of the top of the row
   print "+"

   cio::gotoXY( (MaxX-2*n) \ 2 , 2*i+TableYOffset+1)
   'print the middle of the row
   for j=1 to n
    print "| "
   next
   ' print the closing of the top of the row
   print "|"

  next
  cio::gotoXY( (MaxX-2*n) \ 2 , 2*n+TableYOffset+2)
  'print the bottom of the last row
  for j=1 to n
   print "+-"
  next
  ' print the closing of the bottom of the last row
  print "+"
end sub
