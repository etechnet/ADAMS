'
' This include file defines ACE editing helper functions
'

function GetAceBitByKeyword(AclTypeId,Keyword)
  GetAceBitByKeyword = mt::GetVariable("AclTypeNameBit:" & AclTypeId & ":" & Keyword)
end function

function GetAceKeywordByBit(AclTypeId,Bit)
  GetAceKeywordByBit = mt::GetVariable("AclTypeBitName:" & AclTypeId & ":" & Bit )
end function

function GetAceKeywordString(AclTypeId,AceValue)
  local i, AceBit,FirstKeyword
  local AceString

  AceString = ""
  FirstKeyword = TRUE
  for i=1 to 32
    AceBit = mid$(AceValue,i,1)
    if AceBit = "A" or AceBit = "a" then
       if FirstKeyword then
         FirstKeyword = FALSE
       else
         AceString &= ","
       endif
       AceString &= "+" & GetAceKeywordByBit(AclTypeId,i)
    else if AceBit = "D" or AceBit = "d" then
       if FirstKeyword then
         FirstKeyword = FALSE
       else
         AceString &= ","
       endif
       AceString &= "-" & GetAceKeywordByBit(AclTypeId,i)
    end if
  next i
  GetAceKeywordString = AceString
end function

function GetAceValueFromKeywordString(AclTypeId,AceKeywordString)
  local KeywordArray,AceBit
  local i,j,AceValueArray

  splita AceKeywordString by "," to KeywordArray
  for i=lbound(KeywordArray) to ubound(KeywordArray)
    KeywordArray[i] = trim(KeywordArray[i])
  next i
  for i=1 to 32
    AceValueArray[i] = "."
  next i

  for i=lbound(KeywordArray) to ubound(KeywordArray)
    AceBit = "A"
    if left$(KeywordArray[i],1) = "-" then
      AceBit = "D"
      KeywordArray[i] = trim(mid$(KeywordArray[i],2))
    endif
    if left$(KeywordArray[i],1) = "+" then
      AceBit = "A"
      KeywordArray[i] = trim(mid$(KeywordArray[i],2))
    endif
    j = GetAceBitByKeyword(AclTypeId,KeywordArray[i])
    if not isDefined(j) then
      GetAceValueFromKeywordString = undef
      exit function
    end if
    AceValueArray[j] = AceBit
  next i
  GetAceValueFromKeywordString = join("",AceValueArray)
end function

'
' Calculates the effective ACV for the current user
'
function GetEffectiveAcv(AclId,RoleArray)
  local dbh
  local AceValueArray
  local IsEffective

  for i=1 to 32
    AceValueArray[i] = "."
  next i

  if not isDefined(AclId) or len(AclId) = 0 then
    GetEffectiveAcv = join("",AceValueArray)
    exit function
  endif

  DB::Connect
  query = "select ID,NAME,ACLID,DESCRIPTION,ACLTYPE FROM ACLS USERS WHERE ID =" & AclId
  DB::Query query
  if not DB::FetchArray(q) then
    ' undef result means error
    GetEffectiveAcv = undef
    exit sub
  endif
  query = "SELECT GUID,ACETYPE,ACEVAL FROM ACES WHERE ACLID=" & AclId
  DB::Query query
  while DB::FetchArray(q)
    GUID     = q[0]
    AceType  = q[1]
    AceValue = q[2]
    IsEffective = FALSE
    if AceType = "R" or AceType = "r" then
      if isDefined(RoleArray) then
        for i=lbound(RoleArray) to ubound(RoleArray)
          if RoleArray[i] = GUID then
            IsEffective = TRUE
            goto FoundEffective
          end if
        next i
      endif
    else if AceType = "G" or AceType = "g" then
      if mt::GetVariable("group" & GUID) then
          IsEffective = TRUE
          goto FoundEffective
        end if
    else if AceType = "U" or AceType = "u" then
      IsEffective =  (GUID = sibawa::userid)
    else
      ' undef result means error
      GetEffectiveAcv = undef
      exit sub
    endif

FoundEffective:
    if IsEffective then
      for i=1 to 32
        if AceValueArray[i] = "D" then
          ' do nothing this bit is already denied
        else if AceValueArray[i] = "A" then
          ' leave it "A"llowed unless this ACV denies it
          if mid$(AceValue,i,1) = "D" then AceValueArray[i] = "D"
        else
          ' if it is "." so far then let it either "A"llowed or "D"enied
          if mid$(AceValue,i,1) = "D" then AceValueArray[i] = "D"
          if mid$(AceValue,i,1) = "A" then AceValueArray[i] = "A"
        end if
      next i
    endif
  wend

  GetEffectiveAcv = join("",AceValueArray)
  exit function
end function

'
' Get the UserId from the name
'
function GetUserIdFromName(UserName)
  local q

  DB::Connect
  if len(UserName) then
    DB::Query "SELECT ID from USERS WHERE NAME='" & UserName & "'"

    if DB::FetchArray(q) then
      GetUserIdFromName = q[0]
    else

      DB::Close
      cgi::SymbolName "NAME",AclName
      PrintTemplate "admin/nosuser.html"
      stop
    endif
  else
    GetUserIdFromName = "NULL"
  endif
end function

'
' Get the UserName from the ID
'
function GetUserNameFromId(UserId)
  local q

  if len(UserId) = 0 then
    GetUserNameFromId = ""
    exit sub
  end if

  DB::Connect
  DB::Query "SELECT NAME from USERS WHERE ID=" & UserId

  if DB::FetchArray(q) then
    GetUserNameFromId = q[0]
    exit sub
  endif
  GetUserNameFromId = "?" & UserId & "?"
end function

'
' Get the AclId from the name
'
function GetAclIdFromName(AclName)
  local q

  DB::Connect
  if len(AclName) then
    DB::Query "SELECT ID from ACLS WHERE NAME='" & AclName & "'"

    if DB::FetchArray(q) then
      GetAclIdFromName = q[0]
    else

      DB::Close
      cgi::SymbolName "ACL",AclName
      PrintTemplate "admin/nosacl.html"
      stop
    endif
  else
    GetAclIdFromName = "NULL"
  endif
end function

'
' Get the AclName from the ID
'
function GetAclNameFromId(AclId)
  local q

  if len(AclId) = 0 then
    GetAclNameFromId = ""
    exit sub
  end if

  DB::Connect
  DB::Query "SELECT NAME from ACLS WHERE ID=" & AclId

  if DB::FetchArray(q) then
    GetAclNameFromId = q[0]
    exit sub
  endif
  GetAclNameFromId = "?" & AclId & "?"
end function


'
' Get the AclTypeId from the name
'
function GetAclTypeIdFromName(AclTypeName)
  local q

  DB::Connect
  if len(AclTypeName) then
    DB::Query "SELECT ID from ACLTYPES WHERE NAME='" & AclTypeName & "'"

    if DB::FetchArray(q) then
      GetAclTypeIdFromName = q[0]
    else

      DB::Close
      cgi::SymbolName "ACLTYPE",AclTypeName
      PrintTemplate "admin/nosacltype.html"
      stop
    endif
  else
    GetAclTypeIdFromName = "NULL"
  endif
end function

'
' Get the AclTypeName from the ID
'
function GetAclTypeNameFromId(AclTypeId)
  local q

  if len(AclTypeId) = 0 then
    GetAclTypeNameFromId = ""
    exit sub
  end if

  DB::Connect
  DB::Query "SELECT NAME from ACLTYPES WHERE ID=" & AclTypeId

  if DB::FetchArray(q) then
    GetAclTypeNameFromId = q[0]
    exit sub
  endif
  GetAclTypeNameFromId = "?" & AclTypeId & "?"
end function

'
' Get the RoleId from the name
'
function GetRoleIdFromName(RoleName)
  local q

  DB::Connect
  if len(RoleName) then
    DB::Query "SELECT ID from ROLES WHERE NAME='" & RoleName & "'"

    if DB::FetchArray(q) then
      GetRoleIdFromName = q[0]
    else

      DB::Close
      cgi::SymbolName "Role",RoleName
      PrintTemplate "admin/nosrole.html"
      stop
    endif
  else
    GetRoleIdFromName = "NULL"
  endif
end function

'
' Get the RoleName from the ID
'
function GetRoleNameFromId(RoleId)
  local q

  if len(RoleId) = 0 then
    GetRoleNameFromId = ""
    exit sub
  end if

  DB::Connect
  DB::Query "SELECT NAME from ROLES WHERE ID=" & RoleId

  if DB::FetchArray(q) then
    GetRoleNameFromId = q[0]
    exit sub
  endif
  GetRoleNameFromId = "?" & RoleId & "?"
end function

