


























\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mod_re
@settitle Documentation of the module re
@setchapternewpage odd
@c %**end of header
@ifinfo
@end ifinfo

@titlepage
@title Documentation of the module re
@author Peter Verhas

@page
@vskip 0pt plus 1filll

@end titlepage
@summarycontents
@contents

@menu
@end menu

@chapter Introduction


@chapter  The module RE

This module implements some simple regular expression handling functions.
They can be used to match some strings against regular expressions and to
use matched sub strings to format replace strings. This module provides
functions that are similar to the Perl language operators @code{m//} and @code{s///}.




@chapter  Match a string against a regular expression

@example
re::match(string,regexp [, replace])
re::m(string,regexp [, replace])
@end example

This function is the main regular expression match function. The first argument 
is the string that is to be matched against the regular expression. The second 
argument is the regular expression. If the string matches the regular expression the 
return value of the function is true, otherwise false. The regular expressions 
may contain parentheses inside it. If it does the substrings matching the 
regular expression part between the parentheses will be stored in a 
regular expression dollar array.

The substrings can be accessed via the function @code{re::dollar()} @xref{dollar}.

If there is a replace string defined the return value is either false 
if the string is not matched by the regular expression; or the replace string itself.
The replace string may contain @code{$0}, @code{$1}, ... @code{$n} literal that will be replaced by 
the actual substrings between the parentheses. This is the same way as Perl does.

@code{$0} is the substring matched by the whole regular expression.

For example:
@example
import re.bas

print "match result=",re::match("ahlma","h(.*)","haho $0 $1 $0 q")
print
n = re::n()
print "number of ()s =",n
print
for i=0 to n
  print i,". "
  print re::dollar(i)
  print
next i
@end example
will print
@example
match result=haho hlma lma hlma q
number of ()s =1
0. hlma
1. lma
@end example
Note that the short for @code{re::m} exists in case you are a Perl
knowing programmer, because this function is similar to the 
Perl operator @code{=~ m/}.


@chapter  number of matches

@example
re::n()
@end example
return the number of usable matches substrings

@chapter  Return the i-th sub string

@example
re::dollar(i)
re::$(i)
@end example

return the i-th matched substring 

@chapter  Reset matches

@example
re::reset()
@end example

Delete the @xref{dollar} string array and release all memory that was allocated during the
last match. This function is autoamtically invoked between matches.

@chapter  Format a string with replacement sub-strings

@example
re::format(string)
@end example

Use this function to format a string using the @code{$1}, @code{$2}, ... @code{$n} placeholders to be replaced by the actual strings after a successful pattern matching.

@chapter  Search and replace
@example
re::replace(string,regexp,replace)
re::s(string,regexp,replace)
@end example
This function searches the string for matches of the regular expression and replaces the 
actual matches with the replace string. This is the same functionality as the @code{=~s/} operator in Perl.

The function fills the @xref{dollar} array the same way as the function @xref{match}.

For example

@example
import re.bas

print re::s("almakbat*","a(.)","$1s")
print
print re::$(0)," ",re::$(1)
print
@end example
will print

@example
lsmksbts*
at t
@end example

As you can see in this case the value of @code{re::$(0)} is the string that was
matched by the last replace inside the string.
 

