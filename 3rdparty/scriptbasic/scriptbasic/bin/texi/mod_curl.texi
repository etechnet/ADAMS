


























\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mod_curl
@settitle Documentation of the module curl
@setchapternewpage odd
@c %**end of header
@ifinfo
@end ifinfo

@titlepage
@title Documentation of the module curl
@author Peter Verhas

@page
@vskip 0pt plus 1filll

@end titlepage
@summarycontents
@contents

@menu
@end menu

@chapter Introduction


The CURL module provides easy and still powerful functions to perform various network
oriented actions that are based on URL to access data. For example CURL can perform
getting data via HTTP, HTTPS from web pages, POST data to web pages, transer file to
and from servers via FTP and so on.

To use the module the program has to import the BASIC "header" file named @code{curl.bas}. This
should be done using the command import:

@example
import curl.bas
@end example

Note that there are no double quotes around the file name to include the definition of the
C implemented curl functions from the module interface header files include directory.

There are only a few functions defined in this file. The first function that an application
has to call is @code{curl::init()} to get a handle to a connection. A single program can use
several connections simultaneous, tough currently there is no possibility to download large
files asynchronous.

Following the initialization the program has to set several options calling @code{curl::option}, and then
should call the function @code{curl::perform} to actually perform the download/upload or other network
action. When a connection is not used anymore the function @code{curl::finish} can be called, though this
function is executed automatically for each connection when the interpreter exists. 

@example
import curl.bas
ON ERROR GOTO CURL_ERROR
CURL = curl::init()
curl::option CURL,"URL","http://scriptbasic.com/html/index.html"
curl::option CURL,"FILE","C:\\ScriptBasicMirror\\html\\index.html"
curl::perform CURL
curl::finish CURL
STOP
CURL_ERROR:
PRINT "Some error happened while trying to download ScriptBasic home page. The error message is:\n"
PRINT curl::error()
STOP
@end example

For more information on other functions read the appropriate chapters.

The name CURL is made of the name of the programming language C in which CURL is implemented
and from the word URL. This text that you are reading is the documentation of the ScriptBasic
implementation of CURL. This implementation includes an interface module that containc C coded
BASIC callable function that map most (or some) of the CURL library functions. In other words
using this program yu can access most (or some) of the functions that the CURL library provides.

Altough the CURL library is quite flexible, there are some options that are altered in this
module to ease the use for BASIC programmers. For example the option POSTFIELDS accepts zero 
terminated string by default, because 1.) POST data usually does not contain zero character and 2.)
this is the easy way for C programmers. On the other hand there is a possibility, though more complex
to pass string and length to the option. Because all ScriptBasic strings are arbitrary binary data and
not zero character terminated strings this second method is followed.

Some of the options on the C level accept @code{long} numbers from a finite set and CURL C header files define
@code{enum} types for the purpose. In these cases the ScriptBasic interface requires strings being specified
by the BASIC program as option and convert to @code{long} as appropriate to CURL.

The option names in the original CURL interface are defined in @code{enum} and thus options are defined
as @code{long} constants. The BASIC interface works with strings, and converts the names specified as
strings to their appropriate value. This is (I assume) simpler for the BASIC programmers and on the other
hand induces only slight overhead as compared to network transfer times.


@chapter  curl::init

Call this function before any other curl action. This function will return a handle
to the curl session. This handle should be used as first argument to any further curl calls.


Usage:
@example
CURL = curl::init()
@end example

The handle that the function returns is a small integer. However the program should not alter this value in any
way. The good practice is to store the value in a variable and use it as it is without caring about the real
value or type of the content.

If the initialization of the connection can not be performed @code{MEMORY_LOW} error occurs.

@chapter  curl::option

Call this function to set the various options of the actual curl session.

Usage:
@example
curl::option CURL, "option" [, value]
@end example

The various options that the current version of the module supports are listed in the following sections.
Note that the documentation is mainly copied from the original CURL lib documentation.

Some of the options require a string as a parameter. The strings usually should not contain zero character.
The exception is the option @code{POSTFIELDS}, which is handled in a special way to allow the programmer to send
arbitrary binary data as HTTP POST parameter.

The option names in the section titles in this document are followed by one of the words @emph{string}, @emph{integer} and @emph{flag}.

@itemize
@item
Options followed by the word @emph{string} need string argument. If the option value is not specified zero length
string is used. Because this is nonsense in most cases, you better use a third string argument for these options.
@item
Options followed by the word @emph{flag} are yes/no type options. Presenting them without value means switching the
option on. To switch such an option off the programmer has to explicitely specify zero value as third argument.
In other words omitting the option value in such a case is the same as specifying @code{1} or @code{TRUE} or any other
non-zero value. To switch off a @emph{flag} option you can specify the value as @code{FALSE} (which is zero in ScriptBasic)
for more readability.
@example
curl::option CURL,"VERBOSE"
curl::option CURL,"VERBOSE",TRUE
curl::option CURL,"VERBOSE",1
@end example
are the same as well as the oposit
@example
curl::option CURL,"VERBOSE",FALSE
curl::option CURL,"VERBOSE",0
@end example
are the same.
@item
Options followed by the word @emph{integer} accept integer value. If the value is missing for such an option zero is used.
For example:
@example
curl::option CURL,"RESUME_FROM"
curl::option CURL,"RESUME_FROM",0
@end example
are the same.
@end itemize


The option names are implemented case sensitive in this module, thus you can not use @code{"verbose"}
instead of @code{"VERBOSE"}. Also the programmer should type the option names precisely, no mispelling is
tolerated by the program.

@section BUFFER_SIZE integer

@example
curl::option CurlHandle,"BUFFER_SIZE",1024
@end example

When a file is downloaded but not stored in a file the function @code{curl::perform(CURL)} returns the content
of the downloaded file as a huge string. During the download this string is stored in a temporary buffer. The
size of this buffer increases gradually as more and more bytes come. If there are 10 bytes coming at a time then
the buffer will grow only ten bytes. This also means a new buffer allocation and copying the content of the buffer,
which consumes system resources, especially for large files.

If you happen to know the estimated size of the file, you can set the initial size of the buffer to a huge value using this
option. For example if you know that the file is 1024 bytes, you can set this option as in the example above. In that case
when the first byte comes from the URL the 1024 byte length buffer is increased and when the consecutive bytes come there is
space to store them without reallocating the buffer.

You need not worry about using this buffer when you handle small files, like web pages. If you see performace or memory
shortage problems, then you may consider this option along with the option @code{FILE} that helps you store the downloaded file
on disk.

@section CAINFO string

@example
curl::option CurlHandle,"CAINFO","c:\\certs\mycert.pem"
@end example

Pass a string file naming holding the certificate to
verify the peer with. This only makes sense when used in combination with the
CURLOPT_SSL_VERIFYPEER option.

@section COOKIE string

@example
curl::option CurlHandle,"COOKIE","mycookie=is rather long"
@end example

Pass a string as parameter. It will be used to
set a cookie in the http request. The format of the string should be
@code{[NAME]=[CONTENTS];} Where @code{NAME} is the cookie name.

@section COOKIEFILE string

@example
curl::option CurlHandle,"COOKIEFILE","c:\\WINDOWS\\cookies.txt"
@end example

Pass a string as parameter. It should contain the
name of your file holding cookie data. The cookie data may be in Netscape /
Mozilla cookie data format or just regular HTTP-style headers dumped to a
file.

@section CUSTOMREQUEST string

@example
curl::option CurlHandle,"CUSTOMREQUEST","MOVE"
@end example

Pass a string as parameter. It will be user
instead of GET or HEAD when doing the HTTP request. This is useful for doing
DELETE or other more obscure HTTP requests. Don't do this at will, make sure
your server supports the command first.

@section FILE

@example
curl::option CurlHandle,"FILE","file_name"
@end example

Use this option to set the file name of the file where the result will be saved. When you set this option
the file is opened and truncated assumed that the program has appropriate privileges. Thus if there was a
file with the name the file will be overwrtitten even if the @code{curl::perform} function is not called. The file
is opened, when the option is set and kept opened so long as the connection is "finished" or another
@code{INFILE} or @code{FILE} option is specified for the connection.

If you donot specify any file to store the downloaded result, then the function @code{curl::perform(CURL)}
will return the file as a single huge string.

Comment on internals (if you do not understand what I am talking about, most probably you do not need to):

The underlying CURL library requests an opened file handle passed to the library and a function that
performs the file writing. The ScriptBasic interface gets the name of the file, opens the file, passes
the opened file pointer to the library and specifies the stadard @code{fwrite} function to write the file.

The pointer to the function @code{fwrite} is taken from the support table, thus is any preloaded module
altered this before setting this option the module function will be used.

The file is opened calling the system function @code{fopen} via the ScriptBasic support function calling stacks.
This means that if some module implements a hook function to control file access that will be taken into account
the same way as it is taken into accoung in the case of the BASIC command @code{OPEN}.

@section FTPPORT string

@example
curl::option CurlHandle,"FTPPORT","222"
@end example

Pass a string as parameter. It will be used to
get the IP address to use for the ftp PORT instruction. The PORT instruction
tells the remote server to connect to our specified IP address. The string may
be a plain IP address, a host name, an network interface name (under unix) or
just a '-' letter to let the library use your systems default IP address.

@section HEADERFILE string

@example
curl::option CurlHandle,"HEADERFILE","file_name"
@end example

Use this option to set the file name of the file where the header coming from the server will be saved.
When you set this option the file is opened and truncated assumed that the program has appropriate privileges.
Thus if there was a file with the name the file will be overwrtitten even if the @code{curl::perform} function is
not called. The file is opened, when the option is set and kept opened so long as the connection is "finished" 
or another @code{HEADERFILE} option is specified for the connection.

Note: You need this option if you want to get the header and the body of a downloaded file into two separate
files. You can easily get the header and the body into a single file if you use the option @code{HEADER}. Altough
there is nothing that prevents, I see no real use of the two options aka @code{HEADERFILE} and flag @code{HEADER}) together.
But you are free to use them together.

Comment on internals (if you do not understand what I am talking about, most probably you do not need to):

The underlying CURL library requests an opened file handle passed to the library and a function that
performs the file writing. The ScriptBasic interface gets the name of the file, opens the file, passes
the opened file pointer to the library and specifies the stadard @code{fwrite} function to write the file.

The pointer to the function @code{fwrite} is taken from the support table, thus is any preloaded module
altered this before setting this option the module function will be used.

The file is opened calling the system function @code{fopen} via the ScriptBasic support function calling stacks.
This means that if some module implements a hook function to control file access that will be taken into account
the same way as it is taken into accoung in the case of the BASIC command @code{OPEN}.

@section INFILE string

@example
curl::option CurlHandle,"INFILE","file_name"
@end example

Use this option to set the file name of the file where the source is for file upload. When you set this option
the file is opened for reading, thus the file should exist and should be readable for the program. The file
is opened, when the option is set and kept opened so long as the connection is "finished" or another
@code{INFILE} or @code{FILE} option is specified for the connection.

You cannot use the options @code{INTEXT} and @code{INFILE} at the same time for the same connection. If you use both
the latter specified will be used.

Comment on internals (if you do not understand what I am talking about, most probably you do not need to):

The underlying CURL library requests an opened file handle passed to the library and a function that
performs the file writing. The ScriptBasic interface gets the name of the file, opens the file, passes
the opened file pointer to the library and specifies the stadard @code{fread} function to read the file.

The pointer to the function @code{fread} is taken from the support table, thus is any preloaded module
altered this before setting this option the module function will be used.

Curl optionally acepts the size of the file to report to the upload server. The implementation of this
option interfacing automatically gets the size of the file specified in the option and sets the underlying
option.

The file is opened calling the system function @code{fopen} via the ScriptBasic support function calling stacks.
This means that if some module implements a hook function to control file access that will be taken into account
the same way as it is taken into accoung in the case of the BASIC command @code{OPEN}.

@section INTERFACE string

@example
curl::option CurlHandle,"INTERFACE","16.193.68.55"
@end example

Pass a string as parameter. This set the interface name to use as outgoing
network interface. The name can be an interface name, an IP address or a host
name.

@section INTEXT string

@example
curl::option CurlHandle,"INTEXT","""This is the content of the file
that we will upload.
"""
@end example

Use this option to set the content of the file for any kind of upload. This option can be used to upload 
small files via HTTP or FTP, which are generated on-the-fly by the BASIC program, and there is no need to
store the files locally.

You cannot use the options @code{INTEXT} and @code{INFILE} at the same time for the same connection. If you use both
the latter specified will be used.

@section KRB4LEVEL string

@example
curl::option CurlHandle,"KRB4LEVEL","confidential"
@end example

Pass a string as parameter. Set the krb4 security level, this also enables
krb4 awareness.  This is a string, 'clear', 'safe', 'confidential' or
'private'.  If the string is set but doesn't match one of these, 'private'
will be used. Set the string to NULL to disable kerberos4. The kerberos
support only works for FTP.

@section PROXY string

@example
curl::option CurlHandle,"PROXY","www.my-proxy.com:8080"
@end example

If you need libcurl to use a http proxy to access the outside world, set the
proxy string with this option. To specify port number in this string, append @code{:[port]} to
the end of the host name. The proxy string may be prefixed with
@code{[protocol]://} since any such prefix will be ignored.

@section PROXYPORT integer

@example
curl::option CurlHandle,"PROXYPORT",8080
@end example

Use this option to set the proxy port to use unless it is
specified in the proxy string @code{PROXY}.

@section PROXYUSERPWD string

@example
curl::option CurlHandle,"PROXYUSERPWD","verhas:m23kkdUT"
@end example

Pass a string as parameter, which should be @code{username:password} to use for
the connection to the HTTP proxy. If the password is left out, you will be
prompted for it.

@section RANDOM_FILE string

@example
curl::option CurlHandle,"RANDOM_FILE","c:\\WINNT4\pagefile.sys"
@end example

Pass a string to a zero terminated file name. The file will be used to read
from to seed the random engine for SSL. The more random the specified file is,
the more secure will the SSL connection become.

@section RANGE string

@example
curl::option CurlHandle,"RANGE","3321-3322"
@end example

Pass a string as parameter, which should contain the specified range you
want. It should be in the format "X-Y", where X or Y may be left out. HTTP
transfers also support several intervals, separated with commas as in
@code{"X-Y,N-M"}. Using this kind of multiple intervals will cause the 
HTTP server to send the response document in pieces.

@section REFERER string

@example
curl::option CurlHandle,"REFERER","http://www.scriptbasic.com"
@end example

Pass a string as parameter. It will be used to
set the @code{Referer:} header in the http request sent to the remote server. This
can be used to fool servers or scripts.

@section SSLCERT string

@example
curl::option CurlHandle,"SSLCERT","???"
@end example

Pass a string as parameter. The string should be
the file name of your certficicate in PEM format.

@section SSLCERTPASSWD string

@example
curl::option CurlHandle,"SSLCERTPASSWD","m23kkdUT"
@end example

Pass a string as parameter. It will be used as
the password required to use the @code{SSLCERT} certificate. If the password
is not supplied, you will be prompted for it.

@section URL string

@example
curl::option CurlHandle,"URL","http://curl.haxx.se"
@end example

The actual URL to deal with. 

NOTE: this option is required to be set before @code{curl::perform()} is called.

@section USERAGENT string

@example
curl::option CurlHandle,"USERAGENT","CURL 7.9.5 with SB Interface; v10b29"
@end example

Pass a string as parameter. It will be used to
set the @code{User-Agent:} header in the http request sent to the remote server. This
can be used to fool servers or scripts.

@section USERPWD string

@example
curl::option CurlHandle,"USERPWD","verhas:m23kkdUT"
@end example

Pass a string as parameter, which should be @code{username:password} to use for
the connection. If the password is left out, you will be prompted for it.

@section WRITEINFO string

@example
curl::option CurlHandle,"WRITEINFO",""
@end example

Pass a string as parameter. It will be used to
report information after a successful request.

As report and progress callback is not implemented in ScriptBasic CURL module, there
is not much use of this option.

@section EGDSOCKET string

@example
curl::option CurlHandle,"EGDSOCKET","\\.\\edg"
@end example

Pass a string path name to the Entropy Gathering Daemon
socket. It will be used to seed the random engine for SSL.

@section POSTFIELDS string

@example
curl::option CurlHandle,"POSTFIELDS","name=Edmund+Nielsen+Bohr&address=Downing+street+11"
@end example

Pass a string as parameter, which should be the full data to post in a HTTP
post operation.

Note that CURL library also implements the option @code{CURLOPT_POSTFIELDSIZE} for C programmers.
That option is automatically called by the interface function, thus any binary BASIC string
can be used as post parameter.

@section HTTPPROXYTUNNEL flag

@example
curl::option CurlHandle,"HTTPPROXYTUNNEL"
@end example

Set the parameter to get the library to tunnel all non-HTTP
operations through the given HTTP proxy. Do note that there is a big
difference to use a proxy and to tunnel through it. If you don't know what
this means, you probably don't want this tunnel option.

@section VERBOSE flag

@example
curl::option CurlHandle,"VERBOSE"
@end example

Set the parameter to get the library to display a lot of verbose
information about its operations. Very useful for libcurl and/or protocl
debugging and understanding.

@section NOPROGRESS flag

@example
curl::option CurlHandle,"NOPROGRESS"
@end example

Setting the parameter tells the library to shut of the built-in progress meter
completely. (NOTE: future versions of the lib is likely to not have any
built-in progress meter at all).

@section HEADER flag

@example
curl::option CurlHandle,"HEADER"
@end example

Setting the parameter tells the library to include the header in the
output. This is only relevant for protocols that actually has a header
preceeding the data (like HTTP).

@section NOBODY flag

@example
curl::option CurlHandle,"NOBODY"
@end example

Setting the parameter tells the library to not include the body-part in the
output. This is only relevant for protocols that have a separate header and
body part.

@section FAILONERROR flag

@example
curl::option CurlHandle,"FAILONERROR"
@end example

Setting the parameter tells the library to fail silently if the HTTP code
returned is equal or larger than 300. The default action would be to return
the page normally, ignoring that code.

@section UPLOAD flag

@example
curl::option CurlHandle,"UPLOAD"
@end example

Setting the parameter tells the library to prepare for an upload. The
option @code{INFILE} is also interesting for uploads.

@section POST flag

@example
curl::option CurlHandle,"POST"
@end example

Setting the parameter tells the library to do a regular HTTP post. This is a
normal @code{application/x-www-form-urlencoded} kind, which is the most commonly used
one by HTML forms. See the option @code{POSTFIELDS} option for how to specify the
data to post.

@section CRLF flag

@example
curl::option CurlHandle,"CRLF"
@end example

Convert unix newlines to CRLF newlines on FTP uploads.

@section FTPLISTONLY flag

@example
curl::option CurlHandle,"FTPLISTONLY"
@end example

Setting the parameter tells the library to just list the names of an ftp
directory, instead of doing a full directory listin that would include file
sizes, dates etc.

@section FTPAPPEND flag

@example
curl::option CurlHandle,"FTPAPPEND"
@end example

Setting the parameter tells the library to append to the remote file instead of
overwrite it. This is only useful when uploading to a ftp site.

@section NETRC flag

@example
curl::option CurlHandle,"NETRC"
@end example

The parameter tells the library to scan your
@code{~/.netrc}
file to find user name and password for the remote site you are about to
access. Do note that curl does not verify that the file has the correct
properties set (as the standard unix ftp client does), and that only machine
name, user name and password is taken into account (init macros and similar
things aren't supported).

@section FOLLOWLOCATION flag

@example
curl::option CurlHandle,"FOLLOWLOCATION"
@end example

Setting the parameter tells the library to follow any Location: header that the
server sends as part of a HTTP header. NOTE that this means that the library
will resend the same request on the new location and follow new Location:
headers all the way until no more such headers are returned.

@section TRANSFERTEXT flag

@example
curl::option CurlHandle,"TRANSFERTEXT"
@end example

Setting the parameter tells the library to use ASCII mode for ftp transfers,
instead of the default binary transfer. For LDAP transfers it gets the data in
plain text instead of HTML and for win32 systems it does not set the stdout to
binary mode. This option can be useable when transfering text data between
system with different views on certain characters, such as newlines or
similar.

@section CLOSEPOLICY

@example
curl::option CurlHandle,"CLOSEPOLICY"
@end example

This option sets what policy libcurl should use when the
connection cache is filled and one of the open connections has to be closed to
make room for a new connection. This must be @code{OLD} or @code{FRESH}. If you specify @code{OLD}
as argument libcurl close the
oldest connection, the one that was created first among the ones in the
connection cache. If you specify @code{FRESH} libcurl close the
connection that was least recently used, that connection is also least likely
to be capable of re-use.

Example

@example
curl::option CURL,"CLOSEPOLICY","OLD"
curl::option CURL,"CLOSEPOLICY","FRESH"
@end example

Note that the values are checked by the module case sensitive, thus you can not write @code{"old"}
or @code{"fresh"} or mixed case words. Also the module @b{does not tolerate} any other form of the words,
like @code{OLDEST} or @code{NEW}.

@section PUT flag

@example
curl::option CurlHandle,"PUT"
@end example

Setting the parameter tells the library to use HTTP PUT a file. The file to put
must be set with option @code{INFILE}.

@section SSL_VERIFYPEER flag

@example
curl::option CurlHandle,"SSL_VERIFYPEER"
@end example

Set the flag value to make curl verify the peer's
certificate. The certificate to verify against must be specified with the
option @code{CAINFO} option.

@section FILETIME flag

@example
curl::option CurlHandle,"FILETIME"
@end example

Pass a long. If it is a non-zero value, libcurl will attempt to get the
modification date of the remote document in this operation. This requires that
the remote server sends the time or replies to a time querying command. The
curl_easy_getinfo() function with the CURLINFO_FILETIME argument can be used
after a transfer to extract the received time (if any). (Added in 7.5)

@section FRESH_CONNECT flag

@example
curl::option CurlHandle,"FRESH_CONNECT"
@end example

Set the option to make the next transfer use a new connection by
force. If the connection cache is full before this connection, one of the
existinf connections will be closed as according to the set policy. This
option should be used with caution and only if you understand what it
does. Set to 0 to have libcurl attempt re-use of an existing connection.

@section FORBID_REUSE flag

@example
curl::option CurlHandle,"FORBID_REUSE"
@end example

Set the option to make the next transfer explicitly close the
connection when done. Normally, libcurl keep all connections alive when done
with one transfer in case there comes a succeeding one that can re-use them.
This option should be used with caution and only if you understand what it
does. Set to 0 to have libcurl keep the connection open for possibly later
re-use.

@section HTTPGET flag

@example
curl::option CurlHandle,"HTTPGET"
@end example

Set thisoption to force the HTTP request to get back
to @code{GET}. Only really usable if @code{POST}, @code{PUT} or a custom request have been used
previously using the same curl handle.


@section TIMEOUT integer

@example
' for example set the timeout to ten minutes
curl::option CurlHandle,"TIMEOUT",600
@end example

Pass an integer parameter containing the maximum time in seconds that you allow
the libcurl transfer operation to take. Normally, name lookups can take a
considerable time and limiting operations to less than a few minutes risk
aborting perfectly normal operations. This option will cause curl to use the
SIGALRM to enable timeouting system calls. @b{NOTE}
that this does not work in multi-threaded programs!

@section LOW_SPEED_LIMIT integer

@example
curl::option CurlHandle,"LOW_SPEED_LIMIT",100
@end example

Pass an integer as parameter. It contains the transfer speed in bytes per second
that the transfer should be below during @code{LOW_SPEED_TIME} seconds for
the library to consider it too slow and abort.

@section LOW_SPEED_TIME integer

@example
curl::option CurlHandle,"LOW_SPEED_TIME",60
@end example

Pass an integer as parameter. It contains the time in seconds that the transfer
should be below the @code{LOW_SPEED_LIMIT} for the library to consider it too
slow and abort.

@section RESUME_FROM integer

@example
curl::option CurlHandle,"RESUME_FROM",3321
@end example

Pass an integer as parameter. It contains the offset in number of bytes that you
want the transfer to start from.

@section SSLVERSION integer

@example
curl::option CurlHandle,"SSLVERSION",3
@end example

Pass an integer as parameter. Set what version of SSL to attempt to use, 2 or
3. By default, the SSL library will try to solve this by itself although some
servers make this difficult why you at times will have to use this option.

@section TIMECONDITION string

@example
curl::option CurlHandle,"TIMECONDITION","IFMODSINCE"
@end example

Pass a string as parameter. This defines how the @code{TIMEVALUE} time value is
treated. You can set this parameter to @code{IFMODSINCE} or
@code{IFUNMODSINCE}. This is aa HTTP-only feature.

Example

@example
curl::option CURL,"TIMECONDITION","IFMODSINCE"
curl::option CURL,"TIMECONDITION","IFUNMODSINCE"
@end example

Note that the values are checked by the module case sensitive, thus you can not write @code{"ifmodsince"}
or @code{"ifmodsince"} or mixed case words.

@section TIMEVALUE integer

@example
curl::option CURL,"TIMECONDITION","IFMODSINCE"
curl::option CurlHandle,"TIMEVALUE",curl::getdate("2 days ago")
@end example

Pass an integer as parameter. This should be the time in seconds since 1 jan 1970,
and the time will be used as specified in the option @code{TIMECONDITION} or if that
isn't used, it will be @code{IFMODSINCE} by default. (In other words curl will fetch the
page only if that is newer than the specified time.)

To conveniently get such time-stamp values as accepted by this function as argument you
can use the ScriptBasic function @code{TIMEVALUE}.

@section MAXREDIRS integer

@example
curl::option CurlHandle,"MAXREDIRS",3
@end example

Pass an integer as parameter. The set number will be the redirection limit. If that many
redirections have been followed, the next redirect will cause an error. This
option only makes sense if the option @code{FOLLOWLOCATION} is used at the same
time.

@section MAXCONNECTS integer

@example
curl::option CurlHandle,"MAXCONNECTS",10
@end example

Pass an integer as parameter. The set number will be the persistant connection cache size. The
set amount will be the maximum amount of simultaneous connections that libcurl
may cache between file transfers. Default is 5, and there isn't much point in
changing this value unless you are perfectly aware of how this work and
changes libcurl's behaviour. Note: if you have already performed transfers
with this curl handle, setting a smaller @code{MAXCONNECTS} than before may cause
open connections to unnecessarily get closed.

@section CONNECTTIMEOUT integer

@example
curl::option CurlHandle,"CONNECTTIMEOUT",10
@end example

Pass an integer as parameter. It should contain the maximum time in seconds that you allow the
connection to the server to take.  This only limits the connection phase, once
it has connected, this option is of no more use. Set to zero to disable
connection timeout (it will then only timeout on the system's internal
timeouts). Specifying no value for this option is the same as specifying zero as all integer value options.
See also the @code{TIMEOUT} option.

@b{NOTE} that this does not work in multi-threaded programs!

@section HTTPHEADER string

@example
curl::option CurlHandle,"HTTPHEADER","Accept: image/gif"
@end example

Use this option to specify a header to be sent to the server. If you add a header that is 
otherwise generated and used by libcurl internally, your added one will be used instead.
If you add a header with no contents as in @code{Accept:}, the internally used header will
just get disabled. Thus, using this option you can add new headers, replace
internal headers and remove internal headers.

You should call the function with this option for each extra header line that you want to add.

@section NOHTTPHEADER flag

@example
curl::option CurlHandle,"NOHTTPHEADER"
@end example

Use this option to delete all previous @code{HTTPHEADER} options. This may be needed when you use a single
CURL connection to download several pages from the same server and did not call @code{curl::finish} and
@code{curl::init()} again. Until you call @code{curl::finish} or specify this option all header lines remain effective.

After setting this option you can set various @code{HTTPHEADER} option strings to build up a new list.

@section QUOTE string

@example
curl::option CurlHandle,"QUOTE","pwd"
@end example

Use this option to set arbitrary FTP commands that will be passed to the server prior to
your ftp request. You can set more than one values for this option. The commands will be 
executed in the order they are specified.

@section NOQUOTE flag

@example
curl::option CurlHandle,"NOQUOTE"
@end example

Use this option to delete all previously set @code{QUOTE} FTP command strings. Read the documentation of
the option @code{HTTPDEADER}.

@section POSTQUOTE string

@example
curl::option CurlHandle,"POSTQUOTE","site chmod 777 uploadedfile.txt"
@end example

Use this option to set arbitrary FTP commands that will be passed to the server after
your ftp request. You can set more than one values for this option. The commands will be 
executed in the order they are specified.

@section NOPOSTQUOTE flag

@example
curl::option CurlHandle,"NOPOSTQUOTE"
@end example

Use this option to delete all previously set @code{POSTQUOTE} FTP command strings. Read the documentation of
the option @code{HTTPDEADER}.

@section FORMADD string

@example
curl::option CurlHandle,"FORMADD", _
     "NAME","field_name", _
     "VALUE","field_value", _
     "FILE","name_of_file_to_upload", _
     "FILENAME","reported_file_name", _
     "CONTENTTYPE","content/type", _
     "HEADER","extra-content: header"
@end example

Use this option to specify post parameters to be sent to the server when retrieving the URL.
There should be even number of arguments following the option @code{"FORMADD"}. Each pair of arguments
specify the argument type and the value. The argument types can be:

@itemize
@item @code{"NAME"} should be followed by the name of the argument
@item @code{"VALUE"} should be followed by the string value of the argument
@item @code{"FILE"} should be followed by the name of a file to be uploaded
@item @code{"FILENAME"} should be followed by the name of the file that you want to specify in the
post data to be sent to the server. If this value is not specified when uploading a file the
real file name specified following the @code{"FILE"} will be sent. You may not want to disclose the
real name of the file on the client and/or the full path to the file uploaded.
@item @code{"CONTENTTYPE"} should be followed by the content type of the uploaded file.
(multipart upload)
@item @code{"HEADER"} should be followed by extra header fields that are used for the specific content.
(multipart upload)
@end itemize

@section HTTPPOST string

@example
curl::option CurlHandle,"HTTPPOST" [,"name1","value1",...,"nameN","valueN"]
@end example

Use this option to specify the post parameters to be sent to the server when retrieving the URL.

Note that this option was greatly changed and is not compatible with fomer versions. 

The optional
arguments @code{name1, name2, ..., nameN} specify the names of the post fields and
@code{value1, value2, ..., valueN} spefify the values. This way you can specify simple text post
parameters. If you want to specify more complex post parameters, like file upload, you have
to use the option @code{FORMADD}. 

Use the option without optional arguments to close the repetitive use of the option @code{FORMADD}. In
other word: if you specify the POST arguments using the option @code{FORMADD} you also have to use the
option @code{HTTPPOST} after the last @code{FORMADD} option invocation.

@section ERRORBUFFER not implemented

This option is implemented in the original CURL library, but is not implemented in this interface.
The ScriptBasic interface sets this option automatically and you can access the error message calling the
BASIC function @code{curl::error()}.

@section Options not implemented
@itemize
@item @code{CURLOPT_STDERR} is used in the CURL library to specify an alternate strean instead of @code{stderr}
for erro output. This is not supported by the ScriptBasic interface.

@item @code{CURLOPT_PROGRESSFUNCTION} is used in conjunction with @code{CURLOPT_PROGRESSDATA} to specify a progress
function that CURLIB library calls from time to time to allow progress indication for the user. This is
not implemented in the ScriptBasic interface.

@item @code{CURLOPT_PASSWDFUNCTION} is used along with the option @code{CURLOPT_PASSWDDATA} to specify a function
that returns the password for connections that need password, but no password is specified. This is not
implemented in ScriptBasic.


@chapter  curl::perform

Call this function to perform the action that was initialized using the function
@code{curl::init()} and @code{curl::option()}

Usage:
@example
curl::perform CURL
@end example


@chapter  curl::info

Call this function to get information on the performed action
after @code{curl::perform} was called

Usage:
@example
INFO = curl::info(CURL,info)
@end example

The argument @code{info} should be string and can take one of the valueslisted in the following sections. The return
value is either a string, integer or real value according to the type of the requested information. The possible
string arguments should be used in upper case letters, and should be precisely typed, no abbreviations or alternate
forms of the words are recognized by the subroutine.

Note that the following sections were mainly compiled from the documentation of the original C language CURL package
documentation @code{curl_easy_getinfo.3} man page.

@section EFFECTIVE_URL string
The function returns the string of the effective URL of the last transfer.

@section HTTP_CODE integer
The function returns the integer status value of the lasttransfer.

@section FILETIME integer
The function returns the remote time of the retrieved document. If the result is zero it means that the time
can not be determined for some reson. It may happen that the server hides the time, or does not support the
command that is used to retrieve the file time.

@section TOTAL_TIME real
The function returns a real number; the total transaction time in seconds for the previous transfer. The returned
value is real and not integer because the fractional seconds are also taken into account.

@section NAMELOOKUP_TIME real
The function returns a real number; the time, in seconds, it took from the start until the name resolving 
was completed.

@section CONNECT_TIME real
The function returns a real number; 
the time, in seconds, it took from the
start until the connect to the remote host (or proxy) was completed.

@section PRETRANSFER_TIME real
The function returns a real number; 
the time, in seconds, it took from the
start until the file transfer is just about to begin. This includes all
pre-transfer commands and negotiations that are specific to the particular
protocol(s) involved.

@section SIZE_UPLOAD real
The function returns a real number; 
the total amount of bytes that were
uploaded.

I see no reason why this is a real number but the underlying CURL library returns a @code{double}.

@section SIZE_DOWNLOAD real
The function returns a real number; 
total amount of bytes that were
downloaded.

I see no reason why this is a real number but the underlying CURL library returns a @code{double}.

@section SPEED_DOWNLOAD real
The function returns a real number; 
the average download speed, in bytes/seconds, that curl
measured for the complete download.

@section SPEED_UPLOAD real
The function returns a real number; 
the average upload speed, in bytes/seconds, that curl
measured for the complete upload.

@section HEADER_SIZE integer
The function returns an integer;
the toal number of bytes received in all headers during the transfer.

@section REQUEST_SIZE integer
The function returns an integer;
the total number of bytes of the issued
requests. This is so far only for HTTP requests. Note that this may be more
than one request if @code{FOLLOWLOCATION} was set using @code{curl::option}.

@section SSL_VERIFYRESULT integer
The function returns an integer;
the result of the certification verification that was requested (using @code{curl::option} with the option @code{SSL_VERIFYPEER}).

@section CONTENT_LENGTH_DOWNLOAD real
The function returns a real number;
the content-length of the download. This
is the value read from the @code{Content-Length:} field.

I see no reason why this is a real number but the underlying CURL library returns a @code{double}.

@section CONTENT_LENGTH_UPLOAD real
The function returns a real number;
the specified size of the upload.

@chapter  curl::finish

You can call this function to close the connection that was used by CURL and to release
all resources that were allocated to handle the connection. To call this function is not
a must as all the releasing tasks are automatically performed as soon as the interpreter
finishes execution the BASIC program. However it is a good practice to call this functions
especially if you want to access the file the perform routine downloaded.

Usage:
@example
curl::finish CURL
@end example

This function closes the connection to the remote URL, closes the local file (if there was opened any), and
releases the memory that was used for the connection.


@chapter  curl::error

If any error has happened this function can be used to retrieve the error message that the underlying
CURL library supplied.

Usage:
@example
print curl::error(CURL)
@end example


@chapter  curl::escape

This function will convert the given input string to an URL encoded string and
return that string. All input characters that are not a-z,
A-Z or 0-9 will be converted to their "URL escaped" version.

Usage:
@example
URLencoded = curl::escape(URLnonencoded)
@end example


@chapter  curl::unescape

This function will convert the given URL encoded input string to a "plain
string" and return that string. All input characters that are encoded @code{%XX}
where @code{XX} is a to digit hexadecimal character will be converted to their
plain text version. All @code{+} characters that are after the (or a) @code{?} character
are converted to space.

Usage:
@example
URLencoded = curl::escape(URLnonencoded)
@end example

This behaviour of this function makes it easy to unescape URLs that contain not
only the CGI GET parameter of the URL, but the whole URL. For exaple:

@example
print curl::unescape("http://www.kuka+muka.com/mypage.asp?name=Linus+Nielsen")
@end example

will print

@example
http://www.kuka+muka.com/mypage.asp?name=Linus Nielsen
@end example

which is much better than having the web server name converted to something containing a space.


@chapter  curl::getdate

This function returns the number of seconds since January 1st 1970, for the
date and time that the @emph{datestring} parameter specifies. 
Read further in the date string parser section below.

If the input string can not be parsed the function return zero.

The following is copied from the original @code{curl_getdate} manual page.

@b{PARSING DATES AND TIMES}

A @code{"date"} is a string, possibly empty, containing many items separated by
whitespace. The whitespace may be omitted when no ambiguity arises.  The
empty string means the beginning of today (i.e., midnight).  Order of the
items is immaterial.  A date string may contain many flavors of items:

@itemize
@item calendar date items
This can be specified in a number of different ways. 
Including @code{1970-09-17}, @code{70-9-17}, @code{70-09-17}, @code{9/17/72},
@code{24 September 1972}, @code{24 Sept 72}, @code{24 Sep 72}, @code{Sep 24, 1972},
@code{24-sep-72}, @code{24sep72}.
The year can also be omitted, for example: @code{9/17} or @code{sep 17}.

@item time of the day items
This string specifies the time on a given day. Syntax supported includes:
@code{18:19:0}, @code{18:19}, @code{6:19pm}, @code{18:19-0500}
(for specifying the time zone as well).

@item time zone items
Specifies international time zone. There are a few acronyms supported, but in
general you should instead use the specific realtive time compared to
UTC. Supported formats include: @code{-1200}, @code{MST}, @code{+0100}.

@item day of the week items
Specifies a day of the week. If this is mentioned alone it means that day of
the week in the future.

Days of the week may be spelled out in full: @code{Sunday}, @code{Monday}, etc or they
may be abbreviated to their first three letters, optionally followed by a
period.  The special abbreviations @code{Tues} for @code{Tuesday}, @code{Wednes} for
@code{Wednesday} and @code{Thur} or @code{Thurs} for @code{Thursday} are also allowed.

A number may precede a day of the week item to move forward supplementary
weeks.  It is best used in expression like @code{third monday}.  In this context,
@code{last DAY} or @code{next DAY} is also acceptable; they move one week before or
after the day that DAY by itself would represent.

@item relative items
A relative item adjusts a date (or the current date if none) forward or
backward. Example syntax includes: @code{1 year}, @code{1 year ago}, @code{2 days}, 
@code{4 weeks}.

The string @code{tomorrow} is worth one day in the future (equivalent to @code{day}),
the string @code{yesterday} is worth one day in the past (equivalent to @code{day ago}).

@item pure numbers
If the decimal number is of the form @code{YYYYMMDD} and no other calendar date item
appears before it in the date string, then @code{YYYY} is read as the year, @code{MM} as the
month number and @code{DD} as the day of the month, for the specified calendar date.
@end itemize

@b{AUTHORS}

Originally written by Steven M. Bellovin @code{smb@research.att.com} while at the
University of North Carolina at Chapel Hill.  Later tweaked by a couple of
people on Usenet.  Completely overhauled by Rich $alz @code{rsalz@bbn.com} and Jim
Berets @code{jberets@bbn.com} in August, 1990.


@chapter  curl::version

Returns a human readable string with the version number of
libcurl and some of its important components (like OpenSSL
version) that were used to create the ScriptBasic module
@code{curl.dll} under Windows NT or @code{curl.so} under UNIX.

The module links the CURL library static thus you have to
recompile it or download a newer binary of the module if
there is a newer version of the CURL library even if you
have installed a newer version of the library itself.
 

