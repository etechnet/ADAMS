import javax.swing.JOptionPane;
import java.awt.Color;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;

/**
 * <p align="center"><font size="1"><b><font size="3" face="Times New Roman, Times, serif"> PROCESS MONITOR client </font></b></font></p>
 * <p align="center"> <b>Author:</b></p>
 * <p align="center">-  Raffaele Ficcadenti (E-TECH) Created on 13/05/2005 - <a href="mailto:raffaele.ficcadenti@e-tech.net">raffaele.ficcadenti@e-tech.net</a></p>
 *
 */
public class SSM_JF_MonitoringOutput extends javax.swing.JFrame implements Runnable
{
    private SSM_JP_ProcessRow testata        = null;
    public int type                         = 0;
    /**
     *Costruttore della classe.
     *@param ID_ProcessSelected Indici dei processi da collocare nell'interfaccia GUI.
     *@param SWITCH_SELECTED Nome della centrale d'interesse.
     *@param timeSleep tempo (in secondi) di refresh per la richiesta dei dati aggiornati dei processi. 
     */
    public SSM_JF_MonitoringOutput(int[] ID_ProcessSelected,String SWITCH_SELECTED,int timeSleep,int type) 
    {
        super();
        this.type=type;
        this.setTitle("Process Monitoring -"+SWITCH_SELECTED+" -");
        
        
        initComponents();

        jL_SW.setText(""+SWITCH_SELECTED);
        jl_time_refresh.setText(" Refresh time "+timeSleep+" seconds.");
        

        this.TIME_SLEEP         = timeSleep;   
        this.SWITCHSELECTED     = SWITCH_SELECTED;
        this.IDProcessSelected  = ID_ProcessSelected;
        int numRows = IDProcessSelected.length;
        
        jB_resetFields.setCursor(cursor_hand);
        jB_resetAll.setCursor(cursor_hand);
        jB_all.setCursor(cursor_hand);
        jB_stop.setCursor(cursor_hand);
        jB_close.setCursor(cursor_hand);
        
        jTF_number.setDocument(new SSM_JTextFieldFilter(SSM_JTextFieldFilter.NUMERIC,2));
        
        event_KEY = (new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jT_KeyReleased(evt);
            }
            });
        jTF_number.addKeyListener(event_KEY);
        
        // Per dimensionare l'oggetto scroll
        int heigth_jScrollrows = numRows*35;
        if(heigth_jScrollrows > 450)
            heigth_jScrollrows = 450;
        jScrollrows.setPreferredSize(new java.awt.Dimension(100, heigth_jScrollrows));
        jScrollrows.getVerticalScrollBar().setUnitIncrement(20);
        
        testata=new SSM_JP_ProcessRow(true,-2,SWITCHSELECTED,this,type); 
        jP_center.add(testata,java.awt.BorderLayout.NORTH); //ADD Intestazione ROWS
        start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_north = new javax.swing.JPanel();
        jL_SW = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jB_stop = new javax.swing.JButton();
        jB_active = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jl_Time = new javax.swing.JLabel();
        jl_time_refresh = new javax.swing.JLabel();
        jScroll_center = new javax.swing.JScrollPane();
        jP_center = new javax.swing.JPanel();
        jScrollrows = new javax.swing.JScrollPane();
        jP_row = new javax.swing.JPanel();
        jP_south = new javax.swing.JPanel();
        jScroll_south = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jP_button = new javax.swing.JPanel();
        jB_resetFields = new javax.swing.JButton();
        jB_resetAll = new javax.swing.JButton();
        jB_all = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTF_number = new javax.swing.JTextField();
        jB_close = new javax.swing.JButton();
        jB_analize = new javax.swing.JButton();
        jb_reverse = new javax.swing.JButton();
        
        setBackground(new java.awt.Color(230, 230, 230));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        jP_north.setLayout(new java.awt.BorderLayout());
        
        jP_north.setBackground(new java.awt.Color(230, 230, 200));
        jP_north.setMinimumSize(new java.awt.Dimension(900, 40));
        jP_north.setPreferredSize(new java.awt.Dimension(1000, 60));
        jL_SW.setBackground(new java.awt.Color(230, 230, 204));
        jL_SW.setFont(new java.awt.Font("Helvetica", 1, 18));
        jL_SW.setForeground(new java.awt.Color(9, 126, 165));
        jL_SW.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_SW.setOpaque(true);
        jP_north.add(jL_SW, java.awt.BorderLayout.CENTER);
        
        jPanel1.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jPanel1.setBackground(new java.awt.Color(230, 230, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(90, 60));
        jB_stop.setBackground(new java.awt.Color(230, 230, 230));
        jB_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledred.gif")));
        jB_stop.setText("Stop");
        jB_stop.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_stop.setFocusPainted(false);
        jB_stop.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jB_stop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_stop.setPreferredSize(new java.awt.Dimension(75, 23));
        jB_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_stopActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jB_stop, gridBagConstraints1);
        
        jB_active.setBackground(new java.awt.Color(230, 230, 230));
        jB_active.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/animled.gif")));
        jB_active.setText("Active");
        jB_active.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_active.setFocusPainted(false);
        jB_active.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jB_active.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_active.setPreferredSize(new java.awt.Dimension(75, 23));
        jB_active.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_activeActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jB_active, gridBagConstraints1);
        
        jP_north.add(jPanel1, java.awt.BorderLayout.EAST);
        
        jPanel2.setLayout(new java.awt.GridLayout(2, 1));
        
        jPanel2.setBackground(new java.awt.Color(230, 230, 204));
        jl_Time.setForeground(new java.awt.Color(9, 126, 165));
        jl_Time.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jl_Time.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jl_Time.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel2.add(jl_Time);
        
        jl_time_refresh.setForeground(new java.awt.Color(9, 126, 165));
        jl_time_refresh.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel2.add(jl_time_refresh);
        
        jP_north.add(jPanel2, java.awt.BorderLayout.WEST);
        
        getContentPane().add(jP_north, java.awt.BorderLayout.NORTH);
        
        jScroll_center.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jP_center.setLayout(new java.awt.BorderLayout());
        
        jP_center.setMaximumSize(new java.awt.Dimension(32767, 200));
        jScrollrows.setBackground(java.awt.Color.black);
        jScrollrows.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jP_row.setLayout(new java.awt.GridLayout(0, 1));
        
        jP_row.setBackground(java.awt.Color.lightGray);
        jScrollrows.setViewportView(jP_row);
        
        jP_center.add(jScrollrows, java.awt.BorderLayout.CENTER);
        
        jScroll_center.setViewportView(jP_center);
        
        getContentPane().add(jScroll_center, java.awt.BorderLayout.CENTER);
        
        jP_south.setLayout(new java.awt.BorderLayout());
        
        jP_south.setBackground(new java.awt.Color(230, 230, 204));
        jP_south.setBorder(new javax.swing.border.TitledBorder(null, " Selected Process ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12)));
        jScroll_south.setBackground(new java.awt.Color(230, 230, 230));
        jScroll_south.setPreferredSize(new java.awt.Dimension(1000, 100));
        jTextArea.setBackground(new java.awt.Color(230, 230, 204));
        jTextArea.setEditable(false);
        jTextArea.setFont(new java.awt.Font("Dialog", 1, 12));
        jScroll_south.setViewportView(jTextArea);
        
        jP_south.add(jScroll_south, java.awt.BorderLayout.CENTER);
        
        jP_button.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        
        jP_button.setBackground(new java.awt.Color(230, 230, 230));
        jP_button.setPreferredSize(new java.awt.Dimension(1000, 28));
        jB_resetFields.setBackground(new java.awt.Color(230, 230, 230));
        jB_resetFields.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_yellow.png")));
        jB_resetFields.setText("Reset Yellow Fields");
        jB_resetFields.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_resetFields.setFocusPainted(false);
        jB_resetFields.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_resetFields.setMinimumSize(new java.awt.Dimension(170, 22));
        jB_resetFields.setPreferredSize(new java.awt.Dimension(170, 22));
        jB_resetFields.setEnabled(false);
        jB_resetFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_resetFieldsActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 0;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 2);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
        jP_button.add(jB_resetFields, gridBagConstraints2);
        
        jB_resetAll.setBackground(new java.awt.Color(230, 230, 230));
        jB_resetAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_yellow.png")));
        jB_resetAll.setText("Reset All");
        jB_resetAll.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_resetAll.setFocusPainted(false);
        jB_resetAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_resetAll.setMinimumSize(new java.awt.Dimension(90, 22));
        jB_resetAll.setPreferredSize(new java.awt.Dimension(90, 22));
        jB_resetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_resetAllActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 1;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 15);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
        jP_button.add(jB_resetAll, gridBagConstraints2);
        
        jB_all.setBackground(new java.awt.Color(230, 230, 230));
        jB_all.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select_all_blu.png")));
        jB_all.setText("All");
        jB_all.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_all.setDoubleBuffered(true);
        jB_all.setFocusPainted(false);
        jB_all.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_all.setPreferredSize(new java.awt.Dimension(50, 22));
        jB_all.setEnabled(false);
        jB_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Log_ActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 5;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 17);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
        jP_button.add(jB_all, gridBagConstraints2);
        
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("LOG Date Number");
        jLabel1.setPreferredSize(new java.awt.Dimension(130, 18));
        jLabel1.setEnabled(false);
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 2;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 15, 0, 2);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
        jP_button.add(jLabel1, gridBagConstraints2);
        
        jTF_number.setFont(new java.awt.Font("Dialog", 1, 12));
        jTF_number.setMinimumSize(new java.awt.Dimension(25, 22));
        jTF_number.setPreferredSize(new java.awt.Dimension(25, 20));
        jTF_number.setEnabled(false);
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 3;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 2);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
        jP_button.add(jTF_number, gridBagConstraints2);
        
        jB_close.setBackground(new java.awt.Color(230, 230, 230));
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_x.png")));
        jB_close.setText("Close");
        jB_close.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_close.setFocusPainted(false);
        jB_close.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_close.setPreferredSize(new java.awt.Dimension(65, 22));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 8;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.ipady = 1;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 2);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
        jP_button.add(jB_close, gridBagConstraints2);
        
        jB_analize.setBackground(new java.awt.Color(230, 230, 230));
        jB_analize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select_all_blu.png")));
        jB_analize.setText("Analize");
        jB_analize.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_analize.setDoubleBuffered(true);
        jB_analize.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_analize.setMaximumSize(new java.awt.Dimension(80, 25));
        jB_analize.setMinimumSize(new java.awt.Dimension(80, 25));
        jB_analize.setPreferredSize(new java.awt.Dimension(80, 22));
        jB_analize.setEnabled(false);
        jB_analize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Log_ActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 4;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 2);
        jP_button.add(jB_analize, gridBagConstraints2);
        
        jb_reverse.setBackground(new java.awt.Color(230, 230, 230));
        jb_reverse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/filters_invert.png")));
        jb_reverse.setText("Invert Color");
        jb_reverse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jb_reverse.setFocusPainted(false);
        jb_reverse.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jb_reverse.setPreferredSize(new java.awt.Dimension(125, 22));
        jb_reverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_reverseActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 7;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.ipady = 1;
        gridBagConstraints2.insets = new java.awt.Insets(0, 2, 0, 2);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
        jP_button.add(jb_reverse, gridBagConstraints2);
        
        jP_south.add(jP_button, java.awt.BorderLayout.SOUTH);
        
        getContentPane().add(jP_south, java.awt.BorderLayout.SOUTH);
        
        pack();
    }//GEN-END:initComponents

    private void jb_reverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_reverseActionPerformed
        // Add your handling code here:
        System.out.println("Scambia");
        flagReverse=!flagReverse;
        for(int i=0;i<V_ProcessROW.size();i++)
        {
            SSM_JP_ProcessRow p=(SSM_JP_ProcessRow)V_ProcessROW.elementAt(i);
            p.reverseColor();
            Color c=c1;
            c1=c2;
            c2=c;
            //jP_row.setBackground(c);
        }
        testata.reverseColor();
        
        Color cf=jTextArea.getForeground();
        Color cb=jTextArea.getBackground();
        
        jTextArea.setForeground(cb);
        jTextArea.setBackground(cf);
        jP_south.setForeground(cb);
        jP_south.setBackground(cf);
        
        
        cf=jP_button.getForeground();
        cb=jP_button.getBackground();
        
        jP_button.setForeground(cb);
        jP_button.setBackground(cf);
        
       
        cf=jPanel1.getForeground();
        cb=jPanel1.getBackground();
        jPanel1.setForeground(cb);
        jPanel1.setBackground(cf);
        
        
        cf=jPanel2.getForeground();
        cb=jPanel2.getBackground();
        jPanel2.setForeground(cb);
        jPanel2.setBackground(cf);
        jL_SW.setForeground(cb);
        jL_SW.setBackground(cf);
        

    }//GEN-LAST:event_jb_reverseActionPerformed

    private void jB_activeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_activeActionPerformed
        // Add your handling code here:
        jB_active.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/animled.gif")));
        start();
        
    }//GEN-LAST:event_jB_activeActionPerformed

    private void Log_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Log_ActionPerformed
        this.setCursor(cursor_wait);
        Object target = evt.getSource();
        
        int day_selected = new Integer(jTF_number.getText().trim()).intValue();
        int Single_ALL;
        String nameProc = "";
        if(target == jB_all)
        {
            Single_ALL = SSM_GlobalParam.ALL_PROCESS;
        }
        else
        {
            Single_ALL = SSM_GlobalParam.SINGLE_PROCESS;
            nameProc = (getProcessROW_isPresent(ID_PROCESS_SELECTED)).getNameProcess();
        }
        
        if(JF_TArea != null)
                JF_TArea.dispose();
        
        JF_TArea = new SSM_JF_textArea(Single_ALL,SWITCHSELECTED,nameProc,day_selected,this.type);
        JF_TArea.setLocation(this.getX()+120,this.getY()+100);
        JF_TArea.start();
        JF_TArea.pack();
        //JF_TArea.show();
        JF_TArea.setVisible(true);

        this.setCursor(cursor_default);
    }//GEN-LAST:event_Log_ActionPerformed

    private void jT_KeyReleased(java.awt.event.KeyEvent evt) 
    {
       boolean flag = false;
       if(jTF_number.getText().length() > 0)
            flag = true;
       
       jB_analize.setEnabled(flag);
       jB_all.setEnabled(flag);
    }
    private void jB_resetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_resetAllActionPerformed
        if( ctrl_AllnumRestartTime() == true )
        {
            JOptionPane jOptionPane1 = new JOptionPane();
            int YES_NO = jOptionPane1.showConfirmDialog(this,"Reset yellow field for all process.","Question Messagge",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);

            if(YES_NO == 0)
            {
                int stat = SSM_GlobalParam.CORBAConn.resetField(SWITCHSELECTED,0,SSM_GlobalParam.ALL_PROCESS,"");
                JOptionPane warning = new JOptionPane();
                if(stat ==1)
                    warning.showMessageDialog(this,"Reset yellow field. OK done.","Error Message",JOptionPane.INFORMATION_MESSAGE);
                else
                    warning.showMessageDialog(this,"Reset yellow field. FAILURE.","Error Message",JOptionPane.ERROR_MESSAGE);
                
                Thread_wakeup = true;
            }
        }
        else
        {
            JOptionPane warning = new JOptionPane();
            warning.showMessageDialog(this,"Reset yellow field. Is uneeded.","Error Message",JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_jB_resetAllActionPerformed

    private void jB_resetFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_resetFieldsActionPerformed
        
        if(this.ID_PROCESS_SELECTED != -1)
        {
            SSM_JP_ProcessRow PRow = getProcessROW_isPresent(ID_PROCESS_SELECTED);
            if(PRow != null)
            {
                String NameProcess = PRow.getNameProcess();
                JOptionPane jOptionPane1 = new JOptionPane();
                int YES_NO = jOptionPane1.showConfirmDialog(this,"Reset yellow field for process "+NameProcess+".","Question Messagge",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);

                // YES_NO = 0 ===> YES -- YES_NO = 1 ===> NO
                if(YES_NO == 0)
                {
                    int stat = SSM_GlobalParam.CORBAConn.resetField(SWITCHSELECTED,0,SSM_GlobalParam.SINGLE_PROCESS,NameProcess);
                    JOptionPane warning = new JOptionPane();
                    if(stat ==1 )
                        warning.showMessageDialog(this,"Reset yellow field. OK done.","Error Message",JOptionPane.INFORMATION_MESSAGE);
                    else
                        warning.showMessageDialog(this,"Reset yellow field. FAILURE.","Error Message",JOptionPane.ERROR_MESSAGE);
                    
                    Thread_wakeup = true;
                }
            }
        }
    }//GEN-LAST:event_jB_resetFieldsActionPerformed
    
    /**
     * Questo metodo imposta all'interno della classe il processo specificato nel parametro <idProcessSelected>
     * @param idProcessSelected identificativo univoco del processo da impostare all'interno della classe.
     */
    public void setID_PROCESS_SELECTED(int idProcessSelected)
    {
        this.ID_PROCESS_SELECTED = idProcessSelected;
        
        SSM_JP_ProcessRow APPOPRow = getProcessROW_isPresent(ID_PROCESS_SELECTED);
        
        jP_south.setBorder(new javax.swing.border.TitledBorder(null, " Selected Process: "+APPOPRow.getNameProcess() , javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), java.awt.Color.black));
        
        if( ( APPOPRow.getnumRestartTime() > 1 ) && (Thread_RUN == true) )
        {
            jB_resetFields.setEnabled(true);
        }
        else
            jB_resetFields.setEnabled(false);
        
        jLabel1.setEnabled(true);
        jTF_number.setEnabled(true);
    }
    
    /**
     *Questo permette di referenziare dall'esterno l'oggetto jTextArea utilizzato nell'interfaccia GUI.
     *@return Oggetto di tipo javax.swing.JTextArea.
     */
    public javax.swing.JTextArea get_JTextArea()
    {
        return this.jTextArea;
    }
    private void jB_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_stopActionPerformed
        // Add your handling code here:
        stop();
    }//GEN-LAST:event_jB_stopActionPerformed

    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
        closeFrame();
    }//GEN-LAST:event_jB_closeActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closeFrame();
        
    }//GEN-LAST:event_exitForm
    
    private void closeFrame()
    {
        stop();
        this.dispose();        
    }
    
    /**
     *Il metodo avvia l'esecuzione del Thread.
     */
    public void start()
    {      
        if(V_ProcessROW == null)
            V_ProcessROW = new java.util.Vector();
        
        jB_resetAll.setEnabled(true);
        Thread_RUN = true;
        Thread_wakeup = false;
        
        th = new Thread(this);
        th.start();
        //System.out.println("START");
    }
    
    /**
     *Il metodo interrompe l'esecuzione del Thread.
     */
    public void stop()
    {
        jB_active.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledgreen.gif")));
        
        jB_resetAll.setEnabled(false);
        jB_resetFields.setEnabled(false);
        
        Thread_wakeup = true;
        Thread_RUN = false; 

        //System.out.println("stop()");
    }   
    
      

    /**
    * In questo metodo viene definito il codice del Thread, necessario per la richiesta dei dati aggiornati riguardanti i processi
    * d'interesse, mediante il metodo "refresh_MonitorProcess(SWITCHSELECTED,...)" tramite l'oggetto di tipo SSM_CORBAConnection dichiarato 
    * nella classe globale SSM_GlobalParam.
    * Inoltre viene effettuato l'aggiornamento grafico con nuovi dati da visualizzare.
    */
    public void run()
    {               
        while(Thread_RUN)
        {        
            this.setCursor(cursor_wait);
            ProcesDetail[] processDetails=null;
            
            if(this.type==SSM_GlobalParam.NO_ORBIX)
            {
                processDetails = SSM_GlobalParam.CORBAConn.refresh_MonitorProcess(SWITCHSELECTED,1);
            }
            else if(this.type==SSM_GlobalParam.ORBIX)
            {
                processDetails = SSM_GlobalParam.CORBAConn.refresh_MonitorProcess(SWITCHSELECTED,2);
            }
            
            if(Thread_RUN == false)
            {
                this.setCursor(cursor_default);
                return;
            }
            
            
            if(processDetails !=null)
            {
                //System.out.println("refresh_MonitorProcess processDetails.length => "+processDetails.length);                
             
                for(int x=0; x<IDProcessSelected.length; x++)
                {
                    int id_process_selected = IDProcessSelected[x];                    
                    for(int i=0; i<processDetails.length; i++)
                    {
                        if(id_process_selected == processDetails[i].idProcesso)
                        {                              
                            SSM_JP_ProcessRow PRow = getProcessROW_isPresent(id_process_selected);
                            
                            if (PRow == null) //SSM_JP_ProcessRow non presente nel vettore (1ï¿½ giro)-- CREO nuova riga e set .
                            {
                                //System.out.println("Creo nuova Riga per il processo con ID ==> "+id_process_selected);
                                PRow = new SSM_JP_ProcessRow(false,id_process_selected,this.SWITCHSELECTED,this,type);
                                V_ProcessROW.addElement(PRow); //ADD Al VETTORE
                                jP_row.add(PRow);
                                
                            }                            
                         ////// Setto PARAMETRI //////
                            PRow.setTypeProcess(new String(processDetails[i].tipoProcesso).trim()); 
                            PRow.setNameProcess(new String(processDetails[i].nomeProcesso).trim());
                            
                            //System.out.println(new String(processDetails[i].nomeProcesso).trim()+" - "+new String(processDetails[i].colorBKnomeProcesso).trim());
                            
                            PRow.setColorBG_NameProcess(ColorExtract(new String(processDetails[i].colorBKnomeProcesso).trim(),ColorDefault));
                            
                            if(processDetails[i].param.length > 2)
                                PRow.setStatus(processDetails[i].param[2]);
                            else
                            {
                                PRow.setStatus(1);
                                System.out.println("er. NOT Found III PARAM");
                            }
                            
                            PRow.setParams(processDetails[i].param[0],processDetails[i].param[1]);
                            PRow.setMessage(new String(processDetails[i].msgProcesso).trim());
                            PRow.setColorBG_Message(ColorExtract(new String(processDetails[i].colorBKmsgProcesso).trim(),ColorDefault));
                            PRow.setnumRestartTime(processDetails[i].numRestartTime);
                            break;
                        }
                    }
                }
                
               /* for(int i=0; i<processDetails.length; i++)
                {               
                    System.out.println("ID Processo         ==> "+processDetails[i].idProcesso);	
                    System.out.println("Tipologia Processo  ==> "+new String(processDetails[i].tipoProcesso).trim());
                    System.out.println("Nome Processo       ==> "+new String(processDetails[i].nomeProcesso).trim());
                    System.out.println("Colore BK Processo  ==> "+new String(processDetails[i].colorBKnomeProcesso).trim());

                    System.out.println();
                    for(int x=0; x<processDetails[i].param.length; x++)
                    {
                        System.out.print("Parametri di output ==> "+processDetails[i].param[x]+" ");
                    }

                    System.out.println("Status del Processo     ==> "+processDetails[i].statusProcesso);
                    System.out.println("Numero di restart       ==> "+processDetails[i].numRestartTime);
                    System.out.println("Flag di schedulazione   ==> "+processDetails[i].flagSched);
                    System.out.println("Messaggio               ==> "+new String(processDetails[i].msgProcesso).trim());
                    System.out.println("Colore Messaggio        ==> "+new String(processDetails[i].colorBKmsgProcesso).trim());
                } */
            }
            else
            {
                System.out.println("******* processDetails[] is null ******** ");
            }
            
            str_LAST_Data = SSM_GlobalParam.CORBAConn.get_SystemTime(SWITCHSELECTED);
            
            if(str_LAST_Data != null)
                if(str_LAST_Data.length() > 0)
                    jl_Time.setText(" Last update: "+str_LAST_Data);            
            try
            {
                this.setCursor(cursor_default);
                for(int i=0; i<TIME_SLEEP; i++)
                {
                    if(Thread_wakeup == true)
                        break;
                    
                    th.sleep(1000);
                }
                Thread_wakeup = false;                
            }
            catch(InterruptedException e)
            {
                System.out.println("-- InterruptedException SSM_JF_MonitoringOutput.java ");
            }
        }        
        this.setCursor(cursor_default);
    }
    
    private SSM_JP_ProcessRow getProcessROW_isPresent(int idProcesso)
    {
        if(V_ProcessROW != null)
        {
            for(int i=0; i<V_ProcessROW.size(); i++)
            {
                SSM_JP_ProcessRow processRow_APPO = (SSM_JP_ProcessRow)V_ProcessROW.elementAt(i);
                if(processRow_APPO.getIDProcess() == idProcesso)
                {
                    return  processRow_APPO;
                }
            }
        }
        return null;
    }
    
    private boolean ctrl_AllnumRestartTime()
    {
        if(V_ProcessROW != null)
        {
            for(int i=0; i<V_ProcessROW.size(); i++)
            {
                SSM_JP_ProcessRow processRow_APPO = (SSM_JP_ProcessRow)V_ProcessROW.elementAt(i);
                if( processRow_APPO.getnumRestartTime()> 1 )
                    return true;                    
            }
        }
        return false; 
    }
    
    /**
     * Questo metodo permette la conversione di una Stringa contenete la descrizione di un colore in RGB (es: "255255255"),
     * in un oggetto Colore. Inoltre il metodo accetta come secondo parametro d'ingresso un colore, da ritornare in caso di 
     * mancata conversione della stringa primaria.
     *@param strColor Stringa contenete la descrizione di un colore in RGB (es: 255000000 == ROSSO),
     *@param ColorException Colore di "Eccezzione" se fallita la conversione della stringa primaria strColor.
     *@return Oggetto Color dalle caratteristiche richieste tramite parametro tipo String.
     **/
    private java.awt.Color ColorExtract(String strColor,java.awt.Color ColorException)
    {
        try
        { 
            int R = (Integer.valueOf(strColor.substring(0,3))).intValue();
            int G = (Integer.valueOf(strColor.substring(3,6))).intValue();
            int B = (Integer.valueOf(strColor.substring(6))).intValue();
              
            return (new java.awt.Color(R,G,B));
        }
        catch(Exception e)
        {
            return (ColorException);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jP_north;
    private javax.swing.JLabel jL_SW;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jB_stop;
    private javax.swing.JButton jB_active;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jl_Time;
    private javax.swing.JLabel jl_time_refresh;
    private javax.swing.JScrollPane jScroll_center;
    private javax.swing.JPanel jP_center;
    private javax.swing.JScrollPane jScrollrows;
    private javax.swing.JPanel jP_row;
    private javax.swing.JPanel jP_south;
    private javax.swing.JScrollPane jScroll_south;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JPanel jP_button;
    private javax.swing.JButton jB_resetFields;
    private javax.swing.JButton jB_resetAll;
    private javax.swing.JButton jB_all;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTF_number;
    private javax.swing.JButton jB_close;
    private javax.swing.JButton jB_analize;
    private javax.swing.JButton jb_reverse;
    // End of variables declaration//GEN-END:variables
    private java.awt.Cursor cursor_hand         = new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR);
    private java.awt.Cursor cursor_wait         = new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR);
    private java.awt.Cursor cursor_default      = new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR);
    private java.awt.Color ColorDefault         = new java.awt.Color(230,230,230);
    private java.util.Vector V_ProcessROW       = null;
    
    private java.awt.event.KeyListener event_KEY;
    private SSM_JF_textArea JF_TArea = null;
    /**
     *Contiene aggiornato Indice identificativo univoco del Processo in esame sull'interfaccia (ProcessRow). 
     */
    private int ID_PROCESS_SELECTED  = -1;
    
    private int[] IDProcessSelected = null;
    private String SWITCHSELECTED   = null;
    
    private Thread th               = null;
    private boolean Thread_RUN      = false;
    private boolean Thread_wakeup   = false;
    private long TIME_SLEEP         = 5;
    private String str_LAST_Data    = "";
    //private SSM_JP_ProcessRow PRow   = null;
    private Color c1=new Color(230,230,230);
    private Color c2=Color.black;
    private boolean flagReverse     = false;
}
