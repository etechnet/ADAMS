/*
 * SSM_JF_ConfigLog.java
 *
 * Created on 18 maggio 2005, 12.37
 */

/**
 *
 * @author  root
 *rilascio IDM
 */

import java.awt.Toolkit;
import java.awt.Dimension;
import java.util.*;
import java.awt.Color;
import javax.swing.*;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;

public class SSM_JF_ConfigLog extends javax.swing.JFrame implements Runnable {

    /** Creates new form SSM_JF_ConfigLog */
    private DATA_CENTRALI[] Local_ALLcentrali   = null;
    private CS_INFO_PROC[] Local_AllInfoProc    = null;
    private CS_BLOCK_LOG[] Local_AllBlock       = null;
    private String SWITCH_SELECTED              = "";
    private Thread th                           = null;
    private int flagButton                      = 0;
    private SSM_JListIcon listProcess            = null;
    private SSM_IconPool IcPool                  = null;
    private java.awt.Cursor cursor_hand         = new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR);
    private java.awt.Cursor cursor_wait         = new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR);
    private java.awt.Cursor cursor_default      = new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR);
    public int opt1                             = 0;
    private int lenPName                        = 40;

	private java.awt.event.KeyAdapter evento=new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listProcessKeyReleased(evt);
            }
        };
    	private java.awt.event.MouseAdapter evento1=new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listProcessMousePressed(evt);
            }
        };
    
    public SSM_JF_ConfigLog(DATA_CENTRALI[] ALLcentrali) 
    {
        Local_ALLcentrali=ALLcentrali;
        initComponents();
        IcPool = new SSM_IconPool("/images/");
        listProcess = new SSM_JListIcon(IcPool);
        
        listProcess.set_Font(SSM_GlobalParam.font_V11);
        jL_title.setFont(SSM_GlobalParam.font_B12);
        jCB_switch.setFont(SSM_GlobalParam.font_B12);
        jt_name.setFont(SSM_GlobalParam.font_B12);
        jl_id.setFont(SSM_GlobalParam.font_B12);
        
        jt_name.setDocument(new SSM_JTextFieldFilter(SSM_JTextFieldFilter.ALLCHAR,lenPName));

        jCB_switch.setCursor(cursor_hand);
        listProcess.setCursor(cursor_hand);
        jB_close.setCursor(cursor_hand);
        jButton1.setCursor(cursor_hand);
        jButton5.setCursor(cursor_hand);
        jButton6.setCursor(cursor_hand);
        jButton7.setCursor(cursor_hand);
        jt_name.setCursor(cursor_hand);
        
        
        listProcess.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        listProcess.addKeyListener(evento);
        listProcess.addMouseListener(evento1);
        
       
        jScroll_process.setViewportView(listProcess);
        
        /*for(int i=0; i<ALLcentrali.length; i++)        
        {
            //if((i!=8)&&(i!=7))
            //    continue;
            jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
        } */
        
        for(int i=0; i<ALLcentrali.length; i++)        
        {
	        jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
//            if ((SSM_GlobalParam.rmp3i).equals("YES")) {
//               if (!((new String(ALLcentrali[i].Descrizione).trim()).equals("RMP3I")))	// scarta tutto tranne RMP3I
//            			continue;
//
//               jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
//            }else
//            {
//                if (((new String(ALLcentrali[i].Descrizione).trim()).equals("RMP3I")))	// scarta RMP3I
//            			continue;
//                jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
//            }
            
        }
        
        getContentPane().setBackground(new java.awt.Color(230, 230, 230));
        setCenteredFrame(355,490);
        //show();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jL_title = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCB_switch = new javax.swing.JComboBox();
        jScroll_process = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jB_close = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jl_id = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jt_name = new javax.swing.JTextField();
        
        getContentPane().setLayout(null);
        
        setTitle("Config Log Message");
        setBackground(new java.awt.Color(230, 230, 230));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        jL_title.setBackground(new java.awt.Color(230, 230, 230));
        jL_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/configuration.png")));
        jL_title.setText("Config Log Message");
        jL_title.setPreferredSize(new java.awt.Dimension(300, 32));
        getContentPane().add(jL_title);
        jL_title.setBounds(10, 10, 330, 32);
        
        jPanel1.setLayout(null);
        
        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Select Switch"));
        jCB_switch.setBackground(new java.awt.Color(230, 230, 230));
        jCB_switch.setFont(new java.awt.Font("Dialog", 0, 11));
        jCB_switch.setMaximumSize(new java.awt.Dimension(32767, 20));
        jCB_switch.setMinimumSize(new java.awt.Dimension(100, 20));
        jCB_switch.setPreferredSize(new java.awt.Dimension(100, 20));
        jCB_switch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_switchActionPerformed(evt);
            }
        });
        
        jPanel1.add(jCB_switch);
        jCB_switch.setBounds(100, 20, 100, 20);
        
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 60, 330, 60);
        
        jScroll_process.setBackground(new java.awt.Color(230, 230, 230));
        jScroll_process.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "List of block Message - Process"));
        jScroll_process.setFont(new java.awt.Font("Courier", 0, 12));
        jScroll_process.setMinimumSize(new java.awt.Dimension(300, 200));
        jScroll_process.setPreferredSize(new java.awt.Dimension(300, 220));
        getContentPane().add(jScroll_process);
        jScroll_process.setBounds(10, 130, 330, 220);
        
        jButton1.setBackground(new java.awt.Color(230, 230, 230));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_modify.jpg")));
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_modify_press.jpg")));
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_modify_over.jpg")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        getContentPane().add(jButton1);
        jButton1.setBounds(110, 400, 60, 20);
        
        jB_close.setForeground(java.awt.Color.red);
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg")));
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_press.jpg")));
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_over.jpg")));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        getContentPane().add(jB_close);
        jB_close.setBounds(280, 400, 60, 22);
        
        jButton5.setBackground(new java.awt.Color(230, 230, 230));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_delete.jpg")));
        jButton5.setBorder(null);
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_delete_press.jpg")));
        jButton5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_delete_over.jpg")));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        
        getContentPane().add(jButton5);
        jButton5.setBounds(180, 400, 50, 20);
        
        jButton6.setBackground(new java.awt.Color(230, 230, 230));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_new.jpg")));
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setFocusPainted(false);
        jButton6.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_new_press.jpg")));
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_new_over.jpg")));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        
        getContentPane().add(jButton6);
        jButton6.setBounds(60, 400, 50, 20);
        
        jButton7.setBackground(new java.awt.Color(230, 230, 230));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_view.jpg")));
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_view_press.jpg")));
        jButton7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_view_over.jpg")));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        
        getContentPane().add(jButton7);
        jButton7.setBounds(10, 400, 50, 20);
        
        jPanel2.setLayout(null);
        
        jPanel2.setBackground(new java.awt.Color(230, 230, 230));
        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jLabel2.setText("Block");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(40, 10, 34, 15);
        
        jl_id.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_id.setText("33");
        jl_id.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.add(jl_id);
        jl_id.setBounds(80, 10, 30, 19);
        
        jLabel4.setText("Name");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(140, 10, 35, 15);
        
        jt_name.setText("jTextField1");
        jt_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jt_nameKeyPressed(evt);
            }
        });
        
        jPanel2.add(jt_name);
        jt_name.setBounds(200, 10, 90, 19);
        
        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 350, 330, 40);
        
        pack();
    }//GEN-END:initComponents

    private void jt_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jt_nameKeyPressed
        // Add your handling code here:
        jl_id.setText("?");
    }//GEN-LAST:event_jt_nameKeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Add your handling code here:
        flagButton=3;
        if(listProcess.getSelectedIndex()==-1)
        {
            warningProblem("Block not selected","Error Message");
            return;
        }
        start();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Add your handling code here: NEW_evt
        if(jt_name.getText().equals(""))
        {
            warningProblem("Insert block name","Error Message");
            return;
        }
        for(int i=0;i<Local_AllBlock.length;i++)
        {
            if(jt_name.getText().equals(new String(Local_AllBlock[i].nome).trim()))
            {
                warningProblem("Block name present","Error Message");
                return;
            }
        }
        flagButton=2;
        start();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Add your handling code here:
        JOptionPane jOptionPane1 = new JOptionPane(); 
        if(listProcess.getSelectedIndex()==-1)
        {
            warningProblem("Block not selected","Error Message");
            return;
        }
        int YES_NO = jOptionPane1.showConfirmDialog(this,"delete ["+new String(Local_AllBlock[listProcess.getSelectedIndex()].nome).trim()+"] ?","Question Messagge",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(YES_NO == 1) //YES_NO=0=>YES --------  YES_NO=1=>NO
        {
            return;
        }
        System.out.println("SWITCH_SELECTED="+SWITCH_SELECTED);
        System.out.println("getSelectedIndex="+jCB_switch.getSelectedIndex());
        int idCEN=0;
        for(int i=0;i<Local_ALLcentrali.length;i++)
        {
            String strCEN=new String(Local_ALLcentrali[i].Descrizione).trim();
            if(strCEN.equals(SWITCH_SELECTED))
            {
                idCEN=Local_ALLcentrali[i].IdCentrale;
                break;
            }
            
        }
        System.out.println("centrale da canc="+idCEN);
        
        int errorDel=SSM_GlobalParam.CORBAConn.deleteBlockLog(0,SWITCH_SELECTED,Local_AllBlock[listProcess.getSelectedIndex()].block,idCEN); //
        
        //System.out.println("errorDel="+errorDel);
        
        if(errorDel==1)
        { 
            jOptionPane1.showMessageDialog(this,"Block ["+new String(Local_AllBlock[listProcess.getSelectedIndex()].nome).trim()+"] deleted.","Information Messagge",JOptionPane.INFORMATION_MESSAGE);
            setProcessforSwitch((String)jCB_switch.getSelectedItem());
        }else
        {
            warningProblem("Block not deleted errore="+errorDel,"Error Message");
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCB_switchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_switchActionPerformed
        // Add your handling code here:
        flagButton=0;
        setProcessforSwitch((String)jCB_switch.getSelectedItem());
    }//GEN-LAST:event_jCB_switchActionPerformed

    public void refreshDopoLog()
    {
        flagButton=0;
        setProcessforSwitch((String)jCB_switch.getSelectedItem());
    }
    
    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
        // Add your handling code here:
         closeFrame();
    }//GEN-LAST:event_jB_closeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        if(listProcess.getSelectedIndex()==-1)
        {
            warningProblem("Block not selected","Error Message");
            return;
        }
        flagButton=1;
        start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void start()
    {    
        th = null;        
        th = new Thread(this,"refresh_LogProcess");
        th.start();       
    }
    
    private void setProcessforSwitch(String SW)
    {
        if(listProcess != null)
        {
            SWITCH_SELECTED = SW;
            
            listProcess.removeAll();

            jScroll_process.getVerticalScrollBar().setValue(0);
            jScroll_process.getHorizontalScrollBar().setValue(0);
            jl_id.setText("");
            jt_name.setText("");
            
            start();
        }
    }
    
    public void run()
    {
        //listProcess.removeAll();
        
        int numBlockFree=-1;
        int numBlockFreeMin=-1;
        JOptionPane jOptionPane1 = new JOptionPane(); 
        Color c;
        
        this.setCursor(cursor_wait);
        setEnabled_GUI(false,cursor_wait);
        Local_AllBlock = SSM_GlobalParam.CORBAConn.refreshConfigBloc(-1,SWITCH_SELECTED);
        
        System.out.println("flagButton: "+flagButton);
        
        if(flagButton==0)//refresh lista blocchi
        {
            
            //Local_AllInfoProc = SSM_GlobalParam.CORBAConn.refreshConfigProcess(0,SWITCH_SELECTED);
            //Local_AllBlock = SSM_GlobalParam.CORBAConn.refreshConfigBloc(-1,SWITCH_SELECTED);
        
        
            if(Local_AllBlock !=null)
            {
                for(int i=0;i<Local_AllBlock.length;i++)
                {
                    String NomeProcesso = new String(Local_AllBlock[i].nome).trim();
                    //System.out.println("Nome Processo: "+new String(Local_AllBlock[i].nome).trim());
                    int len=NomeProcesso.length();
                    for(int j=len;j<8;j++)
                    {
                        NomeProcesso=NomeProcesso+" ";
                    }
                
                    int idBlocco = Local_AllBlock[i].block;
                
                    listProcess.addElement("run_proc.png","run_proc.png",""+idBlocco+" - "+NomeProcesso);
                
                }
            }
            else
                System.out.println("******* Local_AllBlock[] is null ******** ");
        }
        else if (flagButton==1) //modify
        {
            //Local_AllBlock = SSM_GlobalParam.CORBAConn.refreshConfigBloc(-1,SWITCH_SELECTED);

            if(Local_AllBlock==null)
            {
                warningProblem("Block message not defined","Error Message");
                setEnabled_GUI(true,cursor_hand);
                this.setCursor(cursor_default);
                return;
            }

            String nomeBlocco = new String(Local_AllBlock[listProcess.getSelectedIndex()].nome).trim();
            int index=Local_AllBlock[listProcess.getSelectedIndex()].block;

            CS_BLOCK_LOG[] AllBlock = SSM_GlobalParam.CORBAConn.refreshConfigBloc(index,SWITCH_SELECTED);

                    for(int i=0;i<AllBlock.length;i++)
                    {
                        
                        if(true)
                        {
                            System.out.println("AllBlock["+i+"].nome=" + new String(AllBlock[i].nome).trim() +"    MSG= "+new String(AllBlock[i].msg).trim());
                        }
                    }
            
            numBlockFree=SSM_GlobalParam.CORBAConn.writeModifyLog(-1,SWITCH_SELECTED, AllBlock);

            if(AllBlock!=null)
            {
                SSM_JF_LoggerOutput Log_output = new SSM_JF_LoggerOutput(AllBlock,SWITCH_SELECTED,Local_ALLcentrali,0,true);
                Log_output.setParente(this);
                //Log_output.show();
                Log_output.setVisible(true);
            }
        }
        else if (flagButton==2) //new
        {
             int index=-1;
             CS_BLOCK_LOG[] msgAppo=new CS_BLOCK_LOG[1];
             msgAppo[0]=new CS_BLOCK_LOG();       
             msgAppo[0].msg=SSM_GlobalParam.set_String_toChar("TO BE DEFINED",132);
             msgAppo[0].nome=SSM_GlobalParam.set_String_toChar(jt_name.getText(),lenPName);
                    
             
             numBlockFreeMin=SSM_GlobalParam.CORBAConn.writeModifyLog(-2,SWITCH_SELECTED, msgAppo);
             
             numBlockFree=SSM_GlobalParam.CORBAConn.writeModifyLog(-1,SWITCH_SELECTED, msgAppo);
             
             if(numBlockFree==-1)
             {
                warningProblem("Error new block.Space is full.","Error Message");
                setEnabled_GUI(true,cursor_hand);
                this.setCursor(cursor_default);
                return;
             }
             
             
             SSM_JD_SelectBlock selectBlock=new SSM_JD_SelectBlock(this,true);
             selectBlock.setParente(this);
             selectBlock.setLabel("Select block for "+jt_name.getText());
             
             if(numBlockFreeMin==-1)
             {
                 selectBlock.setOptions(""+numBlockFree+" - "+SWITCH_SELECTED,"Not available");
                 selectBlock.disableOpt2();
             }else
             {
                 selectBlock.setOptions(""+numBlockFree+" - "+SWITCH_SELECTED,""+numBlockFreeMin+" - All Switch");
             }
             
             //selectBlock.show();
             selectBlock.setVisible(true);
             
             if(opt1==-1)
             {
                 setEnabled_GUI(true,cursor_hand);
                 this.setCursor(cursor_default);
                 return;
             }else
             {
                    if(opt1==2)
                    {
                        numBlockFree=numBlockFreeMin;
                    }
             }

            

            msgAppo[0].block=numBlockFree;
            SSM_JF_LoggerOutput Log_output = new SSM_JF_LoggerOutput(msgAppo,SWITCH_SELECTED,Local_ALLcentrali,-1,true);
            Log_output.setParente(this);
            if(opt1==2)
            {
                Log_output.resetCentrali();
            }
            //Log_output.show();
            Log_output.setVisible(true);
        }else if (flagButton==3) //modify
        {
            

            if(Local_AllBlock==null)
            {
                warningProblem("Block message not defined","Error Message");
                setEnabled_GUI(true,cursor_hand);
                this.setCursor(cursor_default);
                return;
            }

            /*int len=Local_AllBlock.length;
            System.out.println("LEN: "+len);
            System.out.println("listProcess.getSelectedIndex(): "+listProcess.getSelectedIndex());
            for(int i=0;i<len;i++)
            {
                String nomeBlocco = new String(Local_AllBlock[i].nome).trim();
                System.out.println("nomeBlocco: "+nomeBlocco);
            }*/
            
            String nomeBlocco = new String(Local_AllBlock[listProcess.getSelectedIndex()].nome).trim();
            int index=Local_AllBlock[listProcess.getSelectedIndex()].block;

            CS_BLOCK_LOG[] AllBlock = SSM_GlobalParam.CORBAConn.refreshConfigBloc(index,SWITCH_SELECTED);

            if(AllBlock!=null)
            {
                SSM_JF_LoggerOutput Log_output = new SSM_JF_LoggerOutput(AllBlock,SWITCH_SELECTED,Local_ALLcentrali,0,false);
                Log_output.setParente(this);
                //Log_output.show();
                Log_output.setVisible(true);
            }
        }
        
	listProcess.removeKeyListener(evento);
	listProcess.removeMouseListener(evento1);
        listProcess.updateUI();
	listProcess.addKeyListener(evento);
        listProcess.addMouseListener(evento1);
        setEnabled_GUI(true,cursor_hand);
        this.setCursor(cursor_default);
    }
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closeFrame();
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    private void closeFrame()
    {
        this.dispose();
    }
    
    private void setEnabled_GUI(boolean flag,java.awt.Cursor curAppo)
    {        
        jCB_switch.setCursor(curAppo);
        jB_close.setCursor(curAppo);
        listProcess.setCursor(curAppo);
        jButton1.setCursor(curAppo);
        jButton5.setCursor(curAppo);
        jButton6.setCursor(curAppo);
        jButton7.setCursor(curAppo);
        jt_name.setCursor(curAppo);
       
        jCB_switch.setEnabled(flag);
        jB_close.setEnabled(flag);
        jButton1.setEnabled(flag);   
        jButton5.setEnabled(flag);   
        jButton6.setEnabled(flag);   
        jButton7.setEnabled(flag);  
        jt_name.setEnabled(flag);  
    }
    
    private void warningProblem(String str1,String str2)
    {
            JOptionPane warning = new JOptionPane();
            warning.showMessageDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE);

            //warning.showConfirmDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE,JOptionPane.QUESTION_MESSAGE);
    }
    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;

        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
    }
    
    private void listProcessKeyReleased(java.awt.event.KeyEvent evt) {
        // Add your handling code here:
        setFillProcessMask(listProcess.getSelectedIndex());
    }

    private void listProcessMousePressed(java.awt.event.MouseEvent evt) {
        // Add your handling code here:
        setFillProcessMask(listProcess.getSelectedIndex());
    }
    
    private void setFillProcessMask(int id)
    {
        if(id==-1)
        {
            warningProblem("No selected switch","Error Message");
            return;
        }
        
        jt_name.setText(new String(Local_AllBlock[listProcess.getSelectedIndex()].nome).trim());
        jl_id.setText(""+Local_AllBlock[listProcess.getSelectedIndex()].block);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jL_title;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox jCB_switch;
    private javax.swing.JScrollPane jScroll_process;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jB_close;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jl_id;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jt_name;
    // End of variables declaration//GEN-END:variables

}
