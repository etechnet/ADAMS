/*
 * P_JF_ConfigSetup.java
 *
 * Created on 3 maggio 2005, 10.08
 */

/**
 *
 * @author  root
 */
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.Color;
import java.util.*;
import javax.swing.*;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;

public class SSM_JF_ManageOrbix extends javax.swing.JFrame implements Runnable {

    /** Creates new form P_JF_ConfigSetup */
    public boolean sistemstart              = false;
    public String strCentrale               = "";
    public int PID_SELECTED              = -1;
    private String  oldSwitch[]   = {"MIP1I","MIP2I","MIM1I","MIM2I","MIM3I","MIR1I","RMA1I","RMAUI","RMA1I","RMN1I","RMP3I"};
    private ProcesDetail[] processDetails       = null;
    
    public SSM_JF_ManageOrbix(DATA_CENTRALI[] ALLcentrali) 
    {
        Local_ALLcentrali=ALLcentrali;
        
        
        initComponents();
        
        
        IcPool = new SSM_IconPool("/images/");
        listProcess = new SSM_JListIcon(IcPool);
        listProcess.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        //.MULTIPLE_INTERVAL_SELECTION);
        jScroll_process.setViewportView(listProcess);
        
        listProcess.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listProcessKeyReleased(evt);
            }
        });
        
        listProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listProcessMousePressed(evt);
            }
        });
        
        /*for(int i=0; i<ALLcentrali.length; i++)        
        {
            //if((i!=8)&&(i!=7))
            //    continue;
            jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
        } */
        
        for(int i=0; i<ALLcentrali.length; i++)        
        {
//            if ((SSM_GlobalParam.rmp3i).equals("YES")) {
//               if (!((new String(ALLcentrali[i].Descrizione).trim()).equals("RMP3I")))	// scarta tutto tranne RMP3I
//            			continue;
//
//               jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
//            }else
//            {
//                if (((new String(ALLcentrali[i].Descrizione).trim()).equals("RMP3I")))	// scarta RMP3I
//            			continue;
//                jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
//            }

            jCB_switch.addItem(new String(ALLcentrali[i].Descrizione).trim());
            
        }
        
        
        //Font Globali
        listProcess.set_Font(SSM_GlobalParam.font_V11);
        jL_title.setFont(SSM_GlobalParam.font_B12);
        
      
        jCB_switch.setFont(SSM_GlobalParam.font_B12);
        //jB_searchProc.setFont(SSM_GlobalParam.font_B12);
        
        //Cursors
        jB_close.setCursor(cursor_hand);
        jCB_switch.setCursor(cursor_hand);
        listProcess.setCursor(cursor_hand);
        //jB_searchProc.setCursor(cursor_hand);
        
        jButton2.setCursor(cursor_hand);
        jButton3.setCursor(cursor_hand);

        
        
        getContentPane().setBackground(new java.awt.Color(230, 230, 230));
        setCenteredFrame(550,750);
        //show();    
        this.setVisible(true);
        strCentrale=SWITCH_SELECTED;
    }
    
    public void enableRestartAll(boolean flag)
    {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jL_title = new javax.swing.JLabel();
        jScroll_process = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        local_jTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jCB_switch = new javax.swing.JComboBox();
        jB_close = new javax.swing.JButton();
        jP_process = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        
        
        getContentPane().setLayout(null);
        
        setTitle("Monitorig Setup");
        setBackground(new java.awt.Color(230, 230, 230));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        jL_title.setBackground(new java.awt.Color(230, 230, 230));
        jL_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/configuration.png")));
        jL_title.setText("Process Orbix Setup");
        jL_title.setPreferredSize(new java.awt.Dimension(300, 32));
        getContentPane().add(jL_title);
        jL_title.setBounds(130, 10, 300, 32);
        
        jScroll_process.setBackground(new java.awt.Color(230, 230, 230));
        jScroll_process.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "List of Process"));
        jScroll_process.setFont(new java.awt.Font("Courier", 0, 12));
        jScroll_process.setMinimumSize(new java.awt.Dimension(300, 200));
        jScroll_process.setPreferredSize(new java.awt.Dimension(300, 220));
        getContentPane().add(jScroll_process);
        jScroll_process.setBounds(10, 180, 520, 190);
        
        jPanel1.setLayout(new java.awt.BorderLayout());
        
        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Selected Process"));
        local_jTextArea.setEditable(false);
        jScrollPane1.setViewportView(local_jTextArea);
        
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        
        jPanel3.setBackground(new java.awt.Color(230, 230, 230));
        jButton3.setBackground(new java.awt.Color(230, 230, 230));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killselected.gif")));
        jButton3.setToolTipText("Stop all process");
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killselected_press.gif")));
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killselected_over.gif")));
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jPanel3.add(jButton3);
        
        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);
        
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 380, 520, 270);
        
        jPanel2.setLayout(null);
        
        jPanel2.setBackground(new java.awt.Color(230, 230, 230));
        jPanel2.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Select Switch"));
        jCB_switch.setBackground(new java.awt.Color(230, 230, 230));
        jCB_switch.setFont(new java.awt.Font("Dialog", 0, 11));
        jCB_switch.setMaximumSize(new java.awt.Dimension(32767, 20));
        jCB_switch.setMinimumSize(new java.awt.Dimension(100, 20));
        jCB_switch.setPreferredSize(new java.awt.Dimension(100, 20));
        jCB_switch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_switchActionPerformed(evt);
            }
        });
        
        jPanel2.add(jCB_switch);
        jCB_switch.setBounds(180, 20, 150, 20);
        
        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 110, 520, 60);
        
        jB_close.setForeground(java.awt.Color.red);
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg")));
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_press.jpg")));
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_over.jpg")));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        getContentPane().add(jB_close);
        jB_close.setBounds(460, 660, 60, 22);
        
        jP_process.setLayout(null);
        
        jP_process.setBackground(new java.awt.Color(230, 230, 230));
        jP_process.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "All Process"));
        jButton2.setBackground(new java.awt.Color(230, 230, 230));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killall.gif")));
        jButton2.setToolTipText("Stop all process");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killall_press.gif")));
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/killall_over.gif")));
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        
        jP_process.add(jButton2);
        jButton2.setBounds(190, 20, 130, 20);
        
        getContentPane().add(jP_process);
        jP_process.setBounds(10, 50, 520, 50);
        
        pack();
    }//GEN-END:initComponents

    private void jCB_switchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_switchActionPerformed
        
        flagButton=0;

        if( !((String)jCB_switch.getSelectedItem()).equals(strCentrale) )
        {
            enableRestartAll(false);
            strCentrale=(String)jCB_switch.getSelectedItem();
        }
        setProcessforSwitch((String)jCB_switch.getSelectedItem());
    }//GEN-LAST:event_jCB_switchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        if(evt.getSource()==jButton2)
        {
            JOptionPane jOptionPane1 = new JOptionPane(); 
            int YES_NO = jOptionPane1.showConfirmDialog(this,"Confirm all process STOP ?","Question Messagge",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(YES_NO == 0) //YES_NO=0=>YES --------  YES_NO=1=>NO
            {
                for(int i=0; i<processDetails.length; i++)
                { 

                    String NomeProcesso=new String(processDetails[i].nomeProcesso).trim();
                    
                    int pid_sel=-1;
                    try
                    {
                        String str=new String(processDetails[i].msgProcesso).trim();
                        //System.out.println("str "+str);
                        StringTokenizer token;
                        token=new StringTokenizer(str," ");
                        while (token.hasMoreTokens())
                        {
                            String appo=token.nextToken();
                            //System.out.println("token "+appo);
                            if(appo.equals("PID:"))
                            {
                                String apposStr=token.nextToken();
                                pid_sel=(new Integer(apposStr)).intValue();
                                break;
                            }
                        }
                    }catch(Exception e )
                    {
                        pid_sel=-1;
                    }
                    
                    //System.out.println("PID "+pid_sel);
                    if(pid_sel!=-1)
                    {
                        System.out.println("KILL PID       ==> "+new String(processDetails[i].nomeProcesso).trim()+" PID:"+pid_sel);
                        SSM_GlobalParam.CORBAConn.KillOrbixProces(SWITCH_SELECTED,1,PID_SELECTED);
                    }
                    jOptionPane1.showMessageDialog(this,"All Process stopped.","Information Messagge",JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else
            {
                return;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        int id=listProcess.getSelectedIndex();
        SSM_GlobalParam.CORBAConn.KillOrbixProces(SWITCH_SELECTED,1,PID_SELECTED);
        local_jTextArea.setText("");
        flagButton=0;
        listProcess.removeAll();
        jButton3.setEnabled(false);
        start();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void listProcessKeyReleased(java.awt.event.KeyEvent evt) {
        // Add your handling code here:
        setFillProcessMask(listProcess.getSelectedIndex());
    }

    private void listProcessMousePressed(java.awt.event.MouseEvent evt) {
        // Add your handling code here:
        setFillProcessMask(listProcess.getSelectedIndex());
    }
    
    private void setFillProcessMask(int id)
    {
        //System.out.println("ID: "+id);
        if(id==-1)
        {
            warningProblem("No selected switch","Error Message");
            return;
        }
        local_jTextArea.setText("");
        flagButton=1;
        start();
    }
    
    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;

        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
    }
    
    private void start()
    {    
        th = null;        
        th = new Thread(this,"refresh_ConfigProcess");
        th.start();       
    }
    
    public void run()
    {
        int numBlockFree=-1;
        JOptionPane jOptionPane1 = new JOptionPane(); 
        Color c;
        
        this.setCursor(cursor_wait);
        setEnabled_GUI(false,cursor_wait);
        if(flagButton==0)
        {
        
            processDetails = SSM_GlobalParam.CORBAConn.refresh_MonitorProcess(SWITCH_SELECTED,2);

            if(processDetails !=null)
            {

                for(int i=0; i<processDetails.length; i++)
                { 

                    String NomeProcesso=new String(processDetails[i].nomeProcesso).trim();

                    int id=NomeProcesso.indexOf(SWITCH_SELECTED);

                    //System.out.println("Nome Processo       ==> "+new String(processDetails[i].nomeProcesso).trim());
                    //System.out.println("ID ["+SWITCH_SELECTED+"]="+id);

                    if(SWITCH_SELECTED.compareTo("RDA")==0)
                    {
                        //System.out.println("CASO RDA");
                        int id_rda=-1;
                        boolean flag=false;
                        for(int j=0;j<oldSwitch.length;j++)
                        {
                            String appoSW=oldSwitch[j];
                            id_rda=NomeProcesso.indexOf(appoSW);
                            //System.out.println("id_rda ["+appoSW+"]="+id_rda);
                            if(id_rda!=-1)
                            {
                                flag=true;
                                break;
                            }
                        }

                        if(flag==true)
                        {
                            continue;
                        }

                    }else if(id==-1) 
                    {
                        continue;
                    }

                    if(processDetails[i].param.length > 2)
                    {
                        if(processDetails[i].param[2] == 0)
                        {
                            listProcess.addElement("run_proc.png","run_proc.png",""+NomeProcesso,Color.black);
                        }
                        else
                        {
                            listProcess.addElement("stop_proc.png","stop_proc.png",""+NomeProcesso,Color.black);
                        }
                    }
                    else
                    {
                            listProcess.addElement("stop_proc.png","stop_proc.png",""+NomeProcesso,Color.black);
                            System.out.println("er... NOT Found III PARAM");
                    }
                }
            }
            else
                System.out.println("******* Local_AllInfoProc[] is null ******** ");
        }
        else if(flagButton==1)
        {
            local_jTextArea.setText("");
            int id=listProcess.getSelectedIndex();
            System.out.println("(RUN_jB_process) getDeteilProcess (flag HELP=>"+SSM_GlobalParam.PS_ORBIX_HELP+" switch =>"+SWITCH_SELECTED+" Processo=>"+new String(processDetails[id].nomeProcesso).trim()+")" );  
            logProcess[] processLOG = SSM_GlobalParam.CORBAConn.getDeteilProcess(SSM_GlobalParam.PS_ORBIX_HELP,SWITCH_SELECTED,new String(processDetails[id].nomeProcesso).trim());
            PID_SELECTED=-1;
            for(int i=0; i<processLOG.length; i++)
            {
                local_jTextArea.append( new String(processLOG[i].descr).trim() +"\n" );
                if( (new String(processLOG[i].descr).trim()).indexOf("PID") >=0 )
                {
                    String str=new String(processLOG[i].descr).trim();
                    PID_SELECTED=(new Integer(str.substring(5))).intValue();
                }
                System.out.println("PID_SELECTED="+PID_SELECTED);
                
                if(PID_SELECTED>0)
                {
                    jButton3.setEnabled(true);
                }else
                {
                    jButton3.setEnabled(false);
                }
            }  
        }
        
        setEnabled_GUI(true,cursor_hand);
        this.setCursor(cursor_default);
    }
    
    private void setEnabled_GUI(boolean flag,java.awt.Cursor curAppo)
    {        
        jCB_switch.setCursor(curAppo);
        jB_close.setCursor(curAppo);
        //jB_searchProc.setCursor(curAppo);
        listProcess.setCursor(curAppo);
        
        jButton3.setCursor(curAppo);
        jButton2.setCursor(curAppo);
        
        jCB_switch.setEnabled(flag);
        jB_close.setEnabled(flag);
        //jB_searchProc.setEnabled(flag);   
        
        jButton2.setEnabled(flag);   
    }
    
    private void setProcessforSwitch(String SW)
    {
        //jScroll_process.setEnabled(false);
        //listProcess.setEnabled(false);
        //listProcess.updateUI();
        if(listProcess != null)
        {
            SWITCH_SELECTED = SW;
            //listProcess.updateUI();
            listProcess.removeAll();
            //processDetails = null;
            
            jScroll_process.getVerticalScrollBar().setValue(0);
            jScroll_process.getHorizontalScrollBar().setValue(0);
            start();
        }
    }
    
    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
        // Add your handling code here:
        closeFrame();
    }//GEN-LAST:event_jB_closeActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closeFrame();
    }//GEN-LAST:event_exitForm
    
    private void closeFrame()
    {
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jL_title;
    private javax.swing.JScrollPane jScroll_process;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea local_jTextArea;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox jCB_switch;
    private javax.swing.JButton jB_close;
    private javax.swing.JPanel jP_process;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
    private DATA_CENTRALI[] Local_ALLcentrali   = null;
    private String SWITCH_SELECTED              = "";
    private Thread th                           = null;
    //private CS_INFO_PROC[] Local_AllInfoProc    = null;
    
    private SSM_JListIcon listProcess            = null;
    private SSM_IconPool IcPool                  = null;
    
    private java.awt.Cursor cursor_hand         = new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR);
    private java.awt.Cursor cursor_wait         = new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR);
    private java.awt.Cursor cursor_default      = new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR);
    
    
    private boolean flagNew                     = false;
    private int flagButton                      = 0;
    
    private void warningProblem(String str1,String str2)
    {
            JOptionPane warning = new JOptionPane();
            warning.showMessageDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE);

            //warning.showConfirmDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE,JOptionPane.QUESTION_MESSAGE);
    }
    
    private void warningProblem2(int id,String str2)
    {
            String str1="Error: NOT DEFINED";
            switch(id)
            {
                case 5: 
                {
                    str1="Error process not present";
                }break;
                
                case 2: 
                {
                    str1="Error process active";
                }break;
                
                case 3: 
                {
                    str1="Error process not present";
                }break;
                
                case 6: 
                {
                    str1="Error process command";
                }break;
                
                case 7: 
                {
                    str1="Error process time";
                }break;
                
                case 8: 
                {
                    str1="Error process type";
                }break;
                
                case 9: 
                {
                    str1="Error process name";
                }break;
                
                case 10: 
                {
                    str1="Error configmonitorserver: memory error";
                }break;
                
                case 11: 
                {
                    str1="Error configmonitorserver: executable not present";
                }break;
            }
            
            JOptionPane warning = new JOptionPane();
            warning.showMessageDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE);

            //warning.showConfirmDialog(this,""+str1,""+str2,JOptionPane.ERROR_MESSAGE,JOptionPane.QUESTION_MESSAGE);
    }
    
}
