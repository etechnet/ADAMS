
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;

/*
#
#                $$$$$$$$                   $$
#                   $$                      $$
#  $$$$$$           $$   $$$$$$    $$$$$$$  $$$$$$$
# $$    $$  $$$$$$  $$  $$    $$  $$        $$    $$
# $$$$$$$$          $$  $$$$$$$$  $$        $$    $$
# $$                $$  $$        $$        $$    $$
#  $$$$$$$          $$   $$$$$$$   $$$$$$$  $$    $$
#
#  MODULE DESCRIPTION:
#  <enter module description here>
#
#  AUTHORS:
#  Luca Beltrame <luca.beltrame@e-tech.net>                                                                                                           
#                                                                                                                                                 
#  LICENSE: See "Licensing/License.txt" under ADAMS top-level source directory                                                                    
#                                                                                                                                                 
#  HISTORY:                                                                                                                                       
#  -[Date]- -[Who]------------- -[What]---------------------------------------
#  00.00.00 Author Name         Creation date
#--
#
*/

public class SSM_JF_Global extends javax.swing.JFrame {

    /**
     * Creates new form SSM_JF_Global
     */
    public SSM_JF_Global() {
        initComponents();
        jTabbedProcess.setCursor(Cur_hand);
        jB_activate.setCursor(Cur_hand);
               
        
        setCenteredFrame(1280,800);
        
        setConfig();
        
        this.setVisible(true);
        this.toFront();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tb_Group = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jP_Tot = new javax.swing.JPanel();
        jP_ControlButtons = new javax.swing.JPanel();
        jTB_Config = new javax.swing.JToggleButton();
        jTB_Viewer = new javax.swing.JToggleButton();
        jTB_Logger = new javax.swing.JToggleButton();
        jP_Center = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jB_activate = new javax.swing.JButton();
        jL_info_activate = new javax.swing.JLabel();
        jTabbedProcess = new javax.swing.JTabbedPane();
        jP_process = new javax.swing.JPanel();
        jP_groups_node = new javax.swing.JPanel();
        jP_node = new javax.swing.JPanel();
        jp_proces_group = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("System Service Manager");
        setBackground(new java.awt.Color(183, 206, 255));

        jLabel1.setBackground(new java.awt.Color(183, 206, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("System Service Manager");
        jLabel1.setMaximumSize(new java.awt.Dimension(60, 60));
        jLabel1.setMinimumSize(new java.awt.Dimension(60, 60));
        jLabel1.setOpaque(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(60, 60));
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jP_Tot.setBackground(new java.awt.Color(183, 206, 255));
        jP_Tot.setLayout(new java.awt.BorderLayout(5, 5));

        jP_ControlButtons.setBackground(new java.awt.Color(145, 181, 255));
        jP_ControlButtons.setMinimumSize(new java.awt.Dimension(140, 10));
        jP_ControlButtons.setPreferredSize(new java.awt.Dimension(140, 10));

        tb_Group.add(jTB_Config);
        jTB_Config.setSelected(true);
        jTB_Config.setText("<html><div align=\"center\">Process<br /> Configuration</div></html>");
        jTB_Config.setToolTipText("");
        jTB_Config.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jTB_Config.setMaximumSize(new java.awt.Dimension(120, 70));
        jTB_Config.setMinimumSize(new java.awt.Dimension(120, 70));
        jTB_Config.setPreferredSize(new java.awt.Dimension(120, 70));
        jTB_Config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_ConfigActionPerformed(evt);
            }
        });
        jP_ControlButtons.add(jTB_Config);

        tb_Group.add(jTB_Viewer);
        jTB_Viewer.setText("<html><div align=\"center\">Process<br /> Viewer</div></html>");
        jTB_Viewer.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jTB_Viewer.setMaximumSize(new java.awt.Dimension(120, 70));
        jTB_Viewer.setMinimumSize(new java.awt.Dimension(120, 70));
        jTB_Viewer.setPreferredSize(new java.awt.Dimension(120, 70));
        jTB_Viewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_ViewerActionPerformed(evt);
            }
        });
        jP_ControlButtons.add(jTB_Viewer);

        tb_Group.add(jTB_Logger);
        jTB_Logger.setText("<html><div align=\"center\">Process<br />Logger</div></html>");
        jTB_Logger.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jTB_Logger.setMaximumSize(new java.awt.Dimension(120, 70));
        jTB_Logger.setMinimumSize(new java.awt.Dimension(120, 70));
        jTB_Logger.setPreferredSize(new java.awt.Dimension(120, 70));
        jTB_Logger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_LoggerActionPerformed(evt);
            }
        });
        jP_ControlButtons.add(jTB_Logger);

        jP_Tot.add(jP_ControlButtons, java.awt.BorderLayout.WEST);

        jP_Center.setBackground(new java.awt.Color(145, 181, 255));
        jP_Center.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(145, 181, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jB_activate.setForeground(new java.awt.Color(0, 153, 0));
        jB_activate.setText("ACTIVATE");
        jB_activate.setFocusPainted(false);
        jB_activate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_activate.setMaximumSize(new java.awt.Dimension(80, 40));
        jB_activate.setMinimumSize(new java.awt.Dimension(80, 40));
        jB_activate.setPreferredSize(new java.awt.Dimension(80, 40));
        jB_activate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_activateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 9, 4, 9);
        jPanel1.add(jB_activate, gridBagConstraints);

        jL_info_activate.setText("Press ACTIVATE to transfer configuration.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jL_info_activate, gridBagConstraints);

        jP_Center.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jTabbedProcess.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedProcess.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedProcessStateChanged(evt);
            }
        });

        jP_process.setLayout(new java.awt.CardLayout());
        jTabbedProcess.addTab("Processes", jP_process);

        jP_groups_node.setLayout(new java.awt.GridBagLayout());

        jP_node.setBackground(new java.awt.Color(183, 206, 255));
        jP_node.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jP_groups_node.add(jP_node, gridBagConstraints);

        jp_proces_group.setBackground(new java.awt.Color(183, 206, 255));
        jp_proces_group.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jP_groups_node.add(jp_proces_group, gridBagConstraints);

        jTabbedProcess.addTab("Groups and Nodes", jP_groups_node);

        jP_Center.add(jTabbedProcess, java.awt.BorderLayout.CENTER);

        jP_Tot.add(jP_Center, java.awt.BorderLayout.CENTER);

        getContentPane().add(jP_Tot, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setConfig()
    {
        if(jpProcessConfiguration == null)
            jpProcessConfiguration = new SSM_JP_ProcessConfiguration(this);
        
        jP_process.add(jpProcessConfiguration, java.awt.BorderLayout.CENTER);
        jP_process.updateUI();
        
        if(jpNodeConfiguration == null )
            jpNodeConfiguration = new SSM_JP_NodeConfiguration(this);        
        jP_node.add(jpNodeConfiguration, java.awt.BorderLayout.CENTER);
     
        if(jpProcessGroupConfiguration == null)
             jpProcessGroupConfiguration = new SSM_JP_ProcessGroupConfiguration(jpNodeConfiguration,this);
        jp_proces_group.add(jpProcessGroupConfiguration, java.awt.BorderLayout.CENTER);
        
    }
    
    private void jTB_ConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_ConfigActionPerformed
        setConfig();      
    }//GEN-LAST:event_jTB_ConfigActionPerformed

    private void jTB_ViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_ViewerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTB_ViewerActionPerformed

    private void jTB_LoggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_LoggerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTB_LoggerActionPerformed

    private void jTabbedProcessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedProcessStateChanged
        jTabbedProcess.setForegroundAt(index_jTabbedProcess,java.awt.Color.black);
	jTabbedProcess.setForegroundAt(jTabbedProcess.getSelectedIndex(),java.awt.Color.white);
        
        index_jTabbedProcess = jTabbedProcess.getSelectedIndex();
        System.out.println("index_jTabbedProcess --> "+index_jTabbedProcess);
        if(index_jTabbedProcess  == 0 )
        {             
           
        }
        else if(index_jTabbedProcess == 1)
        {
            jpProcessGroupConfiguration.loadProcessAndReset();
        }
    }//GEN-LAST:event_jTabbedProcessStateChanged
  
    
    private void jB_activateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_activateActionPerformed
        
        this.setCursor(Cur_wait);
        jB_activate.setCursor(Cur_wait);
        
        System.out.println("--- ACTIVATE OK ---");
        
        Statement SQLStatement = SSM_GlobalParam.db_Connection.createLocalStatement();
        
        Vector v_make_id_PORT = new Vector();
        
        String str_select_t_process = "SELECT a.process_id, b.node_id, b.port_range_min,b.port_range_max FROM t_process_group_members a,t_node b where a.process_group_id = b.process_group_id";       
        ResultSet rs  = SSM_GlobalParam.db_Connection.Query_RS(str_select_t_process,SQLStatement);
        Vector v_id_pgm = new Vector();
        Vector v_id_node_pgm = new Vector();
        
        if(rs != null)
        {
            try
            {
                while ( rs.next ( ) ) {
                    
                    int process_id = rs.getInt(1);
                    int node_id = rs.getInt(2);
                    v_id_pgm.addElement(new Integer(process_id));
                    v_id_node_pgm.addElement(new Integer(node_id));
                    
                    System.out.println("add v_id_pgm ---> "+process_id);
                    System.out.println("add v_id_node_pgm ---> "+node_id);
                    
                    ///// 
                    String identification = (""+node_id);
                    int port_range_min = rs.getInt(3);
                    int port_range_max = rs.getInt(4);
                    
                    if(v_make_id_PORT.size() == 0)                    
                    {                        
                        v_make_id_PORT.addElement(new makeID(identification,port_range_min,port_range_max));
                    }
                    else
                    {
                        boolean find = false;
                        for(int i=0; i<v_make_id_PORT.size(); i++ )
                        {
                            makeID makeID_appo = (makeID)v_make_id_PORT.elementAt(i);
                            if(makeID_appo.getIdentification().compareTo(identification) == 0 )
                            {
                                find = true;
                                break;
                            }
                        }
                        if(find == false)
                            v_make_id_PORT.addElement(new makeID(identification,port_range_min,port_range_max));                    
                    }
                    ////// 
                }
            }catch (Exception ex){ 
                ex.printStackTrace();
            }
        }
        
        String str_t_node_process = "SELECT a.process_id, a.node_id, a.assigned_port FROM t_node_process a, t_node b where a.node_id = b.node_id";
        ResultSet rs1  = SSM_GlobalParam.db_Connection.Query_RS(str_t_node_process,SQLStatement);
        Vector v_id_np = new Vector();
        Vector v_id_node_np = new Vector();
        
        if(rs1 != null)
        {
            try
            {
                while ( rs1.next ( ) ) 
                {
                    System.out.println("add v_id_np --> "+new Integer(rs1.getInt(1)));
                    System.out.println("add v_id_node_np --> "+new Integer(rs1.getInt(2)));
                    System.out.println("assigned_port --> "+new Integer(rs1.getInt(3)));
                    
                    int process_id = rs1.getInt(1);
                    int node_id = rs1.getInt(2);
                    int assigned_port = new Integer(rs1.getInt(3));
                    String identification = (""+node_id);
                    
                    v_id_np.addElement(new Integer(process_id));
                    v_id_node_np.addElement(new Integer(node_id));

                    //add assigned port                      
                    for(int i=0; i<v_make_id_PORT.size(); i++ )
                    {
                        makeID makeID_appo = (makeID)v_make_id_PORT.elementAt(i);
                        if(makeID_appo.getIdentification().compareTo(identification) == 0 ){
                            
                            makeID_appo.addIndex(assigned_port);
                            break;
                        }
                    }                    
                    /////////
                }
            }catch (Exception ex){ 
                ex.printStackTrace();
            }
        }
        try
        {
            SQLStatement.close();
        }
        catch(java.sql.SQLException exc) 
        {
            exc.printStackTrace();            
        }
        String point = ",";        
        String str_where_delete = "where";
        String str_where_insert = "where";
        String str_where_update = "in (";
        
        //DELETE
        for(int b=0; b<v_id_np.size(); b++)
        {
            boolean find = false;
            int id_np = ((Integer)v_id_np.elementAt(b)).intValue();
            int id_node_np = ((Integer)v_id_node_np.elementAt(b)).intValue();
                    
            for(int a=0; a<v_id_pgm.size(); a++)
            {
                int id_pgm = ((Integer)v_id_pgm.elementAt(a)).intValue();
                int id_node_pgm = ((Integer)v_id_node_pgm.elementAt(a)).intValue();  
                if((id_pgm == id_np)&&(id_node_np == id_node_pgm))
                {
                    find = true;
                    break;
                }                
            }
            if(!find) 
            {
                str_where_delete += " (process_id='"+id_np+"' and node_id='"+id_node_np+"')OR";
                
                //////
                String str_select_port = "select assigned_port FROM `t_node_process` where process_id='"+id_np+"' and node_id='"+id_node_np+"'";
                int remove_assigned_port = SSM_GlobalParam.db_Connection.Query_int(str_select_port);
                
                System.out.println("str_select_port --> "+str_select_port);
                
                String identification = ""+id_node_np;
                //remove assigned port                      
                for(int i=0; i<v_make_id_PORT.size(); i++ )
                {
                    makeID makeID_appo = (makeID)v_make_id_PORT.elementAt(i);
                    if(makeID_appo.getIdentification().compareTo(identification) == 0 )
                    {
                        makeID_appo.deleteIndex(remove_assigned_port);
                        break;
                    }
                }                    
                /////////
                
            }
        }
        
        int Answer_delete = 0;
        int Answer_Ins = 0;
        int Answer_update = 0;
        
        //INSERT and UPDATE
        for(int a=0; a<v_id_pgm.size(); a++)
        {
            boolean find = false;
            int id_pgm = ((Integer)v_id_pgm.elementAt(a)).intValue();
            int id_node_pgm = ((Integer)v_id_node_pgm.elementAt(a)).intValue();
            String identification = ""+id_node_pgm;
            
            for(int b=0; b<v_id_np.size(); b++)
            {                
                int id_np = ((Integer)v_id_np.elementAt(b)).intValue();
                int id_node_np = ((Integer)v_id_node_np.elementAt(b)).intValue();
                
                if((id_pgm == id_np)&&(id_node_pgm == id_node_np))
                {                    
                    str_where_update += "'"+id_pgm+"'"+point;                    
                    find = true;
                    break;
                }
            }
            if(!find) 
            {
                                
                //add new assigned port                      
                for(int i=0; i<v_make_id_PORT.size(); i++ )
                {
                    makeID makeID_appo = (makeID)v_make_id_PORT.elementAt(i);
                    if(makeID_appo.getIdentification().compareTo(identification) == 0 ){

                        int new_port = makeID_appo.generaIndex();
                        
                        String str_insert = "INSERT INTO t_node_process( process_id, process_name, process_type, schedule_ignore, wake_time, start_cmd, log_output, node_id, assigned_port)"
                        + "SELECT a.process_id, a.process_name, a.process_type, a.schedule_ignore, a.wake_time, a.start_cmd, a.log_output, b.node_id, '"+new_port+"'"
                        + "FROM t_process a, t_node b "
                        + "WHERE (a.process_id='"+id_pgm+"' and b.node_id='"+id_node_pgm+"')";
                
                
                        System.out.println("(t_node_process) str_insert --> "+ str_insert);
                        Answer_Ins = SSM_GlobalParam.db_Connection.Operation(str_insert);
                        break;
                    }
                }                    
                

                //uncomment for UNIQUE INSERT --- no port
                //str_where_insert += " (a.process_id='"+id_pgm+"' and b.node_id='"+id_node_pgm+"')OR";
            }
        }
        
        //Debug makeid for ASSIGNED_PORT
        for(int m=0; m<v_make_id_PORT.size(); m++)
        {
            ((makeID)v_make_id_PORT.elementAt(m)).stampaIndex();
        }
                
        if(str_where_delete.endsWith("OR"))
        {
            str_where_delete = str_where_delete.substring(0,str_where_delete.length()-2);
            
            String str_delete = ("DELETE FROM `t_node_process` "+str_where_delete);
            
            System.out.println("(t_node_process) str_delete --> "+str_delete);
            Answer_delete = SSM_GlobalParam.db_Connection.Operation(str_delete);     
        }
        else
            System.out.println("NO DELETE");
        
        //uncomment for UNIQUE INSERT --- no port
        /*if(str_where_insert.endsWith("OR"))
        {
            str_where_insert = str_where_insert.substring(0,str_where_insert.length()-2);
            
            String str_insert = ("INSERT INTO t_node_process (process_id,process_name,process_type,schedule_ignore,wake_time,start_cmd,log_output,node_id) "
                                    + "SELECT a.process_id, a.process_name,a.process_type,a.schedule_ignore,a.wake_time,a.start_cmd,a.log_output,b.node_id "
                                    + "FROM t_process a, t_node b "
                                    + str_where_insert);
            
            System.out.println("(t_node_process) str_insert --> "+ str_insert);
            Answer_Ins = SSM_GlobalParam.db_Connection.Operation(str_insert);
        }
        else
            System.out.println("NO INSERT");*/
        
        if(str_where_update.endsWith(point))
        {
            str_where_update = str_where_update.substring(0,str_where_update.length()-1)+(")");
            
            
            String str_update = ("UPDATE t_node_process INNER JOIN t_process "
                                + "ON t_node_process.process_id = t_process.process_id and t_process.process_id "+str_where_update+" "
                                + "SET "
                                + "t_node_process.process_name = t_process.process_name,"
                                + "t_node_process.process_type = t_process.process_type,"
                                + "t_node_process.schedule_ignore = t_process.schedule_ignore,"
                                + "t_node_process.wake_time = t_process.wake_time,"
                                + "t_node_process.start_cmd = t_process.start_cmd ,"
                                + "t_node_process.log_output = t_process.log_output");
            
            System.out.println("(t_node_process) str_where_update --> "+str_update);
            Answer_update = SSM_GlobalParam.db_Connection.Operation(str_update);
        }
        else
            System.out.println("NO UPDATE");
        
        System.out.println("Answer_delete: "+Answer_delete);
        System.out.println("Answer_Ins: "+Answer_Ins);
        System.out.println("Answer_update: "+Answer_update);
        
        
        
        jB_activate.setCursor(Cur_default);
        this.setCursor(Cur_default);
    }//GEN-LAST:event_jB_activateActionPerformed

private void setCenteredFrame(int width,int height)
{
    java.awt.Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();        
    int screenWCenter = screenSize.width/2;
    int screenHCenter = screenSize.height/2;
    this.setSize(width,height);
    this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_activate;
    private javax.swing.JLabel jL_info_activate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jP_Center;
    private javax.swing.JPanel jP_ControlButtons;
    private javax.swing.JPanel jP_Tot;
    private javax.swing.JPanel jP_groups_node;
    private javax.swing.JPanel jP_node;
    private javax.swing.JPanel jP_process;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jTB_Config;
    private javax.swing.JToggleButton jTB_Logger;
    private javax.swing.JToggleButton jTB_Viewer;
    private javax.swing.JTabbedPane jTabbedProcess;
    private javax.swing.JPanel jp_proces_group;
    private javax.swing.ButtonGroup tb_Group;
    // End of variables declaration//GEN-END:variables
    private int	index_jTabbedProcess = 0;
    
    SSM_JP_ProcessConfiguration jpProcessConfiguration = null;
    SSM_JP_NodeConfiguration jpNodeConfiguration = null;
    SSM_JP_ProcessGroupConfiguration jpProcessGroupConfiguration = null;
    
    private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
}
