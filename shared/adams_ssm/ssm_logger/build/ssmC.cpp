// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "ssmC.h"
#include <tao/CDR.h>
#include <tao/Exception_Data.h>
#include <tao/Invocation_Adapter.h>
#include <tao/Object_T.h>
#include <ace/OS_NS_string.h>

#if !defined (__ACE_INLINE__)
#include "ssmC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::DATA_CENTRALI::_Descrizione_slice *
net::etech::DATA_CENTRALI::_Descrizione_dup (const net::etech::DATA_CENTRALI::_Descrizione_slice *_tao_src_array)
{
  net::etech::DATA_CENTRALI::_Descrizione_slice *_tao_dup_array =
    net::etech::DATA_CENTRALI::_Descrizione_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::DATA_CENTRALI::_Descrizione_slice *> (0);
    }
  
  net::etech::DATA_CENTRALI::_Descrizione_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::DATA_CENTRALI::_Descrizione_slice *
net::etech::DATA_CENTRALI::_Descrizione_alloc (void)
{
  net::etech::DATA_CENTRALI::_Descrizione_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[30], 0);
  return retval;
}

void
net::etech::DATA_CENTRALI::_Descrizione_free (
    net::etech::DATA_CENTRALI::_Descrizione_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::DATA_CENTRALI::_Descrizione_copy (
    net::etech::DATA_CENTRALI::_Descrizione_slice * _tao_to,
    const net::etech::DATA_CENTRALI::_Descrizione_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 30; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_CENTRALSEQ_CS_)
#define _NET_ETECH_CENTRALSEQ_CS_

net::etech::CentralSeq::CentralSeq (void)
{}

net::etech::CentralSeq::CentralSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        DATA_CENTRALI
      > (max)
{}

net::etech::CentralSeq::CentralSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::DATA_CENTRALI * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        DATA_CENTRALI
      >
    (max, length, buffer, release)
{}

net::etech::CentralSeq::CentralSeq (
    const CentralSeq &seq)
  : ::TAO::unbounded_value_sequence<
        DATA_CENTRALI
      > (seq)
{}

net::etech::CentralSeq::~CentralSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::logProcess::_descr_slice *
net::etech::logProcess::_descr_dup (const net::etech::logProcess::_descr_slice *_tao_src_array)
{
  net::etech::logProcess::_descr_slice *_tao_dup_array =
    net::etech::logProcess::_descr_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::logProcess::_descr_slice *> (0);
    }
  
  net::etech::logProcess::_descr_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::logProcess::_descr_slice *
net::etech::logProcess::_descr_alloc (void)
{
  net::etech::logProcess::_descr_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[250], 0);
  return retval;
}

void
net::etech::logProcess::_descr_free (
    net::etech::logProcess::_descr_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::logProcess::_descr_copy (
    net::etech::logProcess::_descr_slice * _tao_to,
    const net::etech::logProcess::_descr_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 250; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_LOGPROCESSSEQ_CS_)
#define _NET_ETECH_LOGPROCESSSEQ_CS_

net::etech::LogProcessSeq::LogProcessSeq (void)
{}

net::etech::LogProcessSeq::LogProcessSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        logProcess
      > (max)
{}

net::etech::LogProcessSeq::LogProcessSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::logProcess * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        logProcess
      >
    (max, length, buffer, release)
{}

net::etech::LogProcessSeq::LogProcessSeq (
    const LogProcessSeq &seq)
  : ::TAO::unbounded_value_sequence<
        logProcess
      > (seq)
{}

net::etech::LogProcessSeq::~LogProcessSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_PARAMSEQSEQ_CS_)
#define _NET_ETECH_PARAMSEQSEQ_CS_

net::etech::ParamSeqSeq::ParamSeqSeq (void)
{}

net::etech::ParamSeqSeq::ParamSeqSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

net::etech::ParamSeqSeq::ParamSeqSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

net::etech::ParamSeqSeq::ParamSeqSeq (
    const ParamSeqSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

net::etech::ParamSeqSeq::~ParamSeqSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ProcesDetail::_tipoProcesso_slice *
net::etech::ProcesDetail::_tipoProcesso_dup (const net::etech::ProcesDetail::_tipoProcesso_slice *_tao_src_array)
{
  net::etech::ProcesDetail::_tipoProcesso_slice *_tao_dup_array =
    net::etech::ProcesDetail::_tipoProcesso_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ProcesDetail::_tipoProcesso_slice *> (0);
    }
  
  net::etech::ProcesDetail::_tipoProcesso_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ProcesDetail::_tipoProcesso_slice *
net::etech::ProcesDetail::_tipoProcesso_alloc (void)
{
  net::etech::ProcesDetail::_tipoProcesso_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
net::etech::ProcesDetail::_tipoProcesso_free (
    net::etech::ProcesDetail::_tipoProcesso_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ProcesDetail::_tipoProcesso_copy (
    net::etech::ProcesDetail::_tipoProcesso_slice * _tao_to,
    const net::etech::ProcesDetail::_tipoProcesso_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ProcesDetail::_nomeProcesso_slice *
net::etech::ProcesDetail::_nomeProcesso_dup (const net::etech::ProcesDetail::_nomeProcesso_slice *_tao_src_array)
{
  net::etech::ProcesDetail::_nomeProcesso_slice *_tao_dup_array =
    net::etech::ProcesDetail::_nomeProcesso_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ProcesDetail::_nomeProcesso_slice *> (0);
    }
  
  net::etech::ProcesDetail::_nomeProcesso_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ProcesDetail::_nomeProcesso_slice *
net::etech::ProcesDetail::_nomeProcesso_alloc (void)
{
  net::etech::ProcesDetail::_nomeProcesso_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[100], 0);
  return retval;
}

void
net::etech::ProcesDetail::_nomeProcesso_free (
    net::etech::ProcesDetail::_nomeProcesso_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ProcesDetail::_nomeProcesso_copy (
    net::etech::ProcesDetail::_nomeProcesso_slice * _tao_to,
    const net::etech::ProcesDetail::_nomeProcesso_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 100; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ProcesDetail::_colorBKnomeProcesso_slice *
net::etech::ProcesDetail::_colorBKnomeProcesso_dup (const net::etech::ProcesDetail::_colorBKnomeProcesso_slice *_tao_src_array)
{
  net::etech::ProcesDetail::_colorBKnomeProcesso_slice *_tao_dup_array =
    net::etech::ProcesDetail::_colorBKnomeProcesso_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ProcesDetail::_colorBKnomeProcesso_slice *> (0);
    }
  
  net::etech::ProcesDetail::_colorBKnomeProcesso_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ProcesDetail::_colorBKnomeProcesso_slice *
net::etech::ProcesDetail::_colorBKnomeProcesso_alloc (void)
{
  net::etech::ProcesDetail::_colorBKnomeProcesso_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
net::etech::ProcesDetail::_colorBKnomeProcesso_free (
    net::etech::ProcesDetail::_colorBKnomeProcesso_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ProcesDetail::_colorBKnomeProcesso_copy (
    net::etech::ProcesDetail::_colorBKnomeProcesso_slice * _tao_to,
    const net::etech::ProcesDetail::_colorBKnomeProcesso_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ProcesDetail::_msgProcesso_slice *
net::etech::ProcesDetail::_msgProcesso_dup (const net::etech::ProcesDetail::_msgProcesso_slice *_tao_src_array)
{
  net::etech::ProcesDetail::_msgProcesso_slice *_tao_dup_array =
    net::etech::ProcesDetail::_msgProcesso_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ProcesDetail::_msgProcesso_slice *> (0);
    }
  
  net::etech::ProcesDetail::_msgProcesso_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ProcesDetail::_msgProcesso_slice *
net::etech::ProcesDetail::_msgProcesso_alloc (void)
{
  net::etech::ProcesDetail::_msgProcesso_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[150], 0);
  return retval;
}

void
net::etech::ProcesDetail::_msgProcesso_free (
    net::etech::ProcesDetail::_msgProcesso_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ProcesDetail::_msgProcesso_copy (
    net::etech::ProcesDetail::_msgProcesso_slice * _tao_to,
    const net::etech::ProcesDetail::_msgProcesso_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 150; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ProcesDetail::_colorBKmsgProcesso_slice *
net::etech::ProcesDetail::_colorBKmsgProcesso_dup (const net::etech::ProcesDetail::_colorBKmsgProcesso_slice *_tao_src_array)
{
  net::etech::ProcesDetail::_colorBKmsgProcesso_slice *_tao_dup_array =
    net::etech::ProcesDetail::_colorBKmsgProcesso_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ProcesDetail::_colorBKmsgProcesso_slice *> (0);
    }
  
  net::etech::ProcesDetail::_colorBKmsgProcesso_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ProcesDetail::_colorBKmsgProcesso_slice *
net::etech::ProcesDetail::_colorBKmsgProcesso_alloc (void)
{
  net::etech::ProcesDetail::_colorBKmsgProcesso_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
net::etech::ProcesDetail::_colorBKmsgProcesso_free (
    net::etech::ProcesDetail::_colorBKmsgProcesso_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ProcesDetail::_colorBKmsgProcesso_copy (
    net::etech::ProcesDetail::_colorBKmsgProcesso_slice * _tao_to,
    const net::etech::ProcesDetail::_colorBKmsgProcesso_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_PROCESDETAILSEQ_CS_)
#define _NET_ETECH_PROCESDETAILSEQ_CS_

net::etech::ProcesDetailSeq::ProcesDetailSeq (void)
{}

net::etech::ProcesDetailSeq::ProcesDetailSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ProcesDetail
      > (max)
{}

net::etech::ProcesDetailSeq::ProcesDetailSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::ProcesDetail * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ProcesDetail
      >
    (max, length, buffer, release)
{}

net::etech::ProcesDetailSeq::ProcesDetailSeq (
    const ProcesDetailSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ProcesDetail
      > (seq)
{}

net::etech::ProcesDetailSeq::~ProcesDetailSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_INFO_PROC::_legami_slice *
net::etech::CS_INFO_PROC::_legami_dup (const net::etech::CS_INFO_PROC::_legami_slice *_tao_src_array)
{
  net::etech::CS_INFO_PROC::_legami_slice *_tao_dup_array =
    net::etech::CS_INFO_PROC::_legami_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_INFO_PROC::_legami_slice *> (0);
    }
  
  net::etech::CS_INFO_PROC::_legami_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_INFO_PROC::_legami_slice *
net::etech::CS_INFO_PROC::_legami_alloc (void)
{
  net::etech::CS_INFO_PROC::_legami_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], 0);
  return retval;
}

void
net::etech::CS_INFO_PROC::_legami_free (
    net::etech::CS_INFO_PROC::_legami_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_INFO_PROC::_legami_copy (
    net::etech::CS_INFO_PROC::_legami_slice * _tao_to,
    const net::etech::CS_INFO_PROC::_legami_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_INFO_PROC::_nome_proc_slice *
net::etech::CS_INFO_PROC::_nome_proc_dup (const net::etech::CS_INFO_PROC::_nome_proc_slice *_tao_src_array)
{
  net::etech::CS_INFO_PROC::_nome_proc_slice *_tao_dup_array =
    net::etech::CS_INFO_PROC::_nome_proc_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_INFO_PROC::_nome_proc_slice *> (0);
    }
  
  net::etech::CS_INFO_PROC::_nome_proc_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_INFO_PROC::_nome_proc_slice *
net::etech::CS_INFO_PROC::_nome_proc_alloc (void)
{
  net::etech::CS_INFO_PROC::_nome_proc_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[11], 0);
  return retval;
}

void
net::etech::CS_INFO_PROC::_nome_proc_free (
    net::etech::CS_INFO_PROC::_nome_proc_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_INFO_PROC::_nome_proc_copy (
    net::etech::CS_INFO_PROC::_nome_proc_slice * _tao_to,
    const net::etech::CS_INFO_PROC::_nome_proc_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 11; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_INFO_PROC::_cmd_start_slice *
net::etech::CS_INFO_PROC::_cmd_start_dup (const net::etech::CS_INFO_PROC::_cmd_start_slice *_tao_src_array)
{
  net::etech::CS_INFO_PROC::_cmd_start_slice *_tao_dup_array =
    net::etech::CS_INFO_PROC::_cmd_start_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_INFO_PROC::_cmd_start_slice *> (0);
    }
  
  net::etech::CS_INFO_PROC::_cmd_start_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_INFO_PROC::_cmd_start_slice *
net::etech::CS_INFO_PROC::_cmd_start_alloc (void)
{
  net::etech::CS_INFO_PROC::_cmd_start_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[50], 0);
  return retval;
}

void
net::etech::CS_INFO_PROC::_cmd_start_free (
    net::etech::CS_INFO_PROC::_cmd_start_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_INFO_PROC::_cmd_start_copy (
    net::etech::CS_INFO_PROC::_cmd_start_slice * _tao_to,
    const net::etech::CS_INFO_PROC::_cmd_start_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 50; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_INFO_PROC::_nome_fep_slice *
net::etech::CS_INFO_PROC::_nome_fep_dup (const net::etech::CS_INFO_PROC::_nome_fep_slice *_tao_src_array)
{
  net::etech::CS_INFO_PROC::_nome_fep_slice *_tao_dup_array =
    net::etech::CS_INFO_PROC::_nome_fep_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_INFO_PROC::_nome_fep_slice *> (0);
    }
  
  net::etech::CS_INFO_PROC::_nome_fep_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_INFO_PROC::_nome_fep_slice *
net::etech::CS_INFO_PROC::_nome_fep_alloc (void)
{
  net::etech::CS_INFO_PROC::_nome_fep_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
net::etech::CS_INFO_PROC::_nome_fep_free (
    net::etech::CS_INFO_PROC::_nome_fep_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_INFO_PROC::_nome_fep_copy (
    net::etech::CS_INFO_PROC::_nome_fep_slice * _tao_to,
    const net::etech::CS_INFO_PROC::_nome_fep_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_CS_INFO_PROCSEQ_CS_)
#define _NET_ETECH_CS_INFO_PROCSEQ_CS_

net::etech::CS_INFO_PROCSeq::CS_INFO_PROCSeq (void)
{}

net::etech::CS_INFO_PROCSeq::CS_INFO_PROCSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CS_INFO_PROC
      > (max)
{}

net::etech::CS_INFO_PROCSeq::CS_INFO_PROCSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::CS_INFO_PROC * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CS_INFO_PROC
      >
    (max, length, buffer, release)
{}

net::etech::CS_INFO_PROCSeq::CS_INFO_PROCSeq (
    const CS_INFO_PROCSeq &seq)
  : ::TAO::unbounded_value_sequence<
        CS_INFO_PROC
      > (seq)
{}

net::etech::CS_INFO_PROCSeq::~CS_INFO_PROCSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_BLOCK_LOG::_msg_slice *
net::etech::CS_BLOCK_LOG::_msg_dup (const net::etech::CS_BLOCK_LOG::_msg_slice *_tao_src_array)
{
  net::etech::CS_BLOCK_LOG::_msg_slice *_tao_dup_array =
    net::etech::CS_BLOCK_LOG::_msg_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_BLOCK_LOG::_msg_slice *> (0);
    }
  
  net::etech::CS_BLOCK_LOG::_msg_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_BLOCK_LOG::_msg_slice *
net::etech::CS_BLOCK_LOG::_msg_alloc (void)
{
  net::etech::CS_BLOCK_LOG::_msg_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[132], 0);
  return retval;
}

void
net::etech::CS_BLOCK_LOG::_msg_free (
    net::etech::CS_BLOCK_LOG::_msg_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_BLOCK_LOG::_msg_copy (
    net::etech::CS_BLOCK_LOG::_msg_slice * _tao_to,
    const net::etech::CS_BLOCK_LOG::_msg_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 132; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::CS_BLOCK_LOG::_nome_slice *
net::etech::CS_BLOCK_LOG::_nome_dup (const net::etech::CS_BLOCK_LOG::_nome_slice *_tao_src_array)
{
  net::etech::CS_BLOCK_LOG::_nome_slice *_tao_dup_array =
    net::etech::CS_BLOCK_LOG::_nome_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::CS_BLOCK_LOG::_nome_slice *> (0);
    }
  
  net::etech::CS_BLOCK_LOG::_nome_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::CS_BLOCK_LOG::_nome_slice *
net::etech::CS_BLOCK_LOG::_nome_alloc (void)
{
  net::etech::CS_BLOCK_LOG::_nome_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[40], 0);
  return retval;
}

void
net::etech::CS_BLOCK_LOG::_nome_free (
    net::etech::CS_BLOCK_LOG::_nome_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::CS_BLOCK_LOG::_nome_copy (
    net::etech::CS_BLOCK_LOG::_nome_slice * _tao_to,
    const net::etech::CS_BLOCK_LOG::_nome_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 40; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_CS_BLOCK_LOGSEQ_CS_)
#define _NET_ETECH_CS_BLOCK_LOGSEQ_CS_

net::etech::CS_BLOCK_LOGSeq::CS_BLOCK_LOGSeq (void)
{}

net::etech::CS_BLOCK_LOGSeq::CS_BLOCK_LOGSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CS_BLOCK_LOG
      > (max)
{}

net::etech::CS_BLOCK_LOGSeq::CS_BLOCK_LOGSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::CS_BLOCK_LOG * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CS_BLOCK_LOG
      >
    (max, length, buffer, release)
{}

net::etech::CS_BLOCK_LOGSeq::CS_BLOCK_LOGSeq (
    const CS_BLOCK_LOGSeq &seq)
  : ::TAO::unbounded_value_sequence<
        CS_BLOCK_LOG
      > (seq)
{}

net::etech::CS_BLOCK_LOGSeq::~CS_BLOCK_LOGSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GARBAGE_INFO::_user_slice *
net::etech::GARBAGE_INFO::_user_dup (const net::etech::GARBAGE_INFO::_user_slice *_tao_src_array)
{
  net::etech::GARBAGE_INFO::_user_slice *_tao_dup_array =
    net::etech::GARBAGE_INFO::_user_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GARBAGE_INFO::_user_slice *> (0);
    }
  
  net::etech::GARBAGE_INFO::_user_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GARBAGE_INFO::_user_slice *
net::etech::GARBAGE_INFO::_user_alloc (void)
{
  net::etech::GARBAGE_INFO::_user_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], 0);
  return retval;
}

void
net::etech::GARBAGE_INFO::_user_free (
    net::etech::GARBAGE_INFO::_user_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GARBAGE_INFO::_user_copy (
    net::etech::GARBAGE_INFO::_user_slice * _tao_to,
    const net::etech::GARBAGE_INFO::_user_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GARBAGE_INFO::_path_slice *
net::etech::GARBAGE_INFO::_path_dup (const net::etech::GARBAGE_INFO::_path_slice *_tao_src_array)
{
  net::etech::GARBAGE_INFO::_path_slice *_tao_dup_array =
    net::etech::GARBAGE_INFO::_path_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GARBAGE_INFO::_path_slice *> (0);
    }
  
  net::etech::GARBAGE_INFO::_path_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GARBAGE_INFO::_path_slice *
net::etech::GARBAGE_INFO::_path_alloc (void)
{
  net::etech::GARBAGE_INFO::_path_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[257], 0);
  return retval;
}

void
net::etech::GARBAGE_INFO::_path_free (
    net::etech::GARBAGE_INFO::_path_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GARBAGE_INFO::_path_copy (
    net::etech::GARBAGE_INFO::_path_slice * _tao_to,
    const net::etech::GARBAGE_INFO::_path_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 257; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GARBAGE_INFO::_filter_slice *
net::etech::GARBAGE_INFO::_filter_dup (const net::etech::GARBAGE_INFO::_filter_slice *_tao_src_array)
{
  net::etech::GARBAGE_INFO::_filter_slice *_tao_dup_array =
    net::etech::GARBAGE_INFO::_filter_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GARBAGE_INFO::_filter_slice *> (0);
    }
  
  net::etech::GARBAGE_INFO::_filter_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GARBAGE_INFO::_filter_slice *
net::etech::GARBAGE_INFO::_filter_alloc (void)
{
  net::etech::GARBAGE_INFO::_filter_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[15], 0);
  return retval;
}

void
net::etech::GARBAGE_INFO::_filter_free (
    net::etech::GARBAGE_INFO::_filter_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GARBAGE_INFO::_filter_copy (
    net::etech::GARBAGE_INFO::_filter_slice * _tao_to,
    const net::etech::GARBAGE_INFO::_filter_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 15; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GARBAGE_INFO::_frequence_slice *
net::etech::GARBAGE_INFO::_frequence_dup (const net::etech::GARBAGE_INFO::_frequence_slice *_tao_src_array)
{
  net::etech::GARBAGE_INFO::_frequence_slice *_tao_dup_array =
    net::etech::GARBAGE_INFO::_frequence_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GARBAGE_INFO::_frequence_slice *> (0);
    }
  
  net::etech::GARBAGE_INFO::_frequence_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GARBAGE_INFO::_frequence_slice *
net::etech::GARBAGE_INFO::_frequence_alloc (void)
{
  net::etech::GARBAGE_INFO::_frequence_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[5], 0);
  return retval;
}

void
net::etech::GARBAGE_INFO::_frequence_free (
    net::etech::GARBAGE_INFO::_frequence_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GARBAGE_INFO::_frequence_copy (
    net::etech::GARBAGE_INFO::_frequence_slice * _tao_to,
    const net::etech::GARBAGE_INFO::_frequence_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GARBAGE_INFO::_path_log_slice *
net::etech::GARBAGE_INFO::_path_log_dup (const net::etech::GARBAGE_INFO::_path_log_slice *_tao_src_array)
{
  net::etech::GARBAGE_INFO::_path_log_slice *_tao_dup_array =
    net::etech::GARBAGE_INFO::_path_log_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GARBAGE_INFO::_path_log_slice *> (0);
    }
  
  net::etech::GARBAGE_INFO::_path_log_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GARBAGE_INFO::_path_log_slice *
net::etech::GARBAGE_INFO::_path_log_alloc (void)
{
  net::etech::GARBAGE_INFO::_path_log_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[257], 0);
  return retval;
}

void
net::etech::GARBAGE_INFO::_path_log_free (
    net::etech::GARBAGE_INFO::_path_log_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GARBAGE_INFO::_path_log_copy (
    net::etech::GARBAGE_INFO::_path_log_slice * _tao_to,
    const net::etech::GARBAGE_INFO::_path_log_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 257; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_GARBAGE_INFOSEQ_CS_)
#define _NET_ETECH_GARBAGE_INFOSEQ_CS_

net::etech::GARBAGE_INFOSeq::GARBAGE_INFOSeq (void)
{}

net::etech::GARBAGE_INFOSeq::GARBAGE_INFOSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        GARBAGE_INFO
      > (max)
{}

net::etech::GARBAGE_INFOSeq::GARBAGE_INFOSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::GARBAGE_INFO * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        GARBAGE_INFO
      >
    (max, length, buffer, release)
{}

net::etech::GARBAGE_INFOSeq::GARBAGE_INFOSeq (
    const GARBAGE_INFOSeq &seq)
  : ::TAO::unbounded_value_sequence<
        GARBAGE_INFO
      > (seq)
{}

net::etech::GARBAGE_INFOSeq::~GARBAGE_INFOSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ACQ_CAT::_name_slice *
net::etech::ACQ_CAT::_name_dup (const net::etech::ACQ_CAT::_name_slice *_tao_src_array)
{
  net::etech::ACQ_CAT::_name_slice *_tao_dup_array =
    net::etech::ACQ_CAT::_name_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ACQ_CAT::_name_slice *> (0);
    }
  
  net::etech::ACQ_CAT::_name_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ACQ_CAT::_name_slice *
net::etech::ACQ_CAT::_name_alloc (void)
{
  net::etech::ACQ_CAT::_name_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[29], 0);
  return retval;
}

void
net::etech::ACQ_CAT::_name_free (
    net::etech::ACQ_CAT::_name_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ACQ_CAT::_name_copy (
    net::etech::ACQ_CAT::_name_slice * _tao_to,
    const net::etech::ACQ_CAT::_name_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 29; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_ACQ_CATSEQ_CS_)
#define _NET_ETECH_ACQ_CATSEQ_CS_

net::etech::ACQ_CATSeq::ACQ_CATSeq (void)
{}

net::etech::ACQ_CATSeq::ACQ_CATSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ACQ_CAT
      > (max)
{}

net::etech::ACQ_CATSeq::ACQ_CATSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::ACQ_CAT * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ACQ_CAT
      >
    (max, length, buffer, release)
{}

net::etech::ACQ_CATSeq::ACQ_CATSeq (
    const ACQ_CATSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ACQ_CAT
      > (seq)
{}

net::etech::ACQ_CATSeq::~ACQ_CATSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ACQ_PEB_MGR::_processing_slice *
net::etech::ACQ_PEB_MGR::_processing_dup (const net::etech::ACQ_PEB_MGR::_processing_slice *_tao_src_array)
{
  net::etech::ACQ_PEB_MGR::_processing_slice *_tao_dup_array =
    net::etech::ACQ_PEB_MGR::_processing_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ACQ_PEB_MGR::_processing_slice *> (0);
    }
  
  net::etech::ACQ_PEB_MGR::_processing_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ACQ_PEB_MGR::_processing_slice *
net::etech::ACQ_PEB_MGR::_processing_alloc (void)
{
  net::etech::ACQ_PEB_MGR::_processing_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[29], 0);
  return retval;
}

void
net::etech::ACQ_PEB_MGR::_processing_free (
    net::etech::ACQ_PEB_MGR::_processing_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ACQ_PEB_MGR::_processing_copy (
    net::etech::ACQ_PEB_MGR::_processing_slice * _tao_to,
    const net::etech::ACQ_PEB_MGR::_processing_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 29; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::ACQ_PEB_MGR::_PEBName_slice *
net::etech::ACQ_PEB_MGR::_PEBName_dup (const net::etech::ACQ_PEB_MGR::_PEBName_slice *_tao_src_array)
{
  net::etech::ACQ_PEB_MGR::_PEBName_slice *_tao_dup_array =
    net::etech::ACQ_PEB_MGR::_PEBName_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::ACQ_PEB_MGR::_PEBName_slice *> (0);
    }
  
  net::etech::ACQ_PEB_MGR::_PEBName_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::ACQ_PEB_MGR::_PEBName_slice *
net::etech::ACQ_PEB_MGR::_PEBName_alloc (void)
{
  net::etech::ACQ_PEB_MGR::_PEBName_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[128], 0);
  return retval;
}

void
net::etech::ACQ_PEB_MGR::_PEBName_free (
    net::etech::ACQ_PEB_MGR::_PEBName_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::ACQ_PEB_MGR::_PEBName_copy (
    net::etech::ACQ_PEB_MGR::_PEBName_slice * _tao_to,
    const net::etech::ACQ_PEB_MGR::_PEBName_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 128; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GESTIONE_PSWD::_nomeNodo_slice *
net::etech::GESTIONE_PSWD::_nomeNodo_dup (const net::etech::GESTIONE_PSWD::_nomeNodo_slice *_tao_src_array)
{
  net::etech::GESTIONE_PSWD::_nomeNodo_slice *_tao_dup_array =
    net::etech::GESTIONE_PSWD::_nomeNodo_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GESTIONE_PSWD::_nomeNodo_slice *> (0);
    }
  
  net::etech::GESTIONE_PSWD::_nomeNodo_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GESTIONE_PSWD::_nomeNodo_slice *
net::etech::GESTIONE_PSWD::_nomeNodo_alloc (void)
{
  net::etech::GESTIONE_PSWD::_nomeNodo_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[50], 0);
  return retval;
}

void
net::etech::GESTIONE_PSWD::_nomeNodo_free (
    net::etech::GESTIONE_PSWD::_nomeNodo_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GESTIONE_PSWD::_nomeNodo_copy (
    net::etech::GESTIONE_PSWD::_nomeNodo_slice * _tao_to,
    const net::etech::GESTIONE_PSWD::_nomeNodo_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 50; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GESTIONE_PSWD::_oggetto_slice *
net::etech::GESTIONE_PSWD::_oggetto_dup (const net::etech::GESTIONE_PSWD::_oggetto_slice *_tao_src_array)
{
  net::etech::GESTIONE_PSWD::_oggetto_slice *_tao_dup_array =
    net::etech::GESTIONE_PSWD::_oggetto_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GESTIONE_PSWD::_oggetto_slice *> (0);
    }
  
  net::etech::GESTIONE_PSWD::_oggetto_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GESTIONE_PSWD::_oggetto_slice *
net::etech::GESTIONE_PSWD::_oggetto_alloc (void)
{
  net::etech::GESTIONE_PSWD::_oggetto_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[100], 0);
  return retval;
}

void
net::etech::GESTIONE_PSWD::_oggetto_free (
    net::etech::GESTIONE_PSWD::_oggetto_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GESTIONE_PSWD::_oggetto_copy (
    net::etech::GESTIONE_PSWD::_oggetto_slice * _tao_to,
    const net::etech::GESTIONE_PSWD::_oggetto_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 100; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GESTIONE_PSWD::_login_slice *
net::etech::GESTIONE_PSWD::_login_dup (const net::etech::GESTIONE_PSWD::_login_slice *_tao_src_array)
{
  net::etech::GESTIONE_PSWD::_login_slice *_tao_dup_array =
    net::etech::GESTIONE_PSWD::_login_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GESTIONE_PSWD::_login_slice *> (0);
    }
  
  net::etech::GESTIONE_PSWD::_login_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GESTIONE_PSWD::_login_slice *
net::etech::GESTIONE_PSWD::_login_alloc (void)
{
  net::etech::GESTIONE_PSWD::_login_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[50], 0);
  return retval;
}

void
net::etech::GESTIONE_PSWD::_login_free (
    net::etech::GESTIONE_PSWD::_login_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GESTIONE_PSWD::_login_copy (
    net::etech::GESTIONE_PSWD::_login_slice * _tao_to,
    const net::etech::GESTIONE_PSWD::_login_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 50; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GESTIONE_PSWD::_pswd_slice *
net::etech::GESTIONE_PSWD::_pswd_dup (const net::etech::GESTIONE_PSWD::_pswd_slice *_tao_src_array)
{
  net::etech::GESTIONE_PSWD::_pswd_slice *_tao_dup_array =
    net::etech::GESTIONE_PSWD::_pswd_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GESTIONE_PSWD::_pswd_slice *> (0);
    }
  
  net::etech::GESTIONE_PSWD::_pswd_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GESTIONE_PSWD::_pswd_slice *
net::etech::GESTIONE_PSWD::_pswd_alloc (void)
{
  net::etech::GESTIONE_PSWD::_pswd_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[50], 0);
  return retval;
}

void
net::etech::GESTIONE_PSWD::_pswd_free (
    net::etech::GESTIONE_PSWD::_pswd_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GESTIONE_PSWD::_pswd_copy (
    net::etech::GESTIONE_PSWD::_pswd_slice * _tao_to,
    const net::etech::GESTIONE_PSWD::_pswd_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 50; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_array/array_cs.cpp:97

net::etech::GESTIONE_PSWD::_dataScadenza_slice *
net::etech::GESTIONE_PSWD::_dataScadenza_dup (const net::etech::GESTIONE_PSWD::_dataScadenza_slice *_tao_src_array)
{
  net::etech::GESTIONE_PSWD::_dataScadenza_slice *_tao_dup_array =
    net::etech::GESTIONE_PSWD::_dataScadenza_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <net::etech::GESTIONE_PSWD::_dataScadenza_slice *> (0);
    }
  
  net::etech::GESTIONE_PSWD::_dataScadenza_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

net::etech::GESTIONE_PSWD::_dataScadenza_slice *
net::etech::GESTIONE_PSWD::_dataScadenza_alloc (void)
{
  net::etech::GESTIONE_PSWD::_dataScadenza_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[9], 0);
  return retval;
}

void
net::etech::GESTIONE_PSWD::_dataScadenza_free (
    net::etech::GESTIONE_PSWD::_dataScadenza_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
net::etech::GESTIONE_PSWD::_dataScadenza_copy (
    net::etech::GESTIONE_PSWD::_dataScadenza_slice * _tao_to,
    const net::etech::GESTIONE_PSWD::_dataScadenza_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 9; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_NET_ETECH_GESTIONE_PSWDSEQ_CS_)
#define _NET_ETECH_GESTIONE_PSWDSEQ_CS_

net::etech::GESTIONE_PSWDSeq::GESTIONE_PSWDSeq (void)
{}

net::etech::GESTIONE_PSWDSeq::GESTIONE_PSWDSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        GESTIONE_PSWD
      > (max)
{}

net::etech::GESTIONE_PSWDSeq::GESTIONE_PSWDSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    net::etech::GESTIONE_PSWD * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        GESTIONE_PSWD
      >
    (max, length, buffer, release)
{}

net::etech::GESTIONE_PSWDSeq::GESTIONE_PSWDSeq (
    const GESTIONE_PSWDSeq &seq)
  : ::TAO::unbounded_value_sequence<
        GESTIONE_PSWD
      > (seq)
{}

net::etech::GESTIONE_PSWDSeq::~GESTIONE_PSWDSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ConfigMonitorServer.

net::etech::SSM::ConfigMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::ConfigMonitorServer>::duplicate (
    net::etech::SSM::ConfigMonitorServer_ptr p)
{
  return net::etech::SSM::ConfigMonitorServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ConfigMonitorServer>::release (
    net::etech::SSM::ConfigMonitorServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ConfigMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::ConfigMonitorServer>::nil (void)
{
  return net::etech::SSM::ConfigMonitorServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ConfigMonitorServer>::marshal (
    const net::etech::SSM::ConfigMonitorServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ConfigMonitorServer::eCMS;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ConfigMonitorServer::eCMS1;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ConfigMonitorServer::KillOrbixProcess (
  ::CORBA::Long flag,
  ::CORBA::Long num_pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_num_pid (num_pid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_num_pid
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "KillOrbixProcess",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ConfigMonitorServer::refreshConfigProcess (
  ::CORBA::Long flag,
  ::net::etech::CS_INFO_PROCSeq_out configProcesslList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_INFO_PROCSeq>::out_arg_val _tao_configProcesslList (configProcesslList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_configProcesslList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "refreshConfigProcess",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ConfigMonitorServer::refreshConfigBloc (
  ::CORBA::Long flag,
  ::net::etech::CS_BLOCK_LOGSeq_out configBloclList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_BLOCK_LOGSeq>::out_arg_val _tao_configBloclList (configBloclList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_configBloclList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "refreshConfigBloc",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::writeModifyProcess (
  const char * nomeProcesso,
  ::CORBA::Long flag,
  const ::net::etech::CS_INFO_PROC & configProcess)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_INFO_PROC>::in_arg_val _tao_configProcess (configProcess);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nomeProcesso,
      &_tao_flag,
      &_tao_configProcess
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "writeModifyProcess",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::writeModifyLog (
  ::CORBA::Long flag,
  const ::net::etech::CS_BLOCK_LOGSeq & configBloclList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_BLOCK_LOGSeq>::in_arg_val _tao_configBloclList (configBloclList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_configBloclList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "writeModifyLog",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::deleteProcess (
  ::CORBA::Long flag,
  const char * nomeProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_nomeProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "deleteProcess",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::deleteBlockLog (
  ::CORBA::Long flag,
  ::CORBA::Long idBlock)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_idBlock (idBlock);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_idBlock
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "deleteBlockLog",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::SystemStart (
  ::CORBA::Long flag)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "SystemStart",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ConfigMonitorServer::SystemStop (
  ::CORBA::Long flag)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "SystemStop",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ConfigMonitorServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::ConfigMonitorServer::ConfigMonitorServer (void)
{
}

net::etech::SSM::ConfigMonitorServer::~ConfigMonitorServer (void)
{
}

net::etech::SSM::ConfigMonitorServer_ptr
net::etech::SSM::ConfigMonitorServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConfigMonitorServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ConfigMonitorServer:1.0");
}

net::etech::SSM::ConfigMonitorServer_ptr
net::etech::SSM::ConfigMonitorServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConfigMonitorServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ConfigMonitorServer_ptr
net::etech::SSM::ConfigMonitorServer::_nil (void)
{
  return 0;
}

net::etech::SSM::ConfigMonitorServer_ptr
net::etech::SSM::ConfigMonitorServer::_duplicate (ConfigMonitorServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ConfigMonitorServer::_tao_release (ConfigMonitorServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ConfigMonitorServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ConfigMonitorServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ConfigMonitorServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ConfigMonitorServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::ConfigMonitorServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ProcessMonitorServer.

net::etech::SSM::ProcessMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::ProcessMonitorServer>::duplicate (
    net::etech::SSM::ProcessMonitorServer_ptr p)
{
  return net::etech::SSM::ProcessMonitorServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ProcessMonitorServer>::release (
    net::etech::SSM::ProcessMonitorServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ProcessMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::ProcessMonitorServer>::nil (void)
{
  return net::etech::SSM::ProcessMonitorServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ProcessMonitorServer>::marshal (
    const net::etech::SSM::ProcessMonitorServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eHELP;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMACRO;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::ePS_ORBIX;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::ePS_ORBIX_HELP;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eSINGLE_PROCESS;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eALL_PROCESS;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMAX_DESCRITTORE_PROCESS_LEN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMAX_NOME_PROCESSO_LEN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMAX_COLOR_LEN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMAX_TIPO_PROCESSO_LEN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ProcessMonitorServer::eMAX_MSG_PRROCESSO_LEN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ProcessMonitorServer::refreshMonitorProcess (
  ::net::etech::ProcesDetailSeq_out procesDetailList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::net::etech::ProcesDetailSeq>::out_arg_val _tao_procesDetailList (procesDetailList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_procesDetailList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "refreshMonitorProcess",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ProcessMonitorServer::checkStatus (
  ::net::etech::ProcesDetailSeq_out procesDetailList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::net::etech::ProcesDetailSeq>::out_arg_val _tao_procesDetailList (procesDetailList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_procesDetailList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "checkStatus",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ProcessMonitorServer::getDeteilProcess (
  ::CORBA::Long flagDETAIL,
  const char * nomeProcesso,
  ::net::etech::LogProcessSeq_out logProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagDETAIL (flagDETAIL);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< ::net::etech::LogProcessSeq>::out_arg_val _tao_logProcesso (logProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flagDETAIL,
      &_tao_nomeProcesso,
      &_tao_logProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "getDeteilProcess",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ProcessMonitorServer::getHistoryProcess (
  ::CORBA::Long flagWORK,
  ::CORBA::Long flagSINGLE_ALL_PROCESS,
  ::CORBA::Boolean flagALLDOCUMENT,
  const char * nomeProcesso,
  ::CORBA::Long data,
  ::net::etech::LogProcessSeq_out logProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagWORK (flagWORK);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagSINGLE_ALL_PROCESS (flagSINGLE_ALL_PROCESS);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_flagALLDOCUMENT (flagALLDOCUMENT);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_data (data);
  TAO::Arg_Traits< ::net::etech::LogProcessSeq>::out_arg_val _tao_logProcesso (logProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flagWORK,
      &_tao_flagSINGLE_ALL_PROCESS,
      &_tao_flagALLDOCUMENT,
      &_tao_nomeProcesso,
      &_tao_data,
      &_tao_logProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      7,
      "getHistoryProcess",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ProcessMonitorServer::resetField (
  ::CORBA::Long field,
  ::CORBA::Long flagTIPORESET,
  const char * nomeProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_field (field);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagTIPORESET (flagTIPORESET);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_field,
      &_tao_flagTIPORESET,
      &_tao_nomeProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "resetField",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ProcessMonitorServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::ProcessMonitorServer::ProcessMonitorServer (void)
{
}

net::etech::SSM::ProcessMonitorServer::~ProcessMonitorServer (void)
{
}

net::etech::SSM::ProcessMonitorServer_ptr
net::etech::SSM::ProcessMonitorServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProcessMonitorServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ProcessMonitorServer:1.0");
}

net::etech::SSM::ProcessMonitorServer_ptr
net::etech::SSM::ProcessMonitorServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProcessMonitorServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ProcessMonitorServer_ptr
net::etech::SSM::ProcessMonitorServer::_nil (void)
{
  return 0;
}

net::etech::SSM::ProcessMonitorServer_ptr
net::etech::SSM::ProcessMonitorServer::_duplicate (ProcessMonitorServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ProcessMonitorServer::_tao_release (ProcessMonitorServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ProcessMonitorServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ProcessMonitorServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ProcessMonitorServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ProcessMonitorServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::ProcessMonitorServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ACQPebMGRServer.

net::etech::SSM::ACQPebMGRServer_ptr
TAO::Objref_Traits<net::etech::SSM::ACQPebMGRServer>::duplicate (
    net::etech::SSM::ACQPebMGRServer_ptr p)
{
  return net::etech::SSM::ACQPebMGRServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ACQPebMGRServer>::release (
    net::etech::SSM::ACQPebMGRServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ACQPebMGRServer_ptr
TAO::Objref_Traits<net::etech::SSM::ACQPebMGRServer>::nil (void)
{
  return net::etech::SSM::ACQPebMGRServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ACQPebMGRServer>::marshal (
    const net::etech::SSM::ACQPebMGRServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ACQPebMGRServer::eCAT_NAME_DIM;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::ACQPebMGRServer::ePEB_NAME_DIM;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ACQPebMGRServer::refreshACQPebMGR (
  ::CORBA::Long flag,
  ::net::etech::ACQ_PEB_MGR_out acqPebMgr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::ACQ_PEB_MGR>::out_arg_val _tao_acqPebMgr (acqPebMgr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flag,
      &_tao_acqPebMgr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "refreshACQPebMGR",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::ACQPebMGRServer::writeACQPebMGR (
  ::CORBA::Boolean cleanAll,
  const ::net::etech::ACQ_PEB_MGR & acqPebMgr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_cleanAll (cleanAll);
  TAO::Arg_Traits< ::net::etech::ACQ_PEB_MGR>::in_arg_val _tao_acqPebMgr (acqPebMgr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cleanAll,
      &_tao_acqPebMgr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "writeACQPebMGR",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ACQPebMGRServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::ACQPebMGRServer::ACQPebMGRServer (void)
{
}

net::etech::SSM::ACQPebMGRServer::~ACQPebMGRServer (void)
{
}

net::etech::SSM::ACQPebMGRServer_ptr
net::etech::SSM::ACQPebMGRServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ACQPebMGRServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ACQPebMGRServer:1.0");
}

net::etech::SSM::ACQPebMGRServer_ptr
net::etech::SSM::ACQPebMGRServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ACQPebMGRServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ACQPebMGRServer_ptr
net::etech::SSM::ACQPebMGRServer::_nil (void)
{
  return 0;
}

net::etech::SSM::ACQPebMGRServer_ptr
net::etech::SSM::ACQPebMGRServer::_duplicate (ACQPebMGRServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ACQPebMGRServer::_tao_release (ACQPebMGRServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ACQPebMGRServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ACQPebMGRServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ACQPebMGRServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ACQPebMGRServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::ACQPebMGRServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::GarbageMonitorServer.

net::etech::SSM::GarbageMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::GarbageMonitorServer>::duplicate (
    net::etech::SSM::GarbageMonitorServer_ptr p)
{
  return net::etech::SSM::GarbageMonitorServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::GarbageMonitorServer>::release (
    net::etech::SSM::GarbageMonitorServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::GarbageMonitorServer_ptr
TAO::Objref_Traits<net::etech::SSM::GarbageMonitorServer>::nil (void)
{
  return net::etech::SSM::GarbageMonitorServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::GarbageMonitorServer>::marshal (
    const net::etech::SSM::GarbageMonitorServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::GarbageMonitorServer::eGB_LENUSER;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::GarbageMonitorServer::eGB_LENPATH;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::GarbageMonitorServer::eGB_LENPATH_LOG;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::GarbageMonitorServer::eGB_LENFILTER;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::GarbageMonitorServer::eGB_LENFREQUENCE;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::GarbageMonitorServer::refreshGarbage (
  ::net::etech::GARBAGE_INFOSeq_out GarbageInfoOut)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::net::etech::GARBAGE_INFOSeq>::out_arg_val _tao_GarbageInfoOut (GarbageInfoOut);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_GarbageInfoOut
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "refreshGarbage",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::GarbageMonitorServer::writeGarbage (
  ::CORBA::Boolean modify,
  const ::net::etech::GARBAGE_INFOSeq & GarbageInfoIn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_modify (modify);
  TAO::Arg_Traits< ::net::etech::GARBAGE_INFOSeq>::in_arg_val _tao_GarbageInfoIn (GarbageInfoIn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_modify,
      &_tao_GarbageInfoIn
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "writeGarbage",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::GarbageMonitorServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::GarbageMonitorServer::GarbageMonitorServer (void)
{
}

net::etech::SSM::GarbageMonitorServer::~GarbageMonitorServer (void)
{
}

net::etech::SSM::GarbageMonitorServer_ptr
net::etech::SSM::GarbageMonitorServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<GarbageMonitorServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/GarbageMonitorServer:1.0");
}

net::etech::SSM::GarbageMonitorServer_ptr
net::etech::SSM::GarbageMonitorServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<GarbageMonitorServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::GarbageMonitorServer_ptr
net::etech::SSM::GarbageMonitorServer::_nil (void)
{
  return 0;
}

net::etech::SSM::GarbageMonitorServer_ptr
net::etech::SSM::GarbageMonitorServer::_duplicate (GarbageMonitorServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::GarbageMonitorServer::_tao_release (GarbageMonitorServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::GarbageMonitorServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/GarbageMonitorServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::GarbageMonitorServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/GarbageMonitorServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::GarbageMonitorServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::PsMonitorMasterServer.

net::etech::SSM::PsMonitorMasterServer_ptr
TAO::Objref_Traits<net::etech::SSM::PsMonitorMasterServer>::duplicate (
    net::etech::SSM::PsMonitorMasterServer_ptr p)
{
  return net::etech::SSM::PsMonitorMasterServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::PsMonitorMasterServer>::release (
    net::etech::SSM::PsMonitorMasterServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::PsMonitorMasterServer_ptr
TAO::Objref_Traits<net::etech::SSM::PsMonitorMasterServer>::nil (void)
{
  return net::etech::SSM::PsMonitorMasterServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::PsMonitorMasterServer>::marshal (
    const net::etech::SSM::PsMonitorMasterServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::PsMonitorMasterServer::ePSM;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::PsMonitorMasterServer::eCOMP;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::LaunchPsMonitorMasterServer (
  ::net::etech::CentralSeq_out CEN)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::net::etech::CentralSeq>::out_arg_val _tao_CEN (CEN);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_CEN
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "LaunchPsMonitorMasterServer",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::KillOrbixProcess (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::CORBA::Long num_pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_num_pid (num_pid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_num_pid
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "KillOrbixProcess",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::refreshMonitorProcess (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::net::etech::ProcesDetailSeq_out procesDetailLis)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::ProcesDetailSeq>::out_arg_val _tao_procesDetailLis (procesDetailLis);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_procesDetailLis
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refreshMonitorProcess",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::getDeteilProcess (
  ::CORBA::Long flagDETAIL,
  const char * nameSwitch,
  const char * nomeProcesso,
  ::net::etech::LogProcessSeq_out logProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagDETAIL (flagDETAIL);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< ::net::etech::LogProcessSeq>::out_arg_val _tao_logProcesso (logProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flagDETAIL,
      &_tao_nameSwitch,
      &_tao_nomeProcesso,
      &_tao_logProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "getDeteilProcess",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::getSystemTime (
  const char * nameSwitch,
  ::net::etech::LogProcessSeq_out systemTime)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::net::etech::LogProcessSeq>::out_arg_val _tao_systemTime (systemTime);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_systemTime
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "getSystemTime",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::getHistoryProcess (
  ::CORBA::Long flagWORK,
  ::CORBA::Long flagSINGLE_ALL_PROCESS,
  ::CORBA::Boolean flagALLDOCUMENT,
  const char * nameSwitch,
  const char * nomeProcesso,
  ::CORBA::Long data,
  ::net::etech::LogProcessSeq_out logProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagWORK (flagWORK);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagSINGLE_ALL_PROCESS (flagSINGLE_ALL_PROCESS);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_flagALLDOCUMENT (flagALLDOCUMENT);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_data (data);
  TAO::Arg_Traits< ::net::etech::LogProcessSeq>::out_arg_val _tao_logProcesso (logProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_flagWORK,
      &_tao_flagSINGLE_ALL_PROCESS,
      &_tao_flagALLDOCUMENT,
      &_tao_nameSwitch,
      &_tao_nomeProcesso,
      &_tao_data,
      &_tao_logProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "getHistoryProcess",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::resetField (
  const char * nameSwitch,
  ::CORBA::Long field,
  ::CORBA::Long flagTIPORESET,
  const char * nomeProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_field (field);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flagTIPORESET (flagTIPORESET);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_field,
      &_tao_flagTIPORESET,
      &_tao_nomeProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "resetField",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::refreshConfigProcess (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::net::etech::CS_INFO_PROCSeq_out configProcesslList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_INFO_PROCSeq>::out_arg_val _tao_configProcesslList (configProcesslList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_configProcesslList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refreshConfigProcess",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::refreshConfigBloc (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::net::etech::CS_BLOCK_LOGSeq_out configBloclList)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_BLOCK_LOGSeq>::out_arg_val _tao_configBloclList (configBloclList);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_configBloclList
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refreshConfigBloc",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::writeModifyProcess (
  const char * nomeProcesso,
  const char * nameSwitch,
  ::CORBA::Long flag,
  const ::net::etech::CS_INFO_PROC & configProcess)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_INFO_PROC>::in_arg_val _tao_configProcess (configProcess);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nomeProcesso,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_configProcess
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "writeModifyProcess",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::writeModifyLog (
  const char * nameSwitch,
  ::CORBA::Long flag,
  const ::net::etech::CS_BLOCK_LOGSeq & configBloclList,
  ::net::etech::CentralSeq_out switchSeq)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::CS_BLOCK_LOGSeq>::in_arg_val _tao_configBloclList (configBloclList);
  TAO::Arg_Traits< ::net::etech::CentralSeq>::out_arg_val _tao_switchSeq (switchSeq);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_configBloclList,
      &_tao_switchSeq
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "writeModifyLog",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::createLogFile (
  const char * nameSwitch,
  ::CORBA::Long flag)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "createLogFile",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::deleteProcess (
  const char * nameSwitch,
  ::CORBA::Long flag,
  const char * nomeProcesso)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nomeProcesso (nomeProcesso);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_nomeProcesso
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "deleteProcess",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::deleteBlockLog (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::CORBA::Long idBlock,
  ::CORBA::Long idFep)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_idBlock (idBlock);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_idFep (idFep);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_idBlock,
      &_tao_idFep
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "deleteBlockLog",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::SystemStart (
  const char * nameSwitch,
  ::CORBA::Long flag)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "SystemStart",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::SystemStop (
  const char * nameSwitch,
  ::CORBA::Long flag)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "SystemStop",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::refreshACQPebMGR (
  const char * nameSwitch,
  ::CORBA::Long flag,
  ::net::etech::ACQ_PEB_MGR_out acqPebMgr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::ACQ_PEB_MGR>::out_arg_val _tao_acqPebMgr (acqPebMgr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_flag,
      &_tao_acqPebMgr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refreshACQPebMGR",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::writeACQPebMGR (
  const char * nameSwitch,
  ::CORBA::Boolean cleanAll,
  const ::net::etech::ACQ_PEB_MGR & acqPebMgr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_cleanAll (cleanAll);
  TAO::Arg_Traits< ::net::etech::ACQ_PEB_MGR>::in_arg_val _tao_acqPebMgr (acqPebMgr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_cleanAll,
      &_tao_acqPebMgr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "writeACQPebMGR",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::refreshGarbage (
  const char * nameSwitch,
  ::net::etech::GARBAGE_INFOSeq_out GarbageInfoOut)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::net::etech::GARBAGE_INFOSeq>::out_arg_val _tao_GarbageInfoOut (GarbageInfoOut);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_GarbageInfoOut
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "refreshGarbage",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::writeGarbage (
  const char * nameSwitch,
  ::CORBA::Boolean modify,
  const ::net::etech::GARBAGE_INFOSeq & GarbageInfoIn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_modify (modify);
  TAO::Arg_Traits< ::net::etech::GARBAGE_INFOSeq>::in_arg_val _tao_GarbageInfoIn (GarbageInfoIn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_modify,
      &_tao_GarbageInfoIn
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "writeGarbage",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::putFilePSWD (
  const char * nameSwitch,
  const char * nameFile,
  ::CORBA::Long flag,
  const ::net::etech::GESTIONE_PSWDSeq & pswdSequence)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameFile (nameFile);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::GESTIONE_PSWDSeq>::in_arg_val _tao_pswdSequence (pswdSequence);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_nameFile,
      &_tao_flag,
      &_tao_pswdSequence
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "putFilePSWD",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::PsMonitorMasterServer::getFilePSWD (
  const char * nameSwitch,
  const char * nameFile,
  ::CORBA::Long flag,
  ::net::etech::GESTIONE_PSWDSeq_out pswdSequence)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameSwitch (nameSwitch);
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameFile (nameFile);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::GESTIONE_PSWDSeq>::out_arg_val _tao_pswdSequence (pswdSequence);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameSwitch,
      &_tao_nameFile,
      &_tao_flag,
      &_tao_pswdSequence
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "getFilePSWD",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::PsMonitorMasterServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::PsMonitorMasterServer::PsMonitorMasterServer (void)
{
}

net::etech::SSM::PsMonitorMasterServer::~PsMonitorMasterServer (void)
{
}

net::etech::SSM::PsMonitorMasterServer_ptr
net::etech::SSM::PsMonitorMasterServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PsMonitorMasterServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/PsMonitorMasterServer:1.0");
}

net::etech::SSM::PsMonitorMasterServer_ptr
net::etech::SSM::PsMonitorMasterServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PsMonitorMasterServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::PsMonitorMasterServer_ptr
net::etech::SSM::PsMonitorMasterServer::_nil (void)
{
  return 0;
}

net::etech::SSM::PsMonitorMasterServer_ptr
net::etech::SSM::PsMonitorMasterServer::_duplicate (PsMonitorMasterServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::PsMonitorMasterServer::_tao_release (PsMonitorMasterServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/PsMonitorMasterServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::PsMonitorMasterServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/PsMonitorMasterServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::PsMonitorMasterServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::DBConfigurationServer.

net::etech::SSM::DBConfigurationServer_ptr
TAO::Objref_Traits<net::etech::SSM::DBConfigurationServer>::duplicate (
    net::etech::SSM::DBConfigurationServer_ptr p)
{
  return net::etech::SSM::DBConfigurationServer::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::DBConfigurationServer>::release (
    net::etech::SSM::DBConfigurationServer_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::DBConfigurationServer_ptr
TAO::Objref_Traits<net::etech::SSM::DBConfigurationServer>::nil (void)
{
  return net::etech::SSM::DBConfigurationServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::DBConfigurationServer>::marshal (
    const net::etech::SSM::DBConfigurationServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDBCS;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eBLOCK_SIZE;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

const char *const net::etech::SSM::DBConfigurationServer::eCHIAVE = "lawi@[4u;ptncq3lj4hfo2734tkqref";

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDIM_PSWD_NOME_NODO;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDIM_PSWD_OGGETTO;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDIM_PSWD_LOGIN;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDIM_PSWD_PASSWORD;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_cs.cpp:57

#ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE
  const CORBA::Long net::etech::SSM::DBConfigurationServer::eDIM_PSWD_DATA_SCADENZA;
#endif // ifndef ACE_HAS_HEADER_ALLOCATED_CLASS_STATIC_CONST_INT_STOREAGE

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::DBConfigurationServer::renameIndexTimeCFG (
  const char * nameFile)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameFile (nameFile);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameFile
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "renameIndexTimeCFG",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::DBConfigurationServer::putFilePSWD (
  const char * nameFile,
  ::CORBA::Long flag,
  const ::net::etech::GESTIONE_PSWDSeq & pswdSequence)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameFile (nameFile);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::GESTIONE_PSWDSeq>::in_arg_val _tao_pswdSequence (pswdSequence);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameFile,
      &_tao_flag,
      &_tao_pswdSequence
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "putFilePSWD",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Long
net::etech::SSM::DBConfigurationServer::getFilePSWD (
  const char * nameFile,
  ::CORBA::Long flag,
  ::net::etech::GESTIONE_PSWDSeq_out pswdSequence)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_nameFile (nameFile);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_flag (flag);
  TAO::Arg_Traits< ::net::etech::GESTIONE_PSWDSeq>::out_arg_val _tao_pswdSequence (pswdSequence);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nameFile,
      &_tao_flag,
      &_tao_pswdSequence
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "getFilePSWD",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::DBConfigurationServer::ShutDown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ShutDown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

net::etech::SSM::DBConfigurationServer::DBConfigurationServer (void)
{
}

net::etech::SSM::DBConfigurationServer::~DBConfigurationServer (void)
{
}

net::etech::SSM::DBConfigurationServer_ptr
net::etech::SSM::DBConfigurationServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DBConfigurationServer>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/DBConfigurationServer:1.0");
}

net::etech::SSM::DBConfigurationServer_ptr
net::etech::SSM::DBConfigurationServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DBConfigurationServer>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::DBConfigurationServer_ptr
net::etech::SSM::DBConfigurationServer::_nil (void)
{
  return 0;
}

net::etech::SSM::DBConfigurationServer_ptr
net::etech::SSM::DBConfigurationServer::_duplicate (DBConfigurationServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::DBConfigurationServer::_tao_release (DBConfigurationServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::DBConfigurationServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/DBConfigurationServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::DBConfigurationServer::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/DBConfigurationServer:1.0";
}

::CORBA::Boolean
net::etech::SSM::DBConfigurationServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ssm_scheduler_server.

net::etech::SSM::ssm_scheduler_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_scheduler_server>::duplicate (
    net::etech::SSM::ssm_scheduler_server_ptr p)
{
  return net::etech::SSM::ssm_scheduler_server::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ssm_scheduler_server>::release (
    net::etech::SSM::ssm_scheduler_server_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ssm_scheduler_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_scheduler_server>::nil (void)
{
  return net::etech::SSM::ssm_scheduler_server::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ssm_scheduler_server>::marshal (
    const net::etech::SSM::ssm_scheduler_server_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ssm_scheduler_server::adamsConfigurationChanged (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "adamsConfigurationChanged",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ssm_scheduler_server::processConfigurationChanged (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "processConfigurationChanged",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
net::etech::SSM::ssm_scheduler_server::iniFileChanged (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "iniFileChanged",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ssm_scheduler_server::dummy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "dummy",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

net::etech::SSM::ssm_scheduler_server::ssm_scheduler_server (void)
{
}

net::etech::SSM::ssm_scheduler_server::~ssm_scheduler_server (void)
{
}

net::etech::SSM::ssm_scheduler_server_ptr
net::etech::SSM::ssm_scheduler_server::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_scheduler_server>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ssm_scheduler_server:1.0");
}

net::etech::SSM::ssm_scheduler_server_ptr
net::etech::SSM::ssm_scheduler_server::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_scheduler_server>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ssm_scheduler_server_ptr
net::etech::SSM::ssm_scheduler_server::_nil (void)
{
  return 0;
}

net::etech::SSM::ssm_scheduler_server_ptr
net::etech::SSM::ssm_scheduler_server::_duplicate (ssm_scheduler_server_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ssm_scheduler_server::_tao_release (ssm_scheduler_server_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ssm_scheduler_server::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ssm_scheduler_server:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ssm_scheduler_server::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ssm_scheduler_server:1.0";
}

::CORBA::Boolean
net::etech::SSM::ssm_scheduler_server::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ssm_logger_server.

net::etech::SSM::ssm_logger_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_logger_server>::duplicate (
    net::etech::SSM::ssm_logger_server_ptr p)
{
  return net::etech::SSM::ssm_logger_server::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ssm_logger_server>::release (
    net::etech::SSM::ssm_logger_server_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ssm_logger_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_logger_server>::nil (void)
{
  return net::etech::SSM::ssm_logger_server::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ssm_logger_server>::marshal (
    const net::etech::SSM::ssm_logger_server_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ssm_logger_server::get_logs (
  const char * process_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_process_name (process_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_process_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_logs",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

net::etech::SSM::ssm_logger_server::ssm_logger_server (void)
{
}

net::etech::SSM::ssm_logger_server::~ssm_logger_server (void)
{
}

net::etech::SSM::ssm_logger_server_ptr
net::etech::SSM::ssm_logger_server::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_logger_server>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ssm_logger_server:1.0");
}

net::etech::SSM::ssm_logger_server_ptr
net::etech::SSM::ssm_logger_server::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_logger_server>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ssm_logger_server_ptr
net::etech::SSM::ssm_logger_server::_nil (void)
{
  return 0;
}

net::etech::SSM::ssm_logger_server_ptr
net::etech::SSM::ssm_logger_server::_duplicate (ssm_logger_server_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ssm_logger_server::_tao_release (ssm_logger_server_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ssm_logger_server::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ssm_logger_server:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ssm_logger_server::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ssm_logger_server:1.0";
}

::CORBA::Boolean
net::etech::SSM::ssm_logger_server::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for net::etech::SSM::ssm_garbage_server.

net::etech::SSM::ssm_garbage_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_garbage_server>::duplicate (
    net::etech::SSM::ssm_garbage_server_ptr p)
{
  return net::etech::SSM::ssm_garbage_server::_duplicate (p);
}

void
TAO::Objref_Traits<net::etech::SSM::ssm_garbage_server>::release (
    net::etech::SSM::ssm_garbage_server_ptr p)
{
  ::CORBA::release (p);
}

net::etech::SSM::ssm_garbage_server_ptr
TAO::Objref_Traits<net::etech::SSM::ssm_garbage_server>::nil (void)
{
  return net::etech::SSM::ssm_garbage_server::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<net::etech::SSM::ssm_garbage_server>::marshal (
    const net::etech::SSM::ssm_garbage_server_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
net::etech::SSM::ssm_garbage_server::dummy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "dummy",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

net::etech::SSM::ssm_garbage_server::ssm_garbage_server (void)
{
}

net::etech::SSM::ssm_garbage_server::~ssm_garbage_server (void)
{
}

net::etech::SSM::ssm_garbage_server_ptr
net::etech::SSM::ssm_garbage_server::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_garbage_server>::narrow (
        _tao_objref,
        "IDL:net/etech/SSM/ssm_garbage_server:1.0");
}

net::etech::SSM::ssm_garbage_server_ptr
net::etech::SSM::ssm_garbage_server::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ssm_garbage_server>::unchecked_narrow (
        _tao_objref);
}

net::etech::SSM::ssm_garbage_server_ptr
net::etech::SSM::ssm_garbage_server::_nil (void)
{
  return 0;
}

net::etech::SSM::ssm_garbage_server_ptr
net::etech::SSM::ssm_garbage_server::_duplicate (ssm_garbage_server_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
net::etech::SSM::ssm_garbage_server::_tao_release (ssm_garbage_server_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
net::etech::SSM::ssm_garbage_server::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:net/etech/SSM/ssm_garbage_server:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* net::etech::SSM::ssm_garbage_server::_interface_repository_id (void) const
{
  return "IDL:net/etech/SSM/ssm_garbage_server:1.0";
}

::CORBA::Boolean
net::etech::SSM::ssm_garbage_server::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::DATA_CENTRALI::_Descrizione_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        30);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::DATA_CENTRALI::_Descrizione_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        30);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::DATA_CENTRALI &_tao_aggregate)
{
  net::etech::DATA_CENTRALI::_Descrizione_forany _tao_aggregate_Descrizione
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::DATA_CENTRALI::_Descrizione_slice*) (
      #else
      (const_cast<
          net::etech::DATA_CENTRALI::_Descrizione_slice*> (
      #endif
          _tao_aggregate.Descrizione
        )
    );
  return
    (strm << _tao_aggregate.IdCentrale) &&
    (strm << _tao_aggregate_Descrizione);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::DATA_CENTRALI &_tao_aggregate)
{
  net::etech::DATA_CENTRALI::_Descrizione_forany _tao_aggregate_Descrizione
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::DATA_CENTRALI::_Descrizione_slice*) (
      #else
      (const_cast<
          net::etech::DATA_CENTRALI::_Descrizione_slice*> (
      #endif
          _tao_aggregate.Descrizione
        )
    );
  return
    (strm >> _tao_aggregate.IdCentrale) &&
    (strm >> _tao_aggregate_Descrizione);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_CentralSeq_CPP_
#define _TAO_CDR_OP_net_etech_CentralSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CentralSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CentralSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_CentralSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::logProcess::_descr_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        250);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::logProcess::_descr_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        250);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::logProcess &_tao_aggregate)
{
  net::etech::logProcess::_descr_forany _tao_aggregate_descr
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::logProcess::_descr_slice*) (
      #else
      (const_cast<
          net::etech::logProcess::_descr_slice*> (
      #endif
          _tao_aggregate.descr
        )
    );
  return
    (strm << _tao_aggregate_descr);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::logProcess &_tao_aggregate)
{
  net::etech::logProcess::_descr_forany _tao_aggregate_descr
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::logProcess::_descr_slice*) (
      #else
      (const_cast<
          net::etech::logProcess::_descr_slice*> (
      #endif
          _tao_aggregate.descr
        )
    );
  return
    (strm >> _tao_aggregate_descr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_LogProcessSeq_CPP_
#define _TAO_CDR_OP_net_etech_LogProcessSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::LogProcessSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::LogProcessSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_LogProcessSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_ParamSeqSeq_CPP_
#define _TAO_CDR_OP_net_etech_ParamSeqSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ParamSeqSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ParamSeqSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_ParamSeqSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail::_tipoProcesso_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail::_tipoProcesso_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail::_nomeProcesso_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        100);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail::_nomeProcesso_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        100);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail::_colorBKnomeProcesso_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail::_colorBKnomeProcesso_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail::_msgProcesso_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        150);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail::_msgProcesso_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        150);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail::_colorBKmsgProcesso_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail::_colorBKmsgProcesso_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetail &_tao_aggregate)
{
  net::etech::ProcesDetail::_tipoProcesso_forany _tao_aggregate_tipoProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_tipoProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_tipoProcesso_slice*> (
      #endif
          _tao_aggregate.tipoProcesso
        )
    );
  net::etech::ProcesDetail::_nomeProcesso_forany _tao_aggregate_nomeProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_nomeProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_nomeProcesso_slice*> (
      #endif
          _tao_aggregate.nomeProcesso
        )
    );
  net::etech::ProcesDetail::_colorBKnomeProcesso_forany _tao_aggregate_colorBKnomeProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_colorBKnomeProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_colorBKnomeProcesso_slice*> (
      #endif
          _tao_aggregate.colorBKnomeProcesso
        )
    );
  net::etech::ProcesDetail::_msgProcesso_forany _tao_aggregate_msgProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_msgProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_msgProcesso_slice*> (
      #endif
          _tao_aggregate.msgProcesso
        )
    );
  net::etech::ProcesDetail::_colorBKmsgProcesso_forany _tao_aggregate_colorBKmsgProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_colorBKmsgProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_colorBKmsgProcesso_slice*> (
      #endif
          _tao_aggregate.colorBKmsgProcesso
        )
    );
  return
    (strm << _tao_aggregate.idProcesso) &&
    (strm << _tao_aggregate_tipoProcesso) &&
    (strm << _tao_aggregate_nomeProcesso) &&
    (strm << _tao_aggregate_colorBKnomeProcesso) &&
    (strm << _tao_aggregate.param) &&
    (strm << _tao_aggregate.statusProcesso) &&
    (strm << _tao_aggregate.numRestartTime) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.flagSched)) &&
    (strm << _tao_aggregate_msgProcesso) &&
    (strm << _tao_aggregate_colorBKmsgProcesso);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetail &_tao_aggregate)
{
  net::etech::ProcesDetail::_tipoProcesso_forany _tao_aggregate_tipoProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_tipoProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_tipoProcesso_slice*> (
      #endif
          _tao_aggregate.tipoProcesso
        )
    );
  net::etech::ProcesDetail::_nomeProcesso_forany _tao_aggregate_nomeProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_nomeProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_nomeProcesso_slice*> (
      #endif
          _tao_aggregate.nomeProcesso
        )
    );
  net::etech::ProcesDetail::_colorBKnomeProcesso_forany _tao_aggregate_colorBKnomeProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_colorBKnomeProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_colorBKnomeProcesso_slice*> (
      #endif
          _tao_aggregate.colorBKnomeProcesso
        )
    );
  net::etech::ProcesDetail::_msgProcesso_forany _tao_aggregate_msgProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_msgProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_msgProcesso_slice*> (
      #endif
          _tao_aggregate.msgProcesso
        )
    );
  net::etech::ProcesDetail::_colorBKmsgProcesso_forany _tao_aggregate_colorBKmsgProcesso
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ProcesDetail::_colorBKmsgProcesso_slice*) (
      #else
      (const_cast<
          net::etech::ProcesDetail::_colorBKmsgProcesso_slice*> (
      #endif
          _tao_aggregate.colorBKmsgProcesso
        )
    );
  return
    (strm >> _tao_aggregate.idProcesso) &&
    (strm >> _tao_aggregate_tipoProcesso) &&
    (strm >> _tao_aggregate_nomeProcesso) &&
    (strm >> _tao_aggregate_colorBKnomeProcesso) &&
    (strm >> _tao_aggregate.param) &&
    (strm >> _tao_aggregate.statusProcesso) &&
    (strm >> _tao_aggregate.numRestartTime) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.flagSched)) &&
    (strm >> _tao_aggregate_msgProcesso) &&
    (strm >> _tao_aggregate_colorBKmsgProcesso);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_ProcesDetailSeq_CPP_
#define _TAO_CDR_OP_net_etech_ProcesDetailSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ProcesDetailSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ProcesDetailSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_ProcesDetailSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::tempoRis &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.giorno) &&
    (strm << _tao_aggregate.mese) &&
    (strm << _tao_aggregate.anno) &&
    (strm << _tao_aggregate.ore) &&
    (strm << _tao_aggregate.min);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::tempoRis &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.giorno) &&
    (strm >> _tao_aggregate.mese) &&
    (strm >> _tao_aggregate.anno) &&
    (strm >> _tao_aggregate.ore) &&
    (strm >> _tao_aggregate.min);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROC::_legami_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROC::_legami_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROC::_nome_proc_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        11);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROC::_nome_proc_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        11);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROC::_cmd_start_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        50);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROC::_cmd_start_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        50);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROC::_nome_fep_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROC::_nome_fep_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROC &_tao_aggregate)
{
  net::etech::CS_INFO_PROC::_legami_forany _tao_aggregate_legami
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_legami_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_legami_slice*> (
      #endif
          _tao_aggregate.legami
        )
    );
  net::etech::CS_INFO_PROC::_nome_proc_forany _tao_aggregate_nome_proc
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_nome_proc_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_nome_proc_slice*> (
      #endif
          _tao_aggregate.nome_proc
        )
    );
  net::etech::CS_INFO_PROC::_cmd_start_forany _tao_aggregate_cmd_start
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_cmd_start_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_cmd_start_slice*> (
      #endif
          _tao_aggregate.cmd_start
        )
    );
  net::etech::CS_INFO_PROC::_nome_fep_forany _tao_aggregate_nome_fep
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_nome_fep_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_nome_fep_slice*> (
      #endif
          _tao_aggregate.nome_fep
        )
    );
  return
    (strm << _tao_aggregate.tempo_proc) &&
    (strm << _tao_aggregate.flag_attiv) &&
    (strm << _tao_aggregate.flag_sched) &&
    (strm << _tao_aggregate.num_proc) &&
    (strm << _tao_aggregate_legami) &&
    (strm << _tao_aggregate.tipo_proc) &&
    (strm << _tao_aggregate.LastRestartTime) &&
    (strm << _tao_aggregate.NumRestartTimes) &&
    (strm << _tao_aggregate.ProcessPID) &&
    (strm << _tao_aggregate_nome_proc) &&
    (strm << _tao_aggregate_cmd_start) &&
    (strm << _tao_aggregate_nome_fep) &&
    (strm << _tao_aggregate.idFep);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROC &_tao_aggregate)
{
  net::etech::CS_INFO_PROC::_legami_forany _tao_aggregate_legami
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_legami_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_legami_slice*> (
      #endif
          _tao_aggregate.legami
        )
    );
  net::etech::CS_INFO_PROC::_nome_proc_forany _tao_aggregate_nome_proc
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_nome_proc_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_nome_proc_slice*> (
      #endif
          _tao_aggregate.nome_proc
        )
    );
  net::etech::CS_INFO_PROC::_cmd_start_forany _tao_aggregate_cmd_start
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_cmd_start_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_cmd_start_slice*> (
      #endif
          _tao_aggregate.cmd_start
        )
    );
  net::etech::CS_INFO_PROC::_nome_fep_forany _tao_aggregate_nome_fep
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_INFO_PROC::_nome_fep_slice*) (
      #else
      (const_cast<
          net::etech::CS_INFO_PROC::_nome_fep_slice*> (
      #endif
          _tao_aggregate.nome_fep
        )
    );
  return
    (strm >> _tao_aggregate.tempo_proc) &&
    (strm >> _tao_aggregate.flag_attiv) &&
    (strm >> _tao_aggregate.flag_sched) &&
    (strm >> _tao_aggregate.num_proc) &&
    (strm >> _tao_aggregate_legami) &&
    (strm >> _tao_aggregate.tipo_proc) &&
    (strm >> _tao_aggregate.LastRestartTime) &&
    (strm >> _tao_aggregate.NumRestartTimes) &&
    (strm >> _tao_aggregate.ProcessPID) &&
    (strm >> _tao_aggregate_nome_proc) &&
    (strm >> _tao_aggregate_cmd_start) &&
    (strm >> _tao_aggregate_nome_fep) &&
    (strm >> _tao_aggregate.idFep);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_CS_INFO_PROCSeq_CPP_
#define _TAO_CDR_OP_net_etech_CS_INFO_PROCSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_INFO_PROCSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_INFO_PROCSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_CS_INFO_PROCSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_BLOCK_LOG::_msg_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        132);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_BLOCK_LOG::_msg_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        132);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_BLOCK_LOG::_nome_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        40);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_BLOCK_LOG::_nome_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        40);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_BLOCK_LOG &_tao_aggregate)
{
  net::etech::CS_BLOCK_LOG::_msg_forany _tao_aggregate_msg
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_BLOCK_LOG::_msg_slice*) (
      #else
      (const_cast<
          net::etech::CS_BLOCK_LOG::_msg_slice*> (
      #endif
          _tao_aggregate.msg
        )
    );
  net::etech::CS_BLOCK_LOG::_nome_forany _tao_aggregate_nome
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_BLOCK_LOG::_nome_slice*) (
      #else
      (const_cast<
          net::etech::CS_BLOCK_LOG::_nome_slice*> (
      #endif
          _tao_aggregate.nome
        )
    );
  return
    (strm << _tao_aggregate.item) &&
    (strm << _tao_aggregate.block) &&
    (strm << _tao_aggregate.cod_err) &&
    (strm << _tao_aggregate.urgenza) &&
    (strm << _tao_aggregate.priorita) &&
    (strm << _tao_aggregate_msg) &&
    (strm << _tao_aggregate_nome) &&
    (strm << _tao_aggregate.idFep);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_BLOCK_LOG &_tao_aggregate)
{
  net::etech::CS_BLOCK_LOG::_msg_forany _tao_aggregate_msg
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_BLOCK_LOG::_msg_slice*) (
      #else
      (const_cast<
          net::etech::CS_BLOCK_LOG::_msg_slice*> (
      #endif
          _tao_aggregate.msg
        )
    );
  net::etech::CS_BLOCK_LOG::_nome_forany _tao_aggregate_nome
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::CS_BLOCK_LOG::_nome_slice*) (
      #else
      (const_cast<
          net::etech::CS_BLOCK_LOG::_nome_slice*> (
      #endif
          _tao_aggregate.nome
        )
    );
  return
    (strm >> _tao_aggregate.item) &&
    (strm >> _tao_aggregate.block) &&
    (strm >> _tao_aggregate.cod_err) &&
    (strm >> _tao_aggregate.urgenza) &&
    (strm >> _tao_aggregate.priorita) &&
    (strm >> _tao_aggregate_msg) &&
    (strm >> _tao_aggregate_nome) &&
    (strm >> _tao_aggregate.idFep);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_CS_BLOCK_LOGSeq_CPP_
#define _TAO_CDR_OP_net_etech_CS_BLOCK_LOGSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::CS_BLOCK_LOGSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::CS_BLOCK_LOGSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_CS_BLOCK_LOGSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO::_user_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO::_user_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO::_path_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        257);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO::_path_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        257);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO::_filter_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        15);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO::_filter_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        15);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO::_frequence_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO::_frequence_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO::_path_log_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        257);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO::_path_log_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        257);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFO &_tao_aggregate)
{
  net::etech::GARBAGE_INFO::_user_forany _tao_aggregate_user
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_user_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_user_slice*> (
      #endif
          _tao_aggregate.user
        )
    );
  net::etech::GARBAGE_INFO::_path_forany _tao_aggregate_path
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_path_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_path_slice*> (
      #endif
          _tao_aggregate.path
        )
    );
  net::etech::GARBAGE_INFO::_filter_forany _tao_aggregate_filter
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_filter_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_filter_slice*> (
      #endif
          _tao_aggregate.filter
        )
    );
  net::etech::GARBAGE_INFO::_frequence_forany _tao_aggregate_frequence
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_frequence_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_frequence_slice*> (
      #endif
          _tao_aggregate.frequence
        )
    );
  net::etech::GARBAGE_INFO::_path_log_forany _tao_aggregate_path_log
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_path_log_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_path_log_slice*> (
      #endif
          _tao_aggregate.path_log
        )
    );
  return
    (strm << _tao_aggregate_user) &&
    (strm << _tao_aggregate_path) &&
    (strm << _tao_aggregate_filter) &&
    (strm << _tao_aggregate_frequence) &&
    (strm << _tao_aggregate_path_log);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFO &_tao_aggregate)
{
  net::etech::GARBAGE_INFO::_user_forany _tao_aggregate_user
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_user_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_user_slice*> (
      #endif
          _tao_aggregate.user
        )
    );
  net::etech::GARBAGE_INFO::_path_forany _tao_aggregate_path
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_path_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_path_slice*> (
      #endif
          _tao_aggregate.path
        )
    );
  net::etech::GARBAGE_INFO::_filter_forany _tao_aggregate_filter
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_filter_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_filter_slice*> (
      #endif
          _tao_aggregate.filter
        )
    );
  net::etech::GARBAGE_INFO::_frequence_forany _tao_aggregate_frequence
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_frequence_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_frequence_slice*> (
      #endif
          _tao_aggregate.frequence
        )
    );
  net::etech::GARBAGE_INFO::_path_log_forany _tao_aggregate_path_log
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GARBAGE_INFO::_path_log_slice*) (
      #else
      (const_cast<
          net::etech::GARBAGE_INFO::_path_log_slice*> (
      #endif
          _tao_aggregate.path_log
        )
    );
  return
    (strm >> _tao_aggregate_user) &&
    (strm >> _tao_aggregate_path) &&
    (strm >> _tao_aggregate_filter) &&
    (strm >> _tao_aggregate_frequence) &&
    (strm >> _tao_aggregate_path_log);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_GARBAGE_INFOSeq_CPP_
#define _TAO_CDR_OP_net_etech_GARBAGE_INFOSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GARBAGE_INFOSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GARBAGE_INFOSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_GARBAGE_INFOSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_CAT::_name_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        29);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_CAT::_name_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        29);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_CAT &_tao_aggregate)
{
  net::etech::ACQ_CAT::_name_forany _tao_aggregate_name
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_CAT::_name_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_CAT::_name_slice*> (
      #endif
          _tao_aggregate.name
        )
    );
  return
    (strm << _tao_aggregate_name) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.processedOK));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_CAT &_tao_aggregate)
{
  net::etech::ACQ_CAT::_name_forany _tao_aggregate_name
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_CAT::_name_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_CAT::_name_slice*> (
      #endif
          _tao_aggregate.name
        )
    );
  return
    (strm >> _tao_aggregate_name) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.processedOK));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_ACQ_CATSeq_CPP_
#define _TAO_CDR_OP_net_etech_ACQ_CATSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_CATSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_CATSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_ACQ_CATSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_PEB_MGR::_processing_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        29);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_PEB_MGR::_processing_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        29);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_PEB_MGR::_PEBName_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        128);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_PEB_MGR::_PEBName_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        128);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::ACQ_PEB_MGR &_tao_aggregate)
{
  net::etech::ACQ_PEB_MGR::_processing_forany _tao_aggregate_processing
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_PEB_MGR::_processing_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_PEB_MGR::_processing_slice*> (
      #endif
          _tao_aggregate.processing
        )
    );
  net::etech::ACQ_PEB_MGR::_PEBName_forany _tao_aggregate_PEBName
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_PEB_MGR::_PEBName_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_PEB_MGR::_PEBName_slice*> (
      #endif
          _tao_aggregate.PEBName
        )
    );
  return
    (strm << _tao_aggregate_processing) &&
    (strm << _tao_aggregate.drFileProg) &&
    (strm << _tao_aggregate.drFileRemaining) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.startWithRestart)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.restartWithCacheFlush)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.pauseAcqCat)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.twoDaysRun)) &&
    (strm << _tao_aggregate.acqCatPid) &&
    (strm << _tao_aggregate_PEBName) &&
    (strm << _tao_aggregate.processedVector);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::ACQ_PEB_MGR &_tao_aggregate)
{
  net::etech::ACQ_PEB_MGR::_processing_forany _tao_aggregate_processing
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_PEB_MGR::_processing_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_PEB_MGR::_processing_slice*> (
      #endif
          _tao_aggregate.processing
        )
    );
  net::etech::ACQ_PEB_MGR::_PEBName_forany _tao_aggregate_PEBName
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::ACQ_PEB_MGR::_PEBName_slice*) (
      #else
      (const_cast<
          net::etech::ACQ_PEB_MGR::_PEBName_slice*> (
      #endif
          _tao_aggregate.PEBName
        )
    );
  return
    (strm >> _tao_aggregate_processing) &&
    (strm >> _tao_aggregate.drFileProg) &&
    (strm >> _tao_aggregate.drFileRemaining) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.startWithRestart)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.restartWithCacheFlush)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.pauseAcqCat)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.twoDaysRun)) &&
    (strm >> _tao_aggregate.acqCatPid) &&
    (strm >> _tao_aggregate_PEBName) &&
    (strm >> _tao_aggregate.processedVector);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD::_nomeNodo_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        50);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD::_nomeNodo_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        50);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD::_oggetto_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        100);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD::_oggetto_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        100);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD::_login_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        50);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD::_login_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        50);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD::_pswd_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        50);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD::_pswd_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        50);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD::_dataScadenza_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        9);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD::_dataScadenza_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        9);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWD &_tao_aggregate)
{
  net::etech::GESTIONE_PSWD::_nomeNodo_forany _tao_aggregate_nomeNodo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_nomeNodo_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_nomeNodo_slice*> (
      #endif
          _tao_aggregate.nomeNodo
        )
    );
  net::etech::GESTIONE_PSWD::_oggetto_forany _tao_aggregate_oggetto
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_oggetto_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_oggetto_slice*> (
      #endif
          _tao_aggregate.oggetto
        )
    );
  net::etech::GESTIONE_PSWD::_login_forany _tao_aggregate_login
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_login_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_login_slice*> (
      #endif
          _tao_aggregate.login
        )
    );
  net::etech::GESTIONE_PSWD::_pswd_forany _tao_aggregate_pswd
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_pswd_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_pswd_slice*> (
      #endif
          _tao_aggregate.pswd
        )
    );
  net::etech::GESTIONE_PSWD::_dataScadenza_forany _tao_aggregate_dataScadenza
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_dataScadenza_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_dataScadenza_slice*> (
      #endif
          _tao_aggregate.dataScadenza
        )
    );
  return
    (strm << _tao_aggregate_nomeNodo) &&
    (strm << _tao_aggregate_oggetto) &&
    (strm << _tao_aggregate_login) &&
    (strm << _tao_aggregate_pswd) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.validita)) &&
    (strm << _tao_aggregate_dataScadenza) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.flag));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWD &_tao_aggregate)
{
  net::etech::GESTIONE_PSWD::_nomeNodo_forany _tao_aggregate_nomeNodo
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_nomeNodo_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_nomeNodo_slice*> (
      #endif
          _tao_aggregate.nomeNodo
        )
    );
  net::etech::GESTIONE_PSWD::_oggetto_forany _tao_aggregate_oggetto
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_oggetto_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_oggetto_slice*> (
      #endif
          _tao_aggregate.oggetto
        )
    );
  net::etech::GESTIONE_PSWD::_login_forany _tao_aggregate_login
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_login_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_login_slice*> (
      #endif
          _tao_aggregate.login
        )
    );
  net::etech::GESTIONE_PSWD::_pswd_forany _tao_aggregate_pswd
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_pswd_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_pswd_slice*> (
      #endif
          _tao_aggregate.pswd
        )
    );
  net::etech::GESTIONE_PSWD::_dataScadenza_forany _tao_aggregate_dataScadenza
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((net::etech::GESTIONE_PSWD::_dataScadenza_slice*) (
      #else
      (const_cast<
          net::etech::GESTIONE_PSWD::_dataScadenza_slice*> (
      #endif
          _tao_aggregate.dataScadenza
        )
    );
  return
    (strm >> _tao_aggregate_nomeNodo) &&
    (strm >> _tao_aggregate_oggetto) &&
    (strm >> _tao_aggregate_login) &&
    (strm >> _tao_aggregate_pswd) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.validita)) &&
    (strm >> _tao_aggregate_dataScadenza) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.flag));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_net_etech_GESTIONE_PSWDSeq_CPP_
#define _TAO_CDR_OP_net_etech_GESTIONE_PSWDSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::GESTIONE_PSWDSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::GESTIONE_PSWDSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_net_etech_GESTIONE_PSWDSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ConfigMonitorServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ConfigMonitorServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ConfigMonitorServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ProcessMonitorServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ProcessMonitorServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ProcessMonitorServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ACQPebMGRServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ACQPebMGRServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ACQPebMGRServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::GarbageMonitorServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::GarbageMonitorServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::GarbageMonitorServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::PsMonitorMasterServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::PsMonitorMasterServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::PsMonitorMasterServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::DBConfigurationServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::DBConfigurationServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::DBConfigurationServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ssm_scheduler_server_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ssm_scheduler_server_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ssm_scheduler_server RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ssm_logger_server_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ssm_logger_server_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ssm_logger_server RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const net::etech::SSM::ssm_garbage_server_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    net::etech::SSM::ssm_garbage_server_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::net::etech::SSM::ssm_garbage_server RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



