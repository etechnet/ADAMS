/*
 * ADAMS_JF_TransferConf.java
 *
 * Created on 20 dicembre 2005, 11.27
 */

/**
 *
 * @author  luca
 */
import java.awt.Cursor;
import java.sql.*;
public class ADAMS_JF_TransferConf extends javax.swing.JDialog implements Runnable {

    /** Creates new form ADAMS_JF_TransferConf */
    public ADAMS_JF_TransferConf(javax.swing.JFrame parent ,String str_ConfigName, boolean isConfigIndex) {
        super(parent,true);
        
        this.frameParent = parent;
        
        this.IS_CONF_INDEX = isConfigIndex;
        
        initComponents();
        this.Config_name = str_ConfigName;
        jLabel1.setText("Transfer Configuration: "+this.Config_name);
        
        jT.setDocument(new JTextFieldFilter(JTextFieldFilter.ALPHA_NUMERIC_SOMESYMBOLS,160));
        
        
        if(isConfigIndex == false)
        {
            // ***  NAME_FILE configurazione NTM ***
            String sel_fileName = "select FILE_NAME_CONF from tab_info_config"+
                                    " where TIPO_DI_CONFIGURAZIONE = '"+Config_name+"' "; 
            String strLastFileName = ADAMS_GlobalParam.connect_Oracle.Query_s(sel_fileName);

            ADAMS_GlobalParam.strLastFileName=strLastFileName;
            
            if(strLastFileName.trim().length() != 0)
                jT.setText(strLastFileName);
            else
                jT.setText(Config_name);

            if(jT.getText().trim().length() == 0)
                jB_send.setEnabled(false);   
            
            jP_TOT.remove(jP_DateIndex);
            
            setCenteredFrame(480,260);    
        }
        else
        {        
            // ***  Configurazione INDICE .... NAME_FILE INDEX ***
            String select_Index_ID = "select ID_INDICE from tab_info_config"+
                                        " where TIPO_DI_CONFIGURAZIONE = '"+Config_name+"' ";
            String INDICE_CONF_INDEX = ADAMS_GlobalParam.connect_Oracle.Query_s(select_Index_ID);

            String sel_fileNameINDEX = "select NOME_FILE from  l_index_lib where ID_INDICE = "+INDICE_CONF_INDEX+""; 
            indexFileName = ADAMS_GlobalParam.connect_Oracle.Query_s(sel_fileNameINDEX);
            
            jT.setEditable(false);
            jT.setText(indexFileName);            
            
            setCenteredFrame(480,320);    
            
            if(indexFileName.length() == 0)
                System.out.println("Errore: Attenzione manca il nome del file per la Configurazione INDEX");
        }
        
        
        
        jT.setFont(ADAMS_GlobalParam.font_B11);
        jL.setFont(ADAMS_GlobalParam.font_B11);
        jLabel1.setFont(ADAMS_GlobalParam.font_B12);
        jL_status.setFont(ADAMS_GlobalParam.font_B10);
        
        
        //TRASFER CONFIGURATION INDEX 
        jLabel8.setFont(ADAMS_GlobalParam.font_B10);
        jLabel9.setFont(ADAMS_GlobalParam.font_B10);
        
        jTF_DD_Start.setFont(ADAMS_GlobalParam.font_B10);
        jTF_MM_Start.setFont(ADAMS_GlobalParam.font_B10);
        jTF_YY_Start.setFont(ADAMS_GlobalParam.font_B10);
        jTF_DD_Start.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,2));
        jTF_MM_Start.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,2));
        jTF_YY_Start.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,4));
        
        jTF_DD_End.setFont(ADAMS_GlobalParam.font_B10);
        jTF_MM_End.setFont(ADAMS_GlobalParam.font_B10);
        jTF_YY_End.setFont(ADAMS_GlobalParam.font_B10);
        jTF_DD_End.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,2));
        jTF_MM_End.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,2));
        jTF_YY_End.setDocument(new JTextFieldFilter(JTextFieldFilter.NUMERIC,4));
        
        /////////////////
        
        
        jB_send.setCursor(Cur_hand);
        jB_close.setCursor(Cur_hand);
        
        if(this.IS_CONF_INDEX)
            jB_verify.setVisible(false);
        else
            jB_verify.setCursor(Cur_hand);
        
        //show();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_TOT = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jP_DateIndex = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTF_DD_Start = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTF_MM_Start = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTF_YY_Start = new javax.swing.JTextField();
        jB_Cal_start = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTF_DD_End = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTF_MM_End = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTF_YY_End = new javax.swing.JTextField();
        jB_Cal_end = new javax.swing.JButton();
        jP_button = new javax.swing.JPanel();
        jB_verify = new javax.swing.JButton();
        jB_send = new javax.swing.JButton();
        jB_close = new javax.swing.JButton();
        jT = new javax.swing.JTextField();
        jL = new javax.swing.JLabel();
        jL_status = new javax.swing.JLabel();
        jLed = new javax.swing.JLabel();
        
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("NTM Configurator Transfer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        jP_TOT.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jP_TOT.setBackground(new java.awt.Color(230, 230, 230));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/transfer_conf.png")));
        jLabel1.setText("Transfer Configuration");
        jLabel1.setMinimumSize(new java.awt.Dimension(26, 48));
        jLabel1.setPreferredSize(new java.awt.Dimension(26, 48));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints1.weightx = 1.0;
        jP_TOT.add(jLabel1, gridBagConstraints1);
        
        jProgressBar1.setForeground(java.awt.Color.blue);
        jProgressBar1.setMinimumSize(new java.awt.Dimension(10, 25));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(148, 25));
        jProgressBar1.setStringPainted(true);
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(2, 4, 17, 20);
        gridBagConstraints1.weightx = 1.0;
        jP_TOT.add(jProgressBar1, gridBagConstraints1);
        
        jP_DateIndex.setBackground(new java.awt.Color(230, 230, 230));
        jP_DateIndex.setMinimumSize(new java.awt.Dimension(10, 60));
        jP_DateIndex.setPreferredSize(new java.awt.Dimension(10, 60));
        jPanel3.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        
        jPanel3.setBackground(new java.awt.Color(230, 230, 230));
        jTF_DD_Start.setEditable(false);
        jTF_DD_Start.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_DD_Start.setToolTipText("Day (DD)");
        jTF_DD_Start.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_DD_Start.setMinimumSize(new java.awt.Dimension(26, 22));
        jTF_DD_Start.setPreferredSize(new java.awt.Dimension(26, 22));
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 0;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 1, 0, 1);
        gridBagConstraints2.weightx = 0.25;
        jPanel3.add(jTF_DD_Start, gridBagConstraints2);
        
        jLabel11.setText("/");
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 1;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel3.add(jLabel11, gridBagConstraints2);
        
        jTF_MM_Start.setEditable(false);
        jTF_MM_Start.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_MM_Start.setToolTipText("Month (MM)");
        jTF_MM_Start.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_MM_Start.setMinimumSize(new java.awt.Dimension(26, 22));
        jTF_MM_Start.setPreferredSize(new java.awt.Dimension(26, 22));
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 2;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.weightx = 0.25;
        jPanel3.add(jTF_MM_Start, gridBagConstraints2);
        
        jLabel12.setText("/");
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 3;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel12, gridBagConstraints2);
        
        jTF_YY_Start.setEditable(false);
        jTF_YY_Start.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_YY_Start.setToolTipText("Year (YYYY)");
        jTF_YY_Start.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_YY_Start.setMinimumSize(new java.awt.Dimension(30, 22));
        jTF_YY_Start.setPreferredSize(new java.awt.Dimension(30, 22));
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 4;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.weightx = 0.5;
        jPanel3.add(jTF_YY_Start, gridBagConstraints2);
        
        jB_Cal_start.setBackground(new java.awt.Color(230, 230, 230));
        jB_Cal_start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vcalendar.png")));
        jB_Cal_start.setBorderPainted(false);
        jB_Cal_start.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_Cal_start.setMinimumSize(new java.awt.Dimension(22, 22));
        jB_Cal_start.setPreferredSize(new java.awt.Dimension(22, 22));
        jB_Cal_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Cal_startActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 5;
        gridBagConstraints2.gridy = 1;
        gridBagConstraints2.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel3.add(jB_Cal_start, gridBagConstraints2);
        
        jLabel8.setBackground(new java.awt.Color(230, 230, 230));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Date Start (DDMMYYYY)");
        jLabel8.setToolTipText("");
        jLabel8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel8.setMaximumSize(new java.awt.Dimension(160, 22));
        jLabel8.setMinimumSize(new java.awt.Dimension(160, 22));
        jLabel8.setPreferredSize(new java.awt.Dimension(160, 22));
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel8.setOpaque(true);
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx = 0;
        gridBagConstraints2.gridy = 0;
        gridBagConstraints2.gridwidth = 6;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 0, 2, 2);
        gridBagConstraints2.weightx = 1.0;
        jPanel3.add(jLabel8, gridBagConstraints2);
        
        jP_DateIndex.add(jPanel3);
        
        jPanel4.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints3;
        
        jPanel4.setBackground(new java.awt.Color(230, 230, 230));
        jLabel9.setBackground(new java.awt.Color(230, 230, 230));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Date End (DDMMYYYY)");
        jLabel9.setToolTipText("");
        jLabel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel9.setMaximumSize(new java.awt.Dimension(160, 22));
        jLabel9.setMinimumSize(new java.awt.Dimension(160, 22));
        jLabel9.setPreferredSize(new java.awt.Dimension(160, 22));
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel9.setOpaque(true);
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 0;
        gridBagConstraints3.gridwidth = 6;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints3.insets = new java.awt.Insets(0, 0, 2, 2);
        gridBagConstraints3.weightx = 1.0;
        jPanel4.add(jLabel9, gridBagConstraints3);
        
        jTF_DD_End.setEditable(false);
        jTF_DD_End.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_DD_End.setToolTipText("Day (DD)");
        jTF_DD_End.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_DD_End.setMinimumSize(new java.awt.Dimension(26, 22));
        jTF_DD_End.setPreferredSize(new java.awt.Dimension(26, 22));
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints3.weightx = 0.25;
        jPanel4.add(jTF_DD_End, gridBagConstraints3);
        
        jLabel13.setText("/");
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 1;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jLabel13, gridBagConstraints3);
        
        jTF_MM_End.setEditable(false);
        jTF_MM_End.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_MM_End.setToolTipText("Month (MM)");
        jTF_MM_End.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_MM_End.setMinimumSize(new java.awt.Dimension(26, 22));
        jTF_MM_End.setPreferredSize(new java.awt.Dimension(26, 22));
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 2;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints3.weightx = 0.25;
        jPanel4.add(jTF_MM_End, gridBagConstraints3);
        
        jLabel10.setText("/");
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 3;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jLabel10, gridBagConstraints3);
        
        jTF_YY_End.setEditable(false);
        jTF_YY_End.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_YY_End.setToolTipText("Year (YYYY)");
        jTF_YY_End.setDisabledTextColor(java.awt.Color.lightGray);
        jTF_YY_End.setMinimumSize(new java.awt.Dimension(30, 22));
        jTF_YY_End.setPreferredSize(new java.awt.Dimension(30, 22));
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 4;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints3.weightx = 0.5;
        jPanel4.add(jTF_YY_End, gridBagConstraints3);
        
        jB_Cal_end.setBackground(new java.awt.Color(230, 230, 230));
        jB_Cal_end.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vcalendar.png")));
        jB_Cal_end.setBorderPainted(false);
        jB_Cal_end.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_Cal_end.setMinimumSize(new java.awt.Dimension(22, 22));
        jB_Cal_end.setPreferredSize(new java.awt.Dimension(22, 22));
        jB_Cal_end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Cal_endActionPerformed(evt);
            }
        });
        
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 5;
        gridBagConstraints3.gridy = 1;
        gridBagConstraints3.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanel4.add(jB_Cal_end, gridBagConstraints3);
        
        jP_DateIndex.add(jPanel4);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 4;
        gridBagConstraints1.gridwidth = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(8, 0, 0, 0);
        jP_TOT.add(jP_DateIndex, gridBagConstraints1);
        
        jP_button.setBackground(new java.awt.Color(230, 230, 230));
        jB_verify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_verify.jpg")));
        jB_verify.setToolTipText("Verify Limits Configuration");
        jB_verify.setBorderPainted(false);
        jB_verify.setContentAreaFilled(false);
        jB_verify.setFocusPainted(false);
        jB_verify.setMaximumSize(new java.awt.Dimension(100, 22));
        jB_verify.setMinimumSize(new java.awt.Dimension(100, 22));
        jB_verify.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_verify.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_verify_press.jpg")));
        jB_verify.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_verify_over.jpg")));
        jB_verify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_verifyActionPerformed(evt);
            }
        });
        
        jP_button.add(jB_verify);
        
        jB_send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_send.jpg")));
        jB_send.setBorderPainted(false);
        jB_send.setContentAreaFilled(false);
        jB_send.setFocusPainted(false);
        jB_send.setMaximumSize(new java.awt.Dimension(100, 22));
        jB_send.setMinimumSize(new java.awt.Dimension(100, 22));
        jB_send.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_send.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_send_press.jpg")));
        jB_send.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_send_over.jpg")));
        jB_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_sendActionPerformed(evt);
            }
        });
        
        jP_button.add(jB_send);
        
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg")));
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setMaximumSize(new java.awt.Dimension(100, 22));
        jB_close.setMinimumSize(new java.awt.Dimension(100, 22));
        jB_close.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_press.jpg")));
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_over.jpg")));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        jP_button.add(jB_close);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 5;
        gridBagConstraints1.gridwidth = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.ipady = 5;
        gridBagConstraints1.insets = new java.awt.Insets(18, 3, 3, 3);
        jP_TOT.add(jP_button, gridBagConstraints1);
        
        jT.setMinimumSize(new java.awt.Dimension(50, 20));
        jT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTKeyReleased(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(4, 4, 4, 20);
        jP_TOT.add(jT, gridBagConstraints1);
        
        jL.setText("Save as");
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.insets = new java.awt.Insets(4, 10, 4, 4);
        jP_TOT.add(jL, gridBagConstraints1);
        
        jL_status.setMinimumSize(new java.awt.Dimension(45, 25));
        jL_status.setPreferredSize(new java.awt.Dimension(45, 25));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridwidth = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(2, 10, 2, 10);
        jP_TOT.add(jL_status, gridBagConstraints1);
        
        jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledoff.png")));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets(2, 10, 17, 4);
        jP_TOT.add(jLed, gridBagConstraints1);
        
        getContentPane().add(jP_TOT);
        
        pack();
    }//GEN-END:initComponents

    private void jB_Cal_endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Cal_endActionPerformed
        if(cal_end != null)
            cal_end.dispose();
        
        cal_end = new ADAMS_Calendar("Select End Date",jTF_DD_End,jTF_MM_End,jTF_YY_End,frameParent);
    }//GEN-LAST:event_jB_Cal_endActionPerformed

    private void jB_Cal_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Cal_startActionPerformed
        if(cal_start != null)
            cal_start.dispose();
        
        cal_start = new ADAMS_Calendar("Select Start Date",jTF_DD_Start,jTF_MM_Start,jTF_YY_Start,frameParent);        
    }//GEN-LAST:event_jB_Cal_startActionPerformed

    private void jB_verifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_verifyActionPerformed

        OPERATION_TH = VERIFY_LIMITS;        
        TH = null;
        TH = new Thread(this,"verify_Limits");
        TH.start();  
                
    }//GEN-LAST:event_jB_verifyActionPerformed

    private void jTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTKeyReleased
        if(jT.getText().trim().length() == 0)
            jB_send.setEnabled(false);
        else
            jB_send.setEnabled(true);            
    }//GEN-LAST:event_jTKeyReleased

    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
        closeFrame(); 
    }//GEN-LAST:event_jB_closeActionPerformed

    private void jB_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_sendActionPerformed
        
        if(this.IS_CONF_INDEX)
            OPERATION_TH = TRANSFER_INDEX;
        else                
            OPERATION_TH = TRANSFER;
        
        TH = null;
        TH = new Thread(this,"jB_send_transfer");
        TH.start();  
    }//GEN-LAST:event_jB_sendActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
       closeFrame();       
    }//GEN-LAST:event_exitForm
 
    private void closeFrame()
    {
        if(TH_WORKING == false)
            dispose();      
    }
    
    
    private String getToday()
    {
        // ***** TODAY ***
        java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        String zero = "";

        // YEAR
        String str_today = ""+calendar.get(java.util.Calendar.YEAR);

        // MONTH
        zero = "";
        int month = calendar.get(java.util.Calendar.MONTH);
        String strMM = new String(""+(month+1));
        if((strMM.length() == 1))
            zero ="0";

        str_today += ""+zero+strMM;

        // DAY
        zero = "";
        String strDay = new String(""+calendar.get(java.util.Calendar.DAY_OF_MONTH));
        if((strDay.length() == 1))
            zero ="0";

        str_today += (""+zero+strDay);
        return str_today;
    }
    
    public void run()
    {
        TH_WORKING = true;
             
        //Lock Table
        if(ADAMS_GlobalParam.ctrl_LOCK_TABLE(false) == false)
        {
            TH_WORKING = false;
            this.setCursor(Cur_default);
            return;
        }

        if(OPERATION_TH == TRANSFER_INDEX)
        {
            //System.out.println("TRANSFER_INDEX");
            
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledyellow.png")));
                        
            jProgressBar1.setForeground(java.awt.Color.blue);

            jProgressBar1.setValue(5);
            jProgressBar1.setString("5%");

            jB_send.setEnabled(false);
            jB_close.setEnabled(false);
            jB_verify.setEnabled(false);
            jT.setEnabled(false);
            jL.setEnabled(false);
            
            jProgressBar1.setValue(15);
            jProgressBar1.setString("15%");
            
            ADAMS_storeConfig ntmMasterServer_1 = new ADAMS_storeConfig();
            ntmMasterServer_1.set_config_NAME_ALIAS(Config_name);
            
            jL_status.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/time_animated.gif")));
            jL_status.setText("Load Configuration Input Data for Index...");
            
            ntmMasterServer_1.get_DRCONFIG_INDEX(); 
            
            jProgressBar1.setValue(50);
            jProgressBar1.setString("50%");

            boolean OK_DATASTART = false;
                        
            //DATA START
            String dataStart ="";
            if(jTF_DD_Start.getText().length() > 0 )
            {
                dataStart = jTF_YY_Start.getText()+""+jTF_MM_Start.getText()+""+jTF_DD_Start.getText();
                OK_DATASTART =true;
            }
                                                                                                                               
            //DATA END
            String dataEnd = "";
            if(jTF_DD_End.getText().length() > 0 )
            {
                dataEnd = jTF_YY_End.getText()+""+jTF_MM_End.getText()+""+jTF_DD_End.getText();
                if(OK_DATASTART == false)
                    dataStart = getToday();
            }
            else if(OK_DATASTART == true)
                dataEnd = getToday();
            
            //System.out.println("-- dataStart "+dataStart);
            //System.out.println("-- dataEnd   "+dataEnd);
            
            ntmMasterServer_1.store_ADAMSConfIG_INDEX(indexFileName,dataStart,dataEnd);
            
            jProgressBar1.setValue(100);
            jProgressBar1.setString("Transfer 100% Done.");
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledgreen.png")));

            jL_status.setIcon(null);
            jL_status.setText("");

            jProgressBar1.setForeground(java.awt.Color.green.darker());

        }        
        else if(OPERATION_TH == TRANSFER)
        {
            //System.out.println("TRANSFER NORMAL CONF");
            String nameFileConf = jT.getText().trim();
            
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledred.png")));
            if( verifyLimits(false) == true) 
            {
                jB_send.setEnabled(true);
                jB_close.setEnabled(true);
                jB_verify.setEnabled(true);
                jT.setEnabled(true);
                jL.setEnabled(true);
                
                jProgressBar1.setValue(100);
                jProgressBar1.setString("Transfer Interrupted...");
                
                jL_status.setIcon(null);
                jL_status.setText("Verify Limits Failure.");

                jProgressBar1.setForeground(java.awt.Color.red); 
                
                ADAMS_GlobalParam.optionPanel(this,"   Verify Limits Failure...\n   Configuration Transfer Interrupted.","ERROR",1);                

                this.setCursor(Cur_default);
                TH_WORKING = false;
                return;
            }
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledyellow.png")));
            
            
            int pointExtension = nameFileConf.indexOf('.');

            if(pointExtension == -1)
            {        
                ADAMS_JD_Message op1 = new ADAMS_JD_Message(this,true,"Extension (.ADAMSConfig) not found in file name.\nProceed anyway ?","Warning",5,300,180);
                int YesNo = op1.getAnswer();
                if(YesNo == 0)
                {
                    this.setCursor(Cur_default);
                    TH_WORKING = false;
                    return;
                }
            }

            this.setCursor(Cur_wait);
            jProgressBar1.setForeground(java.awt.Color.blue);

            jProgressBar1.setValue(5);
            jProgressBar1.setString("5%");

            jB_send.setEnabled(false);
            jB_close.setEnabled(false);
            jB_verify.setEnabled(false);
            jT.setEnabled(false);
            jL.setEnabled(false);
            
            ADAMS_storeConfig ntmMasterServer = new ADAMS_storeConfig();

            jL_status.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/time_animated.gif")));

            jProgressBar1.setValue(15);
            jProgressBar1.setString("15%");

            jL_status.setText("Start Transfer...");
            ntmMasterServer.set_config_NAME_ALIAS(Config_name);

            jProgressBar1.setValue(20);
            jProgressBar1.setString("Transfer 20%");

            jL_status.setText("Load Configuration Scripts...");
            ntmMasterServer.get_SCRIPTCONFIG();         //Raffo

            jProgressBar1.setValue(40);
            jProgressBar1.setString("Transfer 40%");

            jL_status.setText("Load Configuration Exceptions...");
            ntmMasterServer.get_EXCEPTIONCONFIG();      //Luca

            jProgressBar1.setValue(45);
            jProgressBar1.setString("Transfer 45%");

            ntmMasterServer.get_USERCONFIG();           //Raffo

            jProgressBar1.setValue(50);
            jProgressBar1.setString("Transfer 50%");

            jL_status.setText("Load Configuration Input Data...");
            ntmMasterServer.get_DRCONFIG();            //Raffo

            jProgressBar1.setValue(65);
            jProgressBar1.setString("Transfer 65%");

            jL_status.setText("Load Configuration Global Options...");
            ntmMasterServer.get_GLOBALOPT();            //Luca

            jProgressBar1.setValue(70);
            jProgressBar1.setString("Transfer 70%");

            boolean ADD_FREE_RELATION = true;
            jL_status.setText("Load Configuration Traffic Elements...");
            ntmMasterServer.get_ADAMSConfIG(jL_status,ADD_FREE_RELATION);            //Luca

            jProgressBar1.setValue(75);
            jProgressBar1.setString("Transfer 75%");

            jL_status.setText("Load Configuration Analysis...");
            ntmMasterServer.get_ANALISICONFIG();        //Luca
            
            jL_status.setText("Load Configuration Counters...");
            ntmMasterServer.get_COUNTERKIT();           //Luca
            
            jProgressBar1.setValue(80);
            jProgressBar1.setString("Transfer 80%");

            jL_status.setText("Load Configuration Report...");
            ntmMasterServer.get_REPORTCONFIG();         //Raffo 

            jProgressBar1.setValue(85);
            jProgressBar1.setString("Transfer 85%");
          
            jProgressBar1.setValue(85);
            jProgressBar1.setString("Transfer 85%");
            
            //********** ALLARMI 
            
            jL_status.setText("Load Configuration Alarm...");
            ntmMasterServer.get_AlarmCONFIG();         //Luca
            
            jProgressBar1.setValue(90);
            jProgressBar1.setString("Transfer 90%");
            
            //********** ALLARMI 
            
            //Attenzione questo metodo va chiamato per ultimo altrimenti non legge tutti i plugin presenti
            jL_status.setText("Load Configuration Plugins...");
            ntmMasterServer.get_PLUGINCONFIG();         //Luca

            jProgressBar1.setValue(95);
            jProgressBar1.setString("Transfer 95%");
            ///////////////////////
            
            ///// ------------------ 
           /* System.out.println("-----------");
            System.out.println("--> Numero relazazioni "+ntmMasterServer.ntmComplete.relationSequence.length);
            for(int prn=0; prn<ntmMasterServer.ntmComplete.relationSequence.length; prn++)
            {
            	System.out.println();
            	System.out.println("---> idRelation -->"+ntmMasterServer.ntmComplete.relationSequence[prn].idRelation);
            	System.out.println("---> freeFormat -->"+ntmMasterServer.ntmComplete.relationSequence[prn].freeFormat);
            	
            	if(ntmMasterServer.ntmComplete.relationSequence[prn].idRelation == ADAMS_GlobalParam._RELATION_FREEFORMAT_ID ) // -5
            	{
	            	for(int prn1=0; prn1<ntmMasterServer.ntmComplete.relationSequence[prn].restrictions.length; prn1++)
	            	{
	            		System.out.println("-------> Default RESTRICTION -->"+ntmMasterServer.ntmComplete.relationSequence[prn].restrictions[prn1]);
	            	}
            	}
            }
            System.out.println("------------");*/
            //// -------------------
            
            //System.out.println("*********************** STORE CONFIG **********************");

            //System.out.println("PRIMA - ntmMasterServer.store_ADAMSConfIG(nameFileConf)");
            boolean status_transfer = ntmMasterServer.store_ADAMSConfIG(nameFileConf);
            //System.out.println("DOPO - ntmMasterServer.store_ADAMSConfIG(nameFileConf)");
            
            //System.out.println("***********************************************************");


            if(status_transfer == false) 
            {
                jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledred.png")));
                jB_send.setEnabled(true);
                jB_close.setEnabled(true);
                jB_verify.setEnabled(true);
                jT.setEnabled(true);
                jL.setEnabled(true);
                
                jProgressBar1.setValue(100);
                jProgressBar1.setString("Configuration Transfer Failure.!");
                
                jL_status.setIcon(null);
                jL_status.setText("Transfer Failure.");

                jProgressBar1.setForeground(java.awt.Color.red); 
                
                ADAMS_GlobalParam.optionPanel(this,"Configuration Transfer Failure.","ERROR",1);                

                this.setCursor(Cur_default);
                TH_WORKING = false;
                return;
            }
            
            // ----- SAVE_FILE_NAME -----
            String str_updateFileName = ("update tab_info_config set FILE_NAME_CONF='"+nameFileConf+"' where TIPO_DI_CONFIGURAZIONE = '"+Config_name+"'");
            ADAMS_GlobalParam.connect_Oracle.Operation(str_updateFileName);
            //System.out.println("^^^^^ SAVE_FILE_NAME ESEGUITA ^^^^");
            // ----- SAVE_FILE_NAME -----
            //System.out.println("^^^^^ SAVE_FILE_NAME ABILITARE ^^^^");
            
            
            jProgressBar1.setValue(100);
            jProgressBar1.setString("Transfer 100% Done.");
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledgreen.png")));

            jL_status.setIcon(null);
            jL_status.setText("");

            jProgressBar1.setForeground(java.awt.Color.green.darker());        
        
        }
        else if(OPERATION_TH == VERIFY_LIMITS)
        {
            this.setCursor(Cur_wait);
            
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledyellow.png")));
            verifyLimits(true);
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledoff.png")));
            
        }
        
        jB_send.setEnabled(true);
        jB_close.setEnabled(true);
        jB_verify.setEnabled(true);
        jT.setEnabled(true);
        jL.setEnabled(true);
        
        this.setCursor(Cur_default);
        TH_WORKING = false;
    }
    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Dimension screenSize = kit.getScreenSize();        
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;
        
        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
    }

    private boolean verifyLimits(boolean showDialog)
    {
        jProgressBar1.setForeground(java.awt.Color.blue);
            
        jProgressBar1.setValue(5);
        jProgressBar1.setString("5%");

        jB_send.setEnabled(false);
        jB_close.setEnabled(false);
        jB_verify.setEnabled(false);
        jT.setEnabled(false);
        jL.setEnabled(false);

        jL_status.setText("Start Verify Limits...");
        
        jL_status.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/time_animated.gif")));
        ADAMS_JD_VerifyLimits JD_VerifyLimits = new ADAMS_JD_VerifyLimits(this,true);

        jProgressBar1.setValue(10);
        jProgressBar1.setString("Verify Limits 10%");
        jL_status.setText("Read Traffic Elements...");          


        // LIMITS TRAFFIC ELEMENT ******************************************

        java.util.Vector V_POS_ELEMENTI = new java.util.Vector();

        String sel_ALL_TE = "select POSIZIONE_ELEMENTO from tab_config where TIPO_DI_CONFIGURAZIONE='"+Config_name+"'";
        Statement SQLStatement = ADAMS_GlobalParam.connect_Oracle.createLocalStatement();
        ResultSet rs  = ADAMS_GlobalParam.connect_Oracle.Query_RS(sel_ALL_TE,SQLStatement);
        if(rs != null)
        {
            try
            {
                while ( rs.next ( ) ) 
                    V_POS_ELEMENTI.addElement(new Integer(rs.getInt ("POSIZIONE_ELEMENTO")));

            }catch (Exception ex) 
            { 
                System.out.println(ex.toString());
            }
        }
        try
        {
            SQLStatement.close();
        }
        catch(java.sql.SQLException exc) 
        {
            System.out.println("(ADAMS_JF_TransferConf - Verify Limits POSIZIONE_ELEMENTO) SQL Operation " + exc.toString());
        }

        // CTRL LIMITS
        int L_VALUE     = 0;
        int L_AGG       = 0;
        int L_GUI       = 0;
        int L_SHIFT     = 0;
        int L_SCRIPT    = 0;

        jProgressBar1.setValue(20);
        jProgressBar1.setString("Verify Limits 20%");
        jL_status.setText("Verify Limits Traffic Elements...");

        ADAMS_Relation  vRelation = new ADAMS_Relation();

        for(int i=0; i<V_POS_ELEMENTI.size(); i++)
        {
            int posElem = ((Integer)V_POS_ELEMENTI.elementAt(i)).intValue();
            jL_status.setText("Verify Limits Traffic Elements ["+i+"]");                

             //----------- Leggo i nomi di tutte le relazioni, necessario per il conteggio successivo dei NEXTLEVEL_RELATIONS

            String sel_ReadRelation = ("select RELATION_NAME from tab_list_relation where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem+" order by RELATION_NAME");
            java.util.Vector V_relation_NAME_TE = ADAMS_GlobalParam.connect_Oracle.Query(sel_ReadRelation);
            java.util.Vector V_ALL_RelationElem_TE = new java.util.Vector();
            for(int z=0; z<V_relation_NAME_TE.size(); z++)
            {
                ADAMS_TAB_RELAZIONI_ELEMENTO elem_relazione = new ADAMS_TAB_RELAZIONI_ELEMENTO(((String)V_relation_NAME_TE.elementAt(z)).trim());
                V_ALL_RelationElem_TE.addElement(elem_relazione);
            }

            boolean GHOST_REL = false;                
            for(int z1=0; z1<V_ALL_RelationElem_TE.size(); z1++)
            {
                if(posElem == -2)
                    GHOST_REL = true;
                vRelation.addRelation((ADAMS_TAB_RELAZIONI_ELEMENTO)V_ALL_RelationElem_TE.elementAt(z1),V_ALL_RelationElem_TE,GHOST_REL);
            }

            if(posElem == -2) // GHOST ELEMENT
                continue;


            //LISTA_VALORI
             String sel_VALUE_LIST = ("select count(distinct COD_VALORE) from tab_value_type where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem);
             //System.out.println(sel_VALUE_LIST);
             int countValueList = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_VALUE_LIST);
             if(countValueList > L_VALUE)
                 L_VALUE = countValueList;                 

            //AGGREGAZ_ELEM_RESTRIZ() 
            String sel_AGG_ELEM_REST = ("select count(distinct AGGREG_RESTRICTION) from tab_aggregate_restrictions where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem);
            //System.out.println(sel_AGG_ELEM_REST);
            int countAggElem = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_AGG_ELEM_REST);
            if(countAggElem > L_AGG)
                L_AGG = countAggElem;

            //LISTA_EXCEPTION() 
            String sel_EXC = ("select count(distinct IDEXCEPTION) from tab_list_exception where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem);
            //System.out.println(sel_EXC);
            int countEX = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_EXC);
            if(countEX > L_GUI)
                L_GUI = countEX;

            //VALORI_SOSTITUZIONE
            String sel_SHIFT = ("select count(distinct VALORI_SOSTITUZIONE) from where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem);
            //System.out.println(sel_SHIFT);
            int count_shift = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_SHIFT);
            if(count_shift > L_SHIFT)
                L_SHIFT = count_shift;

            //LISTA_SCRIPTS 
            String sel_Script = ("select count(distinct SCRIPT) from tab_list_script where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and POSIZIONE_ELEMENTO="+posElem);
            //System.out.println(sel_Script);
            int count_script = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_Script);
            if(count_script > L_SCRIPT)
                L_SCRIPT = count_script;

        }

        // LIMITS ANALYSIS ******************************************

        jProgressBar1.setValue(40);
        jProgressBar1.setString("Verify Limits 40%");
        jL_status.setText("Verify Limits Analysis...");

        java.util.Vector V_IDANALISI = new java.util.Vector();

        String sel_ALL_ANALYSIS = "select IDANALISI from tab_analysis_type where TIPO_DI_CONFIGURAZIONE='"+Config_name+"'";
        Statement SQLStatement_1 = ADAMS_GlobalParam.connect_Oracle.createLocalStatement();
        ResultSet rs_1  = ADAMS_GlobalParam.connect_Oracle.Query_RS(sel_ALL_ANALYSIS,SQLStatement_1);
        if(rs_1 != null)
        {
            try
            {
                while ( rs_1.next ( ) ) 
                    V_IDANALISI.addElement(new Integer(rs_1.getInt ("IDANALISI")));

            }catch (Exception ex) 
            { 
                System.out.println(ex.toString());
            }
        }
        try
        {
            SQLStatement_1.close();
        }
        catch(java.sql.SQLException exc) 
        {
            System.out.println("(ADAMS_JF_TransferConf - Verify Limits IDANALISI) SQL Operation " + exc.toString());
        }

        int L_REPORT = 0;
        int L_RELAZ = 0;
        for(int i=0; i<V_IDANALISI.size(); i++)
        {
            jL_status.setText("Verify Limits Analysis ["+i+"]");
            int idAnalysis = ((Integer)V_IDANALISI.elementAt(i)).intValue();

            //LISTA_REPORT
            String sel_Report = ("select count(distinct IDREPORT)  from tab_list_report where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDANALISI="+idAnalysis);
            //System.out.println(sel_Report);
             int count_Report = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_Report);
             if(count_Report > L_REPORT)
                 L_REPORT = count_Report; 


             //MAX RELATION for Analysis
             String sel_MaxRelAnalysis = ("select count(distinct RELATION_NAME) from tab_list_analysis where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDANALISI="+idAnalysis);
             //System.out.println(sel_MaxRelAnalysis);
             int count_RelAnalysis = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_MaxRelAnalysis);
             if(count_RelAnalysis > L_RELAZ)
                 L_RELAZ = count_RelAnalysis; 

        }

        // LIMITS COUNTERS ******************************************

        jProgressBar1.setValue(50);
        jProgressBar1.setString("Verify Limits 50%");
        jL_status.setText("Verify Limits Counters...");

        java.util.Vector V_COUNTER_KIT = new java.util.Vector();

        String sel_ALL_CounterKit = "select IDCOUNTER from tab_counters_kit where TIPO_DI_CONFIGURAZIONE='"+Config_name+"'";

        Statement SQLStatement_2 = ADAMS_GlobalParam.connect_Oracle.createLocalStatement();
        ResultSet rs_2  = ADAMS_GlobalParam.connect_Oracle.Query_RS(sel_ALL_CounterKit,SQLStatement_2);
        if(rs_2 != null)
        {
            try
            {
                while ( rs_2.next ( ) )
                    V_COUNTER_KIT.addElement(new Integer(rs_2.getInt ("IDCOUNTER")));


            }catch (Exception ex) 
            { 
                System.out.println(ex.toString());
            }
        }
        try
        {
            SQLStatement_2.close();
        }
        catch(java.sql.SQLException exc) 
        {
            System.out.println("(ADAMS_JF_TransferConf - Verify Limits IDCOUNTER) SQL Operation " + exc.toString());
        }

        int L_COUNTERS = 0;
        for(int i=0; i<V_COUNTER_KIT.size(); i++)
        {
            jL_status.setText("Verify Limits Counters ["+i+"]");
            int idCounter = ((Integer)V_COUNTER_KIT.elementAt(i)).intValue();

            //COUNTERKIT
            String sel_counterkit = ("select count(distinct TAG) from tab_type_counters where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDCOUNTER="+idCounter);
            //System.out.println(sel_counterkit);

            int count_Counters = ADAMS_GlobalParam.connect_Oracle.Query_int(sel_counterkit);
            if(count_Counters > L_COUNTERS)
                L_COUNTERS = count_Counters; 
        }

        // LIMITS RELATION ******************************************
        jProgressBar1.setValue(60);
        jProgressBar1.setString("Verify Limits 60%");
        jL_status.setText("Verify Limits Relation...");

        //L_RELAZ_LIV_SUCC
        
        //vRelation.printALLRelazioni(); //stampa delle tutte lae relazioni
        
        int L_RELAZ_LIV_SUCC = vRelation.numMAX_nextLevelRelations();

        int L_REST      = 0;
        int L_REST_OBB  = 0;

        String sel_DEFAULT_REST = ("select POSIZIONE_ELEMENTO from tab_config where DEFAULT_RESTRICTION='Y' and TIPO_DI_CONFIGURAZIONE='"+Config_name+"'");
        java.util.Vector V_DEFAULT_REST = ADAMS_GlobalParam.connect_Oracle.Query(sel_DEFAULT_REST);
        //System.out.println("NUMERO_DEFAULT_REST "+V_DEFAULT_REST.size());

        jProgressBar1.setValue(65);

        for(int r=0; r<vRelation.size(); r++)
        {
            jL_status.setText("Verify Limits Relation ["+r+"]");

            String Rel_NAME = ((ADAMS_TAB_RELAZIONI_ELEMENTO)vRelation.elementAt(r)).RELATION_NAME;

            //Restrizioni relazione
            String sel_REST_REL = ("select ELEMENTI_RESTRIZIONE from tab_list_restriction where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and RELATION_NAME ='"+Rel_NAME+"'");
            java.util.Vector V_RESTRIZ_REL = ADAMS_GlobalParam.connect_Oracle.Query(sel_REST_REL);

            //Aggiungo le restrizioni di DEFAULT alle restrizioni (V_RESTRIZ_REL non contiene gli ID delle RESTRIZIONI di DEFAULT)
            for (int v=0; v<V_DEFAULT_REST.size(); v++)
            {
                V_RESTRIZ_REL.addElement((String)V_DEFAULT_REST.elementAt(v));
            }

            //Restrizioni obbligatorie relazione
            String sel_REST_REL_OBB = ("select ELEMENTI_RESTRIZIONE_OBBL from tab_list_restriction_ob where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and RELATION_NAME ='"+Rel_NAME+"'");
            java.util.Vector V_RESTRIZ_REL_OBB = ADAMS_GlobalParam.connect_Oracle.Query(sel_REST_REL_OBB);


            //Aggiungo le Restrizioni OBBLIGATORIE alle restrizioni (il Server vede una sola lista di restrizioni, le obbligatorie sono una sottolista)
            for(int d=0; d<V_RESTRIZ_REL_OBB.size(); d++)
            {
                //System.out.println("id_restOBB "+(String)V_RESTRIZ_REL_OBB.elementAt(d));
                String id_restOBB = (String)V_RESTRIZ_REL_OBB.elementAt(d);

                boolean add_rest = true;
                for(int e=0; e<V_RESTRIZ_REL.size(); e++)
                {
                    //System.out.println("id_rest "+(String)V_RESTRIZ_REL.elementAt(e));
                    String id_rest = (String)V_RESTRIZ_REL.elementAt(e);
                    if(id_rest.equals(id_restOBB))
                    {
                        add_rest = false;
                        break;
                    }
                }
                if(add_rest == true)
                    V_RESTRIZ_REL.addElement(id_restOBB);
            }

            int NUM_REL = V_RESTRIZ_REL.size();
            if(NUM_REL > L_REST )
            {
                L_REST = NUM_REL;
                //System.out.println("Rel_NAME MAX REST "+Rel_NAME);
            }

            int NUM_REL_OBB = V_RESTRIZ_REL_OBB.size();
            if(NUM_REL_OBB >L_REST_OBB)
            {
                L_REST_OBB = NUM_REL_OBB;
                //System.out.println("Rel_NAME MAX REST OBB. "+Rel_NAME);
            }

        }

        jProgressBar1.setValue(70);
        jProgressBar1.setString("Verify Limits 70%");

        //SCRIPT
        int L_VAR = 0;
        int LINEE_TEXT_SCRIPT = 0;

        String sel_ALL_IDSCRIPT = ("select IDSCRIPT from tab_scripts where TIPO_DI_CONFIGURAZIONE='"+Config_name+"'");
        java.util.Vector V_ID_SCRIPT = ADAMS_GlobalParam.connect_Oracle.Query(sel_ALL_IDSCRIPT);

        jProgressBar1.setValue(80);
        jProgressBar1.setString("Verify Limits 80%");
        jL_status.setText("Verify Limits SCRIPT...");

        for(int s=0; s<V_ID_SCRIPT.size(); s++)
        {
            jL_status.setText("Verify Limits SCRIPT ["+s+"]");
            String id_script = (String)V_ID_SCRIPT.elementAt(s);

            //VARIABLES1 su TE
            String sel_VAR = ("select count(VRBNAME) from tab_script_var1 where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDSCRIPT="+id_script);
            int count_variable= ADAMS_GlobalParam.connect_Oracle.Query_int(sel_VAR);
            if(count_variable > L_VAR)
            {
               // System.out.println("L_VAR id_script "+id_script);
                L_VAR = count_variable; 
            }

            //VARIABLES2 su REPORT
            String sel_VAR2 = ("select count(VRBNAME) from tab_script_var2 where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDSCRIPT="+id_script);
            int count_variable2= ADAMS_GlobalParam.connect_Oracle.Query_int(sel_VAR2);
            if(count_variable2 > L_VAR)
            {
               // System.out.println("L_VAR 2 id_script "+id_script);
                L_VAR = count_variable2; 
            }

            //SCRIPTTEXT
            String sel_scText = ("select count(VRBTEXT) from tab_script_text where TIPO_DI_CONFIGURAZIONE='"+Config_name+"' and IDSCRIPT="+id_script);
            int count_SC_TEXT= ADAMS_GlobalParam.connect_Oracle.Query_int(sel_scText);
            if(count_SC_TEXT > LINEE_TEXT_SCRIPT)
            {
               // System.out.println("LINEE_TEXT_SCRIPT id_script "+id_script);
                LINEE_TEXT_SCRIPT = count_SC_TEXT; 
            }

        }

        jProgressBar1.setValue(90);
        jProgressBar1.setString("Verify Limits 90%");


        /* JD_VerifyLimits.setVerify(int L_VALUE,int L_AGG, int L_GUI, int L_SHIFT, int L_SCRIPT,int L_REPORT,int L_RELAZ,
                                    int L_COUNTERS,int L_RELAZ_LIV_SUCC, int L_REST, int L_REST_OBB,int L_VAR)*/

        boolean ERROR_VERIFY = JD_VerifyLimits.setVerify(L_VALUE,L_AGG,L_GUI,L_SHIFT,L_SCRIPT,L_REPORT,L_RELAZ,L_COUNTERS,L_RELAZ_LIV_SUCC,L_REST,L_REST_OBB,L_VAR,LINEE_TEXT_SCRIPT);

        jProgressBar1.setValue(100);
        jProgressBar1.setString("Verify Limits 100% Done.");
        jProgressBar1.setForeground(java.awt.Color.green.darker());

        if((showDialog == true) || (ERROR_VERIFY == true))
        {
         if(showDialog)
            jLed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ledgreen.png")));
         
            //JD_VerifyLimits.show();
            JD_VerifyLimits.setVisible(true);
        }
        jProgressBar1.setValue(0);
        jProgressBar1.setString("");
        jL_status.setIcon(null);
        jL_status.setText("");
        
        return ERROR_VERIFY;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jP_TOT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JPanel jP_DateIndex;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTF_DD_Start;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JTextField jTF_MM_Start;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField jTF_YY_Start;
    private javax.swing.JButton jB_Cal_start;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTF_DD_End;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JTextField jTF_MM_End;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JTextField jTF_YY_End;
    private javax.swing.JButton jB_Cal_end;
    private javax.swing.JPanel jP_button;
    private javax.swing.JButton jB_verify;
    private javax.swing.JButton jB_send;
    private javax.swing.JButton jB_close;
    private javax.swing.JTextField jT;
    private javax.swing.JLabel jL;
    private javax.swing.JLabel jL_status;
    private javax.swing.JLabel jLed;
    // End of variables declaration//GEN-END:variables
    private String Config_name = "";
    
    private Thread TH           = null;
    private boolean TH_WORKING  = false;
    private int OPERATION_TH    = -1;
    
    private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
    private final int TRANSFER          = 0;
    private final int VERIFY_LIMITS     = 1;
    private final int TRANSFER_INDEX    = 2;
    
    private boolean IS_CONF_INDEX   = false;
    private String indexFileName    ="";
    
    private ADAMS_Calendar cal_start = null;
    private ADAMS_Calendar cal_end   = null;
    
    private javax.swing.JFrame frameParent = null;
    
    private static char[] set_String_toChar(String str, int length) 
    {
    
    	char[] appo = str.toCharArray();
    	char[] appo1 = new char[length];
    
    	if (appo.length > length)
    	    return appo1;
    
    
    	for (int i=0; i<appo.length; i++)
    	    appo1[i] = appo[i];
    
    	for (int i=appo.length; i<length; i++) 
    	    appo1[i] ='\0';
    
        appo1[length-1] ='\0';
        
    	return(appo1);
    }
}
