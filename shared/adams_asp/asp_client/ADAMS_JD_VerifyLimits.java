/*
 * NTM_JD_VerifyLimits.java
 *
 * Created on 6 febbraio 2006, 12.32
 */

/**
 *
 * @author  luca
 */
public class ADAMS_JD_VerifyLimits extends javax.swing.JDialog {

    /** Creates new form NTM_JD_VerifyLimits */
    public ADAMS_JD_VerifyLimits(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        jTextP.setContentType("text/html");
        javax.swing.text.html.HTMLEditorKit he = new javax.swing.text.html.HTMLEditorKit();
        jTextP.setEditorKit(he);        
        
        jB_close.setCursor(Cur_hand);
        
        setCenteredFrame(530,630);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jB_close = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextP = new javax.swing.JTextPane();
        
        setBackground(new java.awt.Color(230, 230, 230));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exec.png")));
        jLabel1.setText("Verify Limits Configuration");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setMinimumSize(new java.awt.Dimension(206, 36));
        jLabel1.setPreferredSize(new java.awt.Dimension(206, 36));
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);
        
        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg")));
        jB_close.setToolTipText("close");
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setMaximumSize(new java.awt.Dimension(100, 22));
        jB_close.setMinimumSize(new java.awt.Dimension(100, 22));
        jB_close.setPreferredSize(new java.awt.Dimension(100, 22));
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_press.jpg")));
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_over.jpg")));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        jPanel1.add(jB_close);
        
        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
        
        jTextP.setBackground(new java.awt.Color(230, 230, 230));
        jTextP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextP.setEditable(false);
        jTextP.setMinimumSize(new java.awt.Dimension(500, 500));
        jTextP.setPreferredSize(new java.awt.Dimension(500, 600));
        jScrollPane2.setViewportView(jTextP);
        
        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);
        
        pack();
    }//GEN-END:initComponents

    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
        dispose();
    }//GEN-LAST:event_jB_closeActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Dimension screenSize = kit.getScreenSize();        
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;

        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
    }

    
/* // TRAFFIC ELEMENT 
ADAMS_GlobalParam._MAX_OPTIONS;             // - MAX OPZIONI IN VALUE LIST
ADAMS_GlobalParam._MAX_AGGREGATE_RESTR;     // - MAX LISTA AGGREGATE
ADAMS_GlobalParam._MAX_EXCEPTIONS;          // - MAX LISTA EVENTI GUI
ADAMS_GlobalParam._VALSHIFTER_MAX;          // - MAX VALORI SHIFTER
ADAMS_GlobalParam._MAX_TE_SCRIPTS;          // - SCRIPTS

// ANALISI
ADAMS_GlobalParam._MAX_RELATION;           // - RELAZIONI ABILITATE
ADAMS_GlobalParam._MAX_ANALYSIS_REPORTS;    // - REPORT ABILITATI

// CONTATORI 
ADAMS_GlobalParam._CNT_NUM;                 // - MAX CONTATORI PER KIT

// RELAZIONI
ADAMS_GlobalParam._MAX_RESTRICTIONS;        // - MAX RELAZIONI ABILITATE - MAX RESTRIZIONI OBBLIGATORIE
ADAMS_GlobalParam._NEXTLEVEL_RELATIONS;     // - MAX RELAZIONI LIVELLO SUCC.

// SCRIPT 
ADAMS_GlobalParam._SCRIPT_MAX_VAR;         // - MAX LISTA VARIABILI
ADAMS_GlobalParam._SCRIPT_MAX_TEXT;        // - MAX LINEE TESTO SCRIPT*/
   
    
    public boolean setVerify(int L_VALUE,int L_AGG, int L_GUI, int L_SHIFT, int L_SCRIPT,int L_REPORT,int L_RELAZ,
                            int L_COUNTERS,int L_RELAZ_LIV_SUCC, int L_REST, int L_REST_OBB,int L_VAR,int LINEE_TEXT_SCRIPT)
    {                      
                  
        boolean ErrorVerify = false;
        
        String str_OK   = "<span style=\"background-color: #33CC33\">&nbsp;OK </span></font>";
        String str_ERR  = "<span style=\"background-color: #FF0000\">&nbsp;ERROR </span></font>";
               
        String str_Text;
                
        str_Text = ("<html>");
        str_Text += ("<body>");
        str_Text +=("<p><b><font face=\"Courier New\" size=3>TRAFFIC ELEMENTS:</font></b></p>");
        str_Text +=("<ul><li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Values List"));
        
        // ************ TRAFFIC ELEMENT ************
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_OPTIONS+")"+generateSpace(ADAMS_GlobalParam._MAX_OPTIONS)+"<font color=\"#FFFFFF\">");  
        if(L_VALUE <= ADAMS_GlobalParam._MAX_OPTIONS )
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_VALUE+")&nbsp;</font></b>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_VALUE+")&nbsp;</font></b></li>");
        }
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Aggregate Restriction")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_AGGREGATE_RESTR+")"+generateSpace(ADAMS_GlobalParam._MAX_AGGREGATE_RESTR)+"<font color=\"#FFFFFF\">");        
        if(L_AGG <=ADAMS_GlobalParam._MAX_AGGREGATE_RESTR )
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_AGG+")&nbsp;</font></b>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_AGG+")&nbsp;</font></b></li>");
        }
            
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("GUI Event")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_EXCEPTIONS+")"+generateSpace(ADAMS_GlobalParam._MAX_EXCEPTIONS)+"<font color=\"#FFFFFF\">");
        if(L_GUI <= ADAMS_GlobalParam._MAX_EXCEPTIONS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_GUI+")&nbsp;</font></b>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_GUI+")&nbsp;</font></b></li>");
        }
        
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Shifter")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._VALSHIFTER_MAX+")"+generateSpace(ADAMS_GlobalParam._VALSHIFTER_MAX)+"<font color=\"#FFFFFF\">");
        if(L_SHIFT <= ADAMS_GlobalParam._VALSHIFTER_MAX)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_SHIFT+")&nbsp;</font></b></li>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_SHIFT+")&nbsp;</font></b></li>");
        }

        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Evaluation Scrips")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_TE_SCRIPTS+")"+generateSpace(ADAMS_GlobalParam._MAX_TE_SCRIPTS)+"<font color=\"#FFFFFF\">");
        if(L_SCRIPT <= ADAMS_GlobalParam._MAX_TE_SCRIPTS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_SCRIPT+")&nbsp;</font></b></li></ul>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_SCRIPT+")&nbsp;</font></b></li></ul>");
        }

        // ************ ANALYSIS ************
        
        str_Text +=("<p><b><font face=\"Courier New\" size=3>ANALYSIS:</font></b></p>");
        str_Text +=("<ul><li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Reports List")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_ANALYSIS_REPORTS+")"+generateSpace(ADAMS_GlobalParam._MAX_ANALYSIS_REPORTS)+"<font color=\"#FFFFFF\">");
        if(L_REPORT <= ADAMS_GlobalParam._MAX_ANALYSIS_REPORTS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_REPORT+")&nbsp;</font></b></li>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_REPORT+")&nbsp;</font></b></li>");
        }
        
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Enabled Relations")); 
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_RELATION+")"+generateSpace(ADAMS_GlobalParam._MAX_RELATION)+"<font color=\"#FFFFFF\">");
        if(L_RELAZ <= ADAMS_GlobalParam._MAX_RELATION )
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_RELAZ+")&nbsp;</font></b></li></ul>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_RELAZ+")&nbsp;</font></b></li></ul>");
        }
        
        str_Text +=("<p><font face=\"Courier New\" size=3><b>COUNTERS:</b></font></p>");
        str_Text +=("<ul><li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Counters"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._CNT_NUM+")"+generateSpace(ADAMS_GlobalParam._CNT_NUM)+"<font color=\"#FFFFFF\">");
        if(L_COUNTERS <= ADAMS_GlobalParam._CNT_NUM)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_COUNTERS+")&nbsp;</font></b></li></ul>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_COUNTERS+")&nbsp;</font></b></li></ul>");
        }
        
        str_Text +=("<p><b><font face=\"Courier New\" size=3>RELATIONS:</font></b></p>");
        str_Text +=("<ul><li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Next Level Relations"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._NEXTLEVEL_RELATIONS+")"+generateSpace(ADAMS_GlobalParam._NEXTLEVEL_RELATIONS)+"<font color=\"#FFFFFF\">");
        if(L_RELAZ_LIV_SUCC <= ADAMS_GlobalParam._NEXTLEVEL_RELATIONS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_RELAZ_LIV_SUCC+")&nbsp;</font></b></li>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_RELAZ_LIV_SUCC+")&nbsp;</font></b></li>");
        }
        
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Enabled Restrictions"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_RESTRICTIONS+")"+generateSpace(ADAMS_GlobalParam._MAX_RESTRICTIONS)+"<font color=\"#FFFFFF\">");
        if(L_REST <= ADAMS_GlobalParam._MAX_RESTRICTIONS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_REST+")&nbsp;</font></b></li>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_REST+")&nbsp;</font></b></li>");
        }
        
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Ties Restrictions"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._MAX_RESTRICTIONS+")"+generateSpace(ADAMS_GlobalParam._MAX_RESTRICTIONS)+"");
        str_Text +=("<font color=\"#FFFFFF\">"); 
        if(L_REST_OBB <= ADAMS_GlobalParam._MAX_RESTRICTIONS)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_REST_OBB+")&nbsp;</font></b></li></ul>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_REST_OBB+")&nbsp;</font></b></li></ul>");
        }
        
        str_Text +=("<p><b><font face=\"Courier New\" size=3>SCRIPT:</font></b></p>");
        str_Text +=("<ul><li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Variables List"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._SCRIPT_MAX_VAR+")"+generateSpace(ADAMS_GlobalParam._SCRIPT_MAX_VAR)+"<font color=\"#FFFFFF\">");
        if(L_VAR <= ADAMS_GlobalParam._SCRIPT_MAX_VAR)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+L_VAR+")&nbsp;</font></b></li>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+L_VAR+")&nbsp;</font></b></li>");
        }
        
        str_Text +=("<li><b><font face=\"Courier New\" size=3>"+generateStringAndSpace("Script Text Lines"));
        str_Text +=("(LIMIT "+ADAMS_GlobalParam._SCRIPT_MAX_TEXT+")"+generateSpace(ADAMS_GlobalParam._SCRIPT_MAX_TEXT)+"<font color=\"#FFFFFF\">");
        if(LINEE_TEXT_SCRIPT <= ADAMS_GlobalParam._SCRIPT_MAX_TEXT)
            str_Text +=(str_OK+"&nbsp;(MAX USED "+LINEE_TEXT_SCRIPT+")&nbsp;</font></b></li></ul>");
        else
        {
            ErrorVerify = true;
            str_Text +=(str_ERR+"&nbsp;(MAX USED "+LINEE_TEXT_SCRIPT+")&nbsp;</font></b></li></ul>");
        }
        
        if(ErrorVerify == false)
            str_Text +=("<p align=\"center\"><b><span style=\"background-color: #33CC33\"><font size=4 color=\"#FFFFFF\">&nbsp VERIFY LIMITS OK &nbsp</font></span></b></p>");
        else
            str_Text +=("<p align=\"center\"><b><span style=\"background-color: #FF0000\"><font size=4 color=\"#FFFFFF\">&nbsp VERIFY LIMITS FAILURE &nbsp</font></span></b></p>");
        
        str_Text +=("<p>&nbsp;</p>");
        str_Text +=("</body>");
        str_Text +=("</html>");
        
        try
        {
            jTextP.setText(str_Text);
        }
        catch (Exception ex) {} 

        return ErrorVerify;
    
    }

    private String generateSpace(int value)
    { 
        int MAX_space = 8;
        int LENGTH = (new String(""+value)).length();
        
        if(LENGTH >= MAX_space)
            return "&nbsp;";
        
        String space = "";
        for(int i=0; i<(MAX_space-LENGTH); i++)
            space += "&nbsp;";
            
        return space;        
    }
    
    private String generateStringAndSpace(String str)
    { 
        int Max_len = 30;        
        for(int i=str.length(); i<Max_len; i++)
            str += "&nbsp";
            
        return str;        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jB_close;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextP;
    // End of variables declaration//GEN-END:variables

    //private java.awt.Cursor Cur_default  = new Cursor(java.awt.Cursor.DEFAULT_CURSOR);
    //private java.awt.Cursor Cur_wait     = new Cursor(java.awt.Cursor.WAIT_CURSOR);
    private java.awt.Cursor Cur_hand     = new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR);
}
