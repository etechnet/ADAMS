import java.awt.*;
import java.util.*;
import java.io.*;
import java.net.*;
import javax.swing.JTable;
import javax.swing.table.*;

import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.Colour;
import jxl.write.Label;
import jxl.write.NumberFormat;
import jxl.write.NumberFormats;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;

/* Classe per la gestione dell'export dei Report - Raffo 08-02-2012 */
public class MDM_exportReport extends javax.swing.JDialog implements Runnable {

    public static final int REPORT_TO_UNDEFINED 	= -1;
    public static final int REPORT_TO_NORMAL 		= 0;
    public static final int REPORT_TO_CSV 		= 1;
    public static final int REPORT_TO_EXCEL 		= 2;
    public static final int REPORT_TO_PDF 		= 3;
    public static final int REPORT_TO_HTML 		= 4;
    
    public static final int EXCEL_TYPE_KEY 		= 0;
    public static final int EXCEL_TYPE_COUNTER 		= 1;
    public static final int EXCEL_TYPE_INT 		= 2;
    public static final int EXCEL_TYPE_DOUBLE 		= 3;
    public static final int EXCEL_TYPE_STRING 		= 4;
    
    
    
    
    private boolean DEBUG = false;
    private int contThread=0;
    
    /** Creates new form JDialog */
    public MDM_exportReport(String nfile,javax.swing.JApplet jAp, EXPORT_ROW[] exportData, int TypeFILE)
    {
        this.setModal(true);       
        this.JAppl = jAp;
        this.exportData=exportData;
        
        contThread=0;
        
        if(DEBUG) stampaDati();
        
        /* Riempire la tabella per TEST */
    	String numColonne[]=new String[2];
    	numColonne[0]="Colonna 1";
    	numColonne[1]="Colonna 2";
    	Object[][] dataTable = {{1,2},{3,5}};
    	jTableElement = new javax.swing.JTable(dataTable,numColonne);
    		
        String data = new String();
        Calendar dCal = Calendar.getInstance();
        data=(dCal.get(dCal.DAY_OF_MONTH)+"-"+(dCal.get(dCal.MONTH)+1)+"-"+dCal.get(dCal.YEAR)+"_"+
                                      dCal.get(dCal.HOUR_OF_DAY)+
                                      dCal.get(dCal.MINUTE)+
                                      dCal.get(dCal.SECOND));
        nomeFile = (data+"-"+nfile+".html");
        nomeFile_csv = (data+"-"+nfile+".csv");
        nomeFile_pdf = (data+"-"+nfile+".pdf");
        nomeFile_xls = (data+"-"+nfile+".xls");
        
        decimalPosition=2;
        
        if(decimalPosition >= 0)
            setValueRound(decimalPosition);
        
        initComponents();        
        setCenteredFrame(300,150);       
        
        switch(TypeFILE)
        {
            case REPORT_TO_HTML: // HTML
            {
                createHTML();
            }break;
            case REPORT_TO_CSV: // CSV
            {
                jL_title.setText("CSV Export");
                createCVS();
            }break;
            case REPORT_TO_PDF: // PDF
            {
                jL_title.setText("PDF Export");
                createPDF();
            }break;
            case REPORT_TO_EXCEL: // EXCEL
            {
                jL_title.setText("EXCEL Export");
                createEXCEL();
            }break;
        }
        
        
        //show();
				this.setVisible(true);
        
    }
    

    public void setValueRound(int decimalPosition)
    {
        f_double = "0";
        if(decimalPosition > 0)
        {
            f_double += ".";
            
            for(int i=0; i<decimalPosition; i++)
            {
                f_double += "0";
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        progressBar = new javax.swing.JProgressBar();
        jL_title = new javax.swing.JLabel();
        jB_stop = new javax.swing.JButton();
        
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("N.T.M. Report Export");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        progressBar.setForeground(new java.awt.Color(0, 0, 204));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints1.weightx = 1.0;
        getContentPane().add(progressBar, gridBagConstraints1);
        
        jL_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/web.png")));
        jL_title.setText("Web Export");
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints1.weightx = 1.0;
        getContentPane().add(jL_title, gridBagConstraints1);
        
        jB_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_request.jpg")));
        jB_stop.setBorderPainted(false);
        jB_stop.setContentAreaFilled(false);
        jB_stop.setFocusPainted(false);
        jB_stop.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_request_press.jpg")));
        jB_stop.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop_request_over.jpg")));
        jB_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_stopActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jB_stop, gridBagConstraints1);
        
        pack();
    }//GEN-END:initComponents

    private void jB_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_stopActionPerformed
        TH_EXIT = true;
    }//GEN-LAST:event_jB_stopActionPerformed

    
    private void createHTML()
    {
        OperationTH = REPORT_TO_HTML;
        TH_EXIT = false;
        th = null;
        th = new Thread(this,"createHTML()");
        th.start();
    }
    
    private void createCVS()
    {
        OperationTH = REPORT_TO_CSV;
        TH_EXIT = false;
        th = null;
        th = new Thread(this,"createCVS()");
        th.start();
    }
    
    private void createPDF()
    {
        OperationTH = REPORT_TO_PDF;
        TH_EXIT = false;
        th = null;
        th = new Thread(this,"createPDF()");
        th.start();
    }
    
    private void createEXCEL()
    {
        OperationTH = REPORT_TO_EXCEL;
        TH_EXIT = false;
        th = null;
        th = new Thread(this,"createEXCEL()");
        th.start();
    } 
    
    public void run() 
    {                  
        this.setCursor(Cur_wait);
        
        switch(OperationTH)
        {
            case REPORT_TO_HTML: // HTML
            {
                try
                {
                    run_createHTML();
                }catch (Exception e){
                    progressBar.setForeground(java.awt.Color.red);
                    e.printStackTrace();
                } 
            }break;
            case REPORT_TO_CSV: // CSV
            {
                try
                {
                    run_createCSV();
                }catch (Exception e){
                    progressBar.setForeground(java.awt.Color.red);
                    e.printStackTrace();
                }   
            }break;
            case REPORT_TO_PDF: // PDF
            {
                try
                {
                    run_createPDF();
                }catch (Exception e){
                    progressBar.setForeground(java.awt.Color.red);
                    e.printStackTrace();
                }                
            }break;
            case REPORT_TO_EXCEL: // EXCEL
            {
                 try
                {
                    run_createEXCEL();
                }catch (Exception e){
                    progressBar.setForeground(java.awt.Color.red);
                    e.printStackTrace();
                }                
            }break;
        }
        
        OperationTH = REPORT_TO_UNDEFINED;
        this.setCursor(Cur_default);
    }
     
    
    public void run_createHTML()
    {}
    
    public void run_createCSV() 
    {}
    
    private void run_createPDF() throws Exception
    {}
   
    private void run_createEXCEL_TEST() throws Exception
    {
    	if(DEBUG)
    	{
	    	System.out.println("run_createEXCEL_TEST()");
    	}
    	
        jL_title.setText("EXCEL Export, please wait... ");
        
        int countColumn = jTableElement.getColumnCount();
    	int count_row = jTableElement.getRowCount();
        
        if(DEBUG)
    	{
	    	System.out.println("countColumn="+countColumn);
	    	System.out.println("count_row="+count_row);
    	}
        //************
        progressBar.setForeground(java.awt.Color.yellow);
        progressBar.setMinimum(0);
        
        int gap_progressBar = (int)(count_row*0.10);
        //System.out.println("gap_progressBar "+gap_progressBar);
        
        progressBar.setMaximum(count_row+gap_progressBar);
        //************
        
        
        File selectedFile = openFileChooser(nomeFile_xls);
        
        if(selectedFile == null )            
        {
            //System.out.println("CANCEL_OPTION or ERROR_OPTION");
            TH_EXIT = true;
        }        
             
        if(TH_EXIT)
        {
            progressBar.setForeground(java.awt.Color.red);
            jB_stop.setEnabled(false);
                          
            jL_title.setText("EXCEL Export stopped!");
            jL_title.setIcon(icon_web_stop);
            closeDialog(null);
            return;
        }
        
        
        WritableWorkbook workbook = Workbook.createWorkbook(selectedFile); 
        //Nome foglio di Lavoro
    	WritableSheet sheet = workbook.createSheet("N.T.M. Export Report", 0); 
		 
        java.util.Vector V_IDcolumnValid = new Vector();
        java.util.Vector V_nameColumnValid = new Vector();
        
        for(int i=0; i<countColumn; i++)
        {
            int column_width = ((TableColumn)jTableElement.getColumnModel().getColumn(i)).getWidth();
            if(column_width > 0)
            {                
                V_nameColumnValid.addElement(new String(jTableElement.getColumnName(i)));
                V_IDcolumnValid.addElement(new Integer(i));
                
                if(DEBUG)
	    	{
		    	System.out.println("Nome Colonna="+new String(jTableElement.getColumnName(i)));
		    	System.out.println("Colonna ID="+i);
	    	}
            }
        }
        
        int columnValid = V_IDcolumnValid.size();
        int[] ARR_IDcolumnValid = new int[columnValid];
        for(int i=0;i<columnValid;i++)
            ARR_IDcolumnValid[i] = ((Integer)V_IDcolumnValid.elementAt(i)).intValue();
            
        
    	
    	// TABLE
    	// -- HEADER
    	WritableFont x_header_Font = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD); 	
    	
      	WritableCellFormat x_header_Key = new WritableCellFormat(x_header_Font);
    	x_header_Key.setBackground(Colour.LIGHT_BLUE);
    	x_header_Key.setAlignment(Alignment.CENTRE);
    	x_header_Key.setShrinkToFit(true);
        
      	WritableCellFormat x_header_data = new WritableCellFormat(x_header_Font);
    	x_header_data.setBackground(Colour.GRAY_25);
    	x_header_data.setAlignment(Alignment.CENTRE);
    	x_header_data.setShrinkToFit(true);

	int typeCol=EXCEL_TYPE_KEY;
	
    	for(int c=0; c<columnValid; c++)
    	{
    		//String name_Column = jTableElement.getColumnName(c);
                String name_Column = (String)(V_nameColumnValid.elementAt(c)); 
                Label header_label = null;
                if(typeCol==EXCEL_TYPE_KEY)
                {
                	header_label = new Label(ARR_IDcolumnValid[c], 0, name_Column,x_header_Key);
                }
                else if(typeCol==EXCEL_TYPE_COUNTER)
                {
                	header_label = new Label(ARR_IDcolumnValid[c], 0, name_Column,x_header_data);
    		}
    		sheet.addCell(header_label);
    	}
    	// -- END HEADER
    	
    	int gap_afterHeader = 1;
    	
        WritableCellFormat cell_format_integer  = new WritableCellFormat(new NumberFormat(f_integer));
        WritableCellFormat cell_format_double   = new WritableCellFormat(new NumberFormat(f_double));
        
    	for(int r=0; r<count_row; r++)
    	{
    		for(int c=0; c<columnValid; c++)
	        {  
                    String nomeclasse = (jTableElement.getValueAt(r,ARR_IDcolumnValid[c]).getClass().getName());
                    String str_Cell = jTableElement.getValueAt(r,ARR_IDcolumnValid[c]).toString();
           
                    //System.out.println("-----> "+nomeclasse.toString());
                    	                                
                    if( (nomeclasse.equals("java.lang.Double")) || ((nomeclasse.equals("java.lang.Long"))) )
	            {	            	            	
	            	Double val_Cell = new Double(str_Cell);
	            	double double_cell = val_Cell.doubleValue();	            	
	            	
	            	// Formattazione Forzata
	            	jxl.write.Number number;
	            	if(nomeclasse.equals("java.lang.Long"))
                            number = new jxl.write.Number(ARR_IDcolumnValid[c], (r+gap_afterHeader), double_cell,cell_format_integer);
	            	else
                            number = new jxl.write.Number(ARR_IDcolumnValid[c], (r+gap_afterHeader), double_cell,cell_format_double);
	            		            	
	            	// END Formattazione Forzata
	            	
	            	sheet.addCell(number); 
	            }
	            else
	            {
	            	Label label = new Label(ARR_IDcolumnValid[c], (r+gap_afterHeader), str_Cell);
    			sheet.addCell(label);
	            } 
                    
                    progressBar.setValue(r+1);     
                    if(TH_EXIT)
                    {
                        progressBar.setForeground(java.awt.Color.red);
                        jB_stop.setEnabled(false);
                        jL_title.setText("EXCEL Export");
                        int risp1 = staticLib.confirmPanel("Confirm request?","STOP EXCEL Export",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.INFORMATION_MESSAGE); 
                        if(risp1 == 0)
                        {                        
                            jL_title.setText("EXCEL Export stopped!");
                            jL_title.setIcon(icon_web_stop);
                            closeDialog(null);
                            return;
                        }

                        TH_EXIT = false;
                        progressBar.setForeground(java.awt.Color.blue);
                        jB_stop.setEnabled(true);
                    }
	        }                
    	}
    	
        progressBar.setForeground(java.awt.Color.blue);
        jL_title.setText("EXCEL Export, please wait... ");
        
        workbook.write();
        workbook.close(); 
        
        progressBar.setValue(progressBar.getMaximum());
        progressBar.setForeground(java.awt.Color.green.darker());
        jL_title.setText("EXCEL Export done.");
        
        staticLib.optionPanel("Export EXCEL Done.", "Export EXCEL",javax.swing.JOptionPane.INFORMATION_MESSAGE);             
        
        setVisible(false);
        dispose();
		
    }
    
    private void run_createEXCEL() throws Exception
    {
    	int count_row	= 0;
        int countColumn = 0;
        
    	/*EXPORT_ROW[] exportData
    	EXPORT_COL;*/
    	
    	contThread++;
    	
    	if(DEBUG)
    	{
	    	System.out.println("run_createEXCEL("+contThread+")");
    	}
    	if(contThread>1)
    	{
            progressBar.setForeground(java.awt.Color.red);
            jB_stop.setEnabled(false);
                          
            jL_title.setText("EXCEL Export stopped!");
            jL_title.setIcon(icon_web_stop);
	    
	    chiudiFinestra();
	    
	    return;
        }
    	
        jL_title.setText("EXCEL Export, please wait... ");
        
        count_row = exportData.length;
        if(count_row>0)
        {
    		countColumn = exportData[0].exportCol.length;
    		if(count_row>=staticLib.MAX_ROW_EXCEL_2007)
    		{
    			JD_Message op = new JD_Message(null,true,"Row number > "+staticLib.MAX_ROW_EXCEL_2007+".","Info",JD_Message.INFO);
    			count_row=staticLib.MAX_ROW_EXCEL_2007;
    		}
        }else
        {
        	TH_EXIT = true;
        }
        
        if(DEBUG)
    	{
	    	System.out.println("countColumn="+countColumn);
	    	System.out.println("count_row="+count_row);
    	}
        //************
        progressBar.setForeground(java.awt.Color.yellow);
        progressBar.setMinimum(0);
        
        int gap_progressBar = (int)(count_row*0.10);
        //System.out.println("gap_progressBar "+gap_progressBar);
        
        progressBar.setMaximum(count_row+gap_progressBar);
        //************
        
        
        File selectedFile = openFileChooser(nomeFile_xls);
        
        if(selectedFile == null )            
        {
            //System.out.println("CANCEL_OPTION or ERROR_OPTION");
            TH_EXIT = true;
        }        
             
        if(TH_EXIT)
        {
            progressBar.setForeground(java.awt.Color.red);
            jB_stop.setEnabled(false);
                          
            jL_title.setText("EXCEL Export stopped!");
            jL_title.setIcon(icon_web_stop);
	    TH_EXIT=false;
	    chiudiFinestra();
	    return;
        }
        
        
        WritableWorkbook workbook = Workbook.createWorkbook(selectedFile); 
        //Nome foglio di Lavoro
    	WritableSheet sheet = workbook.createSheet("N.T.M. Export Report", 0); 
    	/*String name_sheet=staticLib.descRelation.trim();
    	name_sheet.replaceAll("::","_");
	WritableSheet sheet = workbook.createSheet("N.T.M. ("+name_sheet+")", 0); */
	
        java.util.Vector V_IDcolumnValid = new Vector();
        java.util.Vector V_nameColumnValid = new Vector();
        
        int rigaIntestazione=0;
        for(int c=0; c<countColumn; c++)
        {           
	        V_nameColumnValid.addElement(exportData[rigaIntestazione].exportCol[c].valueCol.trim());
	        V_IDcolumnValid.addElement(new Integer(c));
	        
	        if(DEBUG)
	    	{
		    	System.out.println("Nome Colonna="+exportData[rigaIntestazione].exportCol[c].valueCol.trim());
		    	System.out.println("TypeCol="+exportData[rigaIntestazione].exportCol[c].typeCol);
		    	System.out.println("Colonna ID="+c);
	    	} 
        }
        
        int columnValid = V_IDcolumnValid.size();
        int[] ARR_IDcolumnValid = new int[columnValid];
        for(int i=0;i<columnValid;i++)
            ARR_IDcolumnValid[i] = ((Integer)V_IDcolumnValid.elementAt(i)).intValue();
            
        
    	
    	// TABLE
    	// -- HEADER
    	WritableFont x_header_Font = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD); 	
    	
      	WritableCellFormat x_header_Key = new WritableCellFormat(x_header_Font);
    	x_header_Key.setBackground(Colour.LIGHT_BLUE);
    	x_header_Key.setAlignment(Alignment.CENTRE);
    	x_header_Key.setShrinkToFit(false);
        
      	WritableCellFormat x_header_data = new WritableCellFormat(x_header_Font);
    	x_header_data.setBackground(Colour.GRAY_25);
    	x_header_data.setAlignment(Alignment.CENTRE);
    	x_header_data.setShrinkToFit(false);
    	

	
	//System.out.println("columnValid="+columnValid);
    	//System.out.println("name_Sheet="+staticLib.descRelation);
    	
    	for(int c=0; c<columnValid; c++)
    	{
    		
    		int 	typeCol		= exportData[rigaIntestazione].exportCol[c].typeCol;
                String 	name_Column 	= (String)(V_nameColumnValid.elementAt(c)); 
                Label 	header_label	= null;
                
                //System.out.println("c=["+ARR_IDcolumnValid[c]+"]="+name_Column);
                
                if(typeCol==EXCEL_TYPE_KEY)
                {
                	header_label = new Label(ARR_IDcolumnValid[c], rigaIntestazione, name_Column,x_header_Key);
                }
                else if(typeCol==EXCEL_TYPE_COUNTER)
                {
                	header_label = new Label(ARR_IDcolumnValid[c], rigaIntestazione, name_Column,x_header_data);
    		}
    		
    		if(!name_Column.equals(""))
    		{
    			sheet.setColumnView(c,name_Column.length()*2);
    			sheet.addCell(header_label);
    		}
    	}
    	// -- END HEADER
    	
    	int gap_afterHeader = 0;
    	
        WritableCellFormat cell_format_integer  = new WritableCellFormat(new NumberFormat(f_integer));
        WritableCellFormat cell_format_double   = new WritableCellFormat(new NumberFormat(f_double));
        
        for(int r=0; r<count_row; r++)
    	{
    		if( exportData[r].exportCol.length>0 )
        	{
	        	for(int c=0; c<columnValid; c++)
			{
        		
	    			String str_Cell = exportData[r].exportCol[c].valueCol.trim();	
	    			int typeCol=exportData[r].exportCol[c].typeCol;
	    			jxl.write.Number number;
	    			
	    			switch(typeCol)
	    			{
	    				case EXCEL_TYPE_INT: 
	    					{
	    						Double val_Cell = new Double(str_Cell);
		            				double double_cell = val_Cell.doubleValue();
		            				number = new jxl.write.Number(ARR_IDcolumnValid[c], (r+gap_afterHeader), double_cell,cell_format_integer);
		            				sheet.addCell(number); 
	    					}break;
	    				case EXCEL_TYPE_DOUBLE: 
	    					{
	    						Double val_Cell = new Double(str_Cell);
		            				double double_cell = val_Cell.doubleValue();
		            				number = new jxl.write.Number(ARR_IDcolumnValid[c], (r+gap_afterHeader), double_cell,cell_format_double);
		            				sheet.addCell(number); 	
	    					}break;
	    				case EXCEL_TYPE_STRING: 
	    					{
	    						Label label = new Label(ARR_IDcolumnValid[c], (r+gap_afterHeader), str_Cell);
	    						sheet.addCell(label);
	    					}break;
	    			}
	    			
				progressBar.setValue(r+1);     
				if(TH_EXIT)
				{
					progressBar.setForeground(java.awt.Color.red);
					jB_stop.setEnabled(false);
					jL_title.setText("EXCEL Export");
					int risp1 = staticLib.confirmPanel("Confirm request?","STOP EXCEL Export",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.INFORMATION_MESSAGE); 
					if(risp1 == 0)
					{                        
						jL_title.setText("EXCEL Export stopped!");
						jL_title.setIcon(icon_web_stop);
						
						chiudiFinestra();
						
	    					return;
					}
					
					TH_EXIT = false;
					progressBar.setForeground(java.awt.Color.blue);
					jB_stop.setEnabled(true);
				}
			}
	        }else
		{
			System.out.println("ERRORRE: riga nulla [row="+r+"].");
		}
	}
    	
        progressBar.setForeground(java.awt.Color.blue);
        jL_title.setText("EXCEL Export, please wait... ");
        
        workbook.write();
        workbook.close(); 
        
        progressBar.setValue(progressBar.getMaximum());
        progressBar.setForeground(java.awt.Color.green.darker());
        jL_title.setText("EXCEL Export done.");
        
        staticLib.optionPanel("Export EXCEL Done.", "Export EXCEL",javax.swing.JOptionPane.INFORMATION_MESSAGE);             
        
        
	setVisible(false);
        dispose();
		
    }
    
    private void chiudiFinestra()
    {
    	th = null;
	setVisible(false);
	dispose();
    }
    
    private void stampaDati()
    {
    	System.out.println("******************** DATI PER EXPORT **********************");
    	int numRow = exportData.length;
    	if(numRow>0)
    	{
	    	for(int r=0; r<numRow; r++)
	    	{
	    		int numCol = exportData[r].exportCol.length;
		    	for(int c=0; c<numCol; c++)
			{
	        	
	    			String str_Cell = exportData[r].exportCol[c].valueCol.trim();
	    			System.out.println("(r,c)=(" + r + "," + c + ") = " + str_Cell + "[typeCol=" + exportData[r].exportCol[c].typeCol +  "]");
	    		}
	    	}
	}else
	{
		System.out.println("NON ci sono righe.");	
	}
    	System.out.println("***********************************************************");	
    }
    
     private File openFileChooser(String nameFile)
    {
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setDialogTitle("Save as");
        fileChooser.setSelectedFile(new File(nameFile));
        int resp = fileChooser.showSaveDialog(this);
                
        if(resp == javax.swing.JFileChooser.APPROVE_OPTION)            
        {
            //System.out.println("APPROVE_OPTION");
            //System.out.println("getCurrentDirectory "+ fileChooser.getCurrentDirectory());
            //System.out.println("getSelectedFile "+ fileChooser.getSelectedFile()); 
            //System.out.println("getSelectedFile toString "+fileChooser.getSelectedFile().toString());
            return (fileChooser.getSelectedFile());
        }        
        else 
        {
            //System.out.println("CANCEL_OPTION or ERROR_OPTION");
            return null;
        }   
    }    

    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        
        if(TH_EXIT == false)
        {
            TH_EXIT = true;
        }
        else
        {
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_closeDialog

    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Dimension screenSize = kit.getScreenSize();        
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;        
        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));  
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel jL_title;
    private javax.swing.JButton jB_stop;
    // End of variables declaration//GEN-END:variables

    private final String defaultURL = staticLib.path_report;

    private String nomeFile = new String();
    private String nomeFile_csv = new String();
    private String nomeFile_pdf = new String();
    private String nomeFile_xls = new String();
    
    private javax.swing.JApplet JAppl;
    private javax.swing.JTable jTableElement;
    private EXPORT_ROW[] exportData;
    private String[] numKeyRelNAME;
    
    private String InitTagHTMLColumn = "<html><p align=center><b><font color=#FFFFFF>";
    private String TAG2 = "</font></p></b><p align=center><font face=\"Arial\" style=\"font-size:11pt\">";
    private String TAG3 = "</font></p></html>"; 
    
    private Thread th        = null;
    private boolean TH_EXIT = false;
    private int OperationTH   = -1;
    
    private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
    javax.swing.ImageIcon icon_web_stop = new javax.swing.ImageIcon(getClass().getResource("/images/web_stop.png"));
    
    private int decimalPosition;
    private int VALUE_DECIMAL = 0;
    private String f_integer = "0";
    //String f_percet_integer = "0%";
    private String f_double = "0";
    //String f_percet_double = "0.00%";

}
