import java.awt.Cursor;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;
/**
 *<p align="center"><font size="2"><b><font size="6" face="Times New Roman, Times, serif"> Network Traffic Matrix </font></b></font></p>
 *<p align="center"> <b>Author:</b></p>
 *<p align="center">-  Beltrame Luca  - luca.beltrame@e-tech.net</a></p>
 *<p align="center">-  Ficcadenti Raffaele  - raffaele.ficcadenti@e-tech.net</a></p>
 *
 * Classe di interfaccia grafica destinata alle selezioni di scelta del tipo di Analisi.
 * La classe estende un JPanel, strutturata da una JListIcon per le selezioni.
 * La lista viene popolata da una struttura dati di tipo <b>DATA_TIPOANALISI</b>.
 * <p align="center">&nbsp;</p> 
 * @see DATA_TIPOANALISI
 * @see JListIcon
 */
public class MDM_JP_SelectAnalisys extends javax.swing.JPanel {

    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Costruttore di classe:
     * il seguente costrutture accetta in ingresso due parametri,necessari per la popolazione
     * parametrica della lista di selezione. 		
     * </font></font></p></pre>  
     * @param struct_params riferimento all'oggetto <b>STRUCT_PARAMS</b>
     * @param configuration riferimento all'oggetto <b>getConfigFiltro</b>.
     * @see STRUCT_PARAMS 
     * @see getConfigFiltro
     */
    public MDM_JP_SelectAnalisys(STRUCT_PARAMS StructParams,getConfigFiltro Configuration) {
        
        //System.out.println("Controllare abilitazione delle tab");
        
        this.struct_params = StructParams;
        this.configuration = Configuration;
        
        localAnalisi = new Analisi(configuration.get_TipoAnalisi());
        
        initComponents();        

        jListIconAnalisys = new JListIcon(ip);
        jScroll_List.setViewportView(jListIconAnalisys);                 
        
        for(int i=0;i<localAnalisi.num_Analisi();i++)
        {
            jListIconAnalisys.addElement("item_analys_off.png","item_analys_on.png",localAnalisi.get_AnalisiLongDesc(i));
            //System.out.println(localAnalisi.get_idAnalisi(localAnalisi.get_AnalisiLongDesc(i))+" ----> "+localAnalisi.get_AnalisiLongDesc(i));
        }
        
        jListIconAnalisys.setSelectedIndex(0);
        
        jListIconAnalisys.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListIconAnalisys.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        }
        );
        
        if( isGhost(0) )
        {
            
            //System.out.println("isGhost(0)");
            staticLib.Tabella.setEnabledAt(1,false);
            staticLib.Tabella.setEnabledAt(2,true);
            staticLib.descRelation="None";
            //struct_params.Relation=8;            
            struct_params.Relation = staticLib.idGhostRel[jListIconAnalisys.getSelectedIndex()];
            
            //System.out.println("Start Analisi GHOST: "+struct_params.Relation);
            
        }
        this.struct_params.AnalysisType=localAnalisi.get_idAnalisi(jListIconAnalisys.getSelectedValue().toString().trim());
        staticLib.TipoAnalisiTAG=localAnalisi.get_countersKitTag(struct_params.AnalysisType);
               
                
        //cursor
        jListIconAnalisys.setCursor(Cur_hand);
        //Font
        jL_desc.setFont(staticLib.fontA10);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jL_desc = new javax.swing.JLabel();
        jScroll_List = new javax.swing.JScrollPane();

        setBackground(new java.awt.Color(183, 206, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Analysis ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11), new java.awt.Color(0, 0, 102))); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        jL_desc.setForeground(new java.awt.Color(0, 0, 102));
        jL_desc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png"))); // NOI18N
        jL_desc.setText("List of Analysis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jL_desc, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScroll_List, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private boolean isGhost(int i)
    {		
        return staticLib.ghostAnalisi[i];
    }
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Questo metodo ripristina la selezione della lista al valore di default.
     * il valore di default Ã¨ il primo elemento della Lista "item(0)".
     * </font></font></p></pre>  
     */
    public void resetAnalisi()
    {
        jListIconAnalisys.setSelectedIndex(0);		
    }
     
    
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) 
    {
        if (!evt.getValueIsAdjusting())
        {
            //System.out.println("ValueChanged Analisi GHOST: "+isGhost(jListIconAnalisys.getSelectedIndex()));
            struct_params.AnalysisType=localAnalisi.get_idAnalisi(jListIconAnalisys.getSelectedValue().toString().trim());
            staticLib.TipoAnalisiTAG=localAnalisi.get_countersKitTag(struct_params.AnalysisType);

            staticLib.mainFRAME.resetParam_forChangeAnalisys();
        
            //System.out.println("ANALISI: "+jListIconAnalisys.getSelectedValue().toString().trim()+ "  ID:"+struct_params.AnalysisType+"    LinkTAG: "+staticLib.TipoAnalisiTAG);
            //struct_params.Relation=8;
            if(isGhost(jListIconAnalisys.getSelectedIndex()))
            {
                staticLib.Tabella.setEnabledAt(1,false);
                staticLib.Tabella.setEnabledAt(2,true);	
                struct_params.Relation=staticLib.idGhostRel[jListIconAnalisys.getSelectedIndex()];
                staticLib.descRelation="None";

                //*************************************************************************
                // prendo i vincoli della ghost relation
                //*************************************************************************
                              
                Relation localRelation=new Relation(configuration.get_AllRelations());
                staticLib.vincoli=localRelation.get_Relation_conId(struct_params.Relation).tiedRestrictions;
                //System.out.println("Relation GHOST: "+struct_params.Relation);
                //*************************************************************************
            }
            else
            {
                staticLib.Tabella.setEnabledAt(1,true);	
                staticLib.Tabella.setEnabledAt(2,false);
                staticLib.Tabella.setEnabledAt(2,false);
                struct_params.Relation=-1;
                staticLib.vincoli=null;			
            }

            //System.out.println("SelectAnalisys <ID relation>: "+struct_params.Relation);
            struct_params.RelationDirection=0;
            struct_params.HexValue=0;            
            String desc=localAnalisi.get_ShortDescription(struct_params.AnalysisType);

            //if( (!desc.equals("STANDARD") ) && (!desc.equals("CALDET")) )

            //TipoAnalisi 22 == Standard(Weekly - Monthly)
            //TipoAnalisi 24 == Call Detail          
            //System.out.println("TipoAnalisi="+struct_params.AnalysisType+" desc="+desc);  
            
            Relation localRelation = new Relation(configuration.get_Relations(localAnalisi.get_relationList(struct_params.AnalysisType)));
            //System.out.println("numero relazioni caricate "+localRelation.num_Relation());            
            //System.out.println("RELAZIONE idAdmittedNetwork "+localRelation.idAdmittedNetwork());
         
            if(localRelation.idAdmittedNetwork() == -1) 
            {
                staticLib.jrbMERGE.setSelected(false);
                staticLib.jrbMERGE.setEnabled(false);
                staticLib.NTenabled=false;
                struct_params.NetworkRealTime=0; 
            }
            else
            {
                staticLib.jrbMERGE.setEnabled(true);
            }

            /*if(staticLib.sortPanel1!=null)
            {
                if( localAnalisi.get_FlagSort(jListIconAnalisys.getSelectedValue().toString().trim()) == false )
                {
                    staticLib.sortPanel1.jListSortBy.setEnabled(false);
                    staticLib.sortPanel1.jrb_Increasing.setEnabled(false);
                    staticLib.sortPanel1.jrb_Decreasing.setEnabled(false);
                    staticLib.selectReport1.jrb_PercentValue.setEnabled(false);
                    staticLib.selectReport1.jrb_AbsoluteValue.setEnabled(false);
                }
                else
                {
                    staticLib.sortPanel1.jListSortBy.setEnabled(true);
                    staticLib.sortPanel1.jrb_Increasing.setEnabled(true);
                    staticLib.sortPanel1.jrb_Decreasing.setEnabled(true);
                    staticLib.selectReport1.jrb_PercentValue.setEnabled(true);
                    staticLib.selectReport1.jrb_AbsoluteValue.setEnabled(true);
                }

                staticLib.sortPanel1.refresh();
            }*/

            if(staticLib.selectSummary1 != null)
            {
                if( localAnalisi.get_FlagSort(jListIconAnalisys.getSelectedValue().toString().trim()) == false )
                {
                    staticLib.selectSummary1.setCriteriaEnabled(false);
                }
                else
                {
                    staticLib.selectSummary1.setCriteriaEnabled(true);                    
                }
                staticLib.selectSummary1.refreshOrderCriteria();
            }


            if(staticLib.selectReport1 != null)
            {
                staticLib.selectReport1.refresh();
                staticLib.selectReport1.jListIconReport.setSelectedIndex(0); 
            }
            else
                staticLib.selectReport1.refresh();
                
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jL_desc;
    private javax.swing.JScrollPane jScroll_List;
    // End of variables declaration//GEN-END:variables

    private IconPool ip                 = new IconPool("/images/");
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Oggetto di tipo JListIcon, utilizzato per la selezione delle analisi.
     * </font></font></p></pre>  
     */
    private JListIcon jListIconAnalisys = null;
    
    private Cursor Cur_default      = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_hand         = new Cursor(Cursor.HAND_CURSOR);
    
    private STRUCT_PARAMS struct_params;
    private getConfigFiltro configuration;
    private Analisi localAnalisi;
}