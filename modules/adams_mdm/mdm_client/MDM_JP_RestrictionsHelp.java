/*
 * MDM_JP_RestrictionsHelp.java
 *
 * Created on 26 novembre 2004, 11.11
 */

/**
 *
 * @author  root
 */
import java.awt.Cursor;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;

public class MDM_JP_RestrictionsHelp extends javax.swing.JPanel {

    /** Creates new form MDM_JP_RestrictionsHelp */
    public MDM_JP_RestrictionsHelp(BufferRestrizioni BR, MDM_JP_RestrictionList RList, insiemi local_insiemi) 
    {
        this.br = BR;
        this.rList = RList;
        this.local_i =local_insiemi;
        
        initComponents();
                
        jcListOrder = new JComboIcon(ip);
        jcListOrder.setToolTipText("Order by ...");
        jcListOrder.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));

        jcListOrder.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt)  {
                jcListOrder_StateChanged(evt);
        }
        }
        );        

        jcListOrder.addElement("b_red.gif","b_green.gif","None");
        jcListOrder.addElement("b_blue.gif","b_green.gif","First Key");
        jcListOrder.addElement("b_blue.gif","b_green.gif","Second Key");
        jcListOrder.convalida();
        
        jcListOrder.setBounds(90, 20, 110, 20);
        jP_north.add(jcListOrder);
                
        //Font
        labelOrderBy.setFont(staticLib.fontA10);
        jcListOrder.setFont(staticLib.fontA10);
        jL_listforcategory.setFont(staticLib.fontA9);
        jL_search.setFont(staticLib.fontA10);
        jb_set.setFont(staticLib.fontA10);
        jb_reset.setFont(staticLib.fontA10);
        jcListOrder.setFont(staticLib.fontA9); 
        
        //Cursor
        jL_listforcategory.setCursor(Cur_hand);
        jcListOrder.setCursor(Cur_hand);
        jb_set.setCursor(Cur_hand);
        jb_reset.setCursor(Cur_hand);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
          jP_north = new javax.swing.JPanel();
          labelOrderBy = new javax.swing.JLabel();
          jScrollPane1 = new javax.swing.JScrollPane();
          jL_listforcategory = new javax.swing.JList();
          jP_south = new javax.swing.JPanel();
          jL_search = new javax.swing.JLabel();
          jT_search = new javax.swing.JTextField();
          jb_set = new javax.swing.JButton();
          jb_reset = new javax.swing.JButton();
          
          setLayout(new java.awt.BorderLayout());
          
          setBackground(new java.awt.Color(230, 230, 230));
          jP_north.setBackground(new java.awt.Color(230, 230, 230));
          jP_north.setPreferredSize(new java.awt.Dimension(100, 40));
          labelOrderBy.setText("Order by:");
          jP_north.add(labelOrderBy);
          
          add(jP_north, java.awt.BorderLayout.NORTH);
          
          jScrollPane1.setBackground(new java.awt.Color(230, 230, 230));
          jL_listforcategory.addKeyListener(new java.awt.event.KeyAdapter() {
              public void keyReleased(java.awt.event.KeyEvent evt) {
                  jL_listforcategoryKeyReleased(evt);
              }
          });
          
          jL_listforcategory.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mousePressed(java.awt.event.MouseEvent evt) {
                  jL_listforcategoryMousePressed(evt);
              }
          });
          
          jScrollPane1.setViewportView(jL_listforcategory);
          
          add(jScrollPane1, java.awt.BorderLayout.CENTER);
          
          jP_south.setLayout(new java.awt.GridBagLayout());
          java.awt.GridBagConstraints gridBagConstraints1;
          
          jP_south.setBackground(new java.awt.Color(230, 230, 230));
          jP_south.setPreferredSize(new java.awt.Dimension(100, 60));
          jL_search.setText("Search :");
          gridBagConstraints1 = new java.awt.GridBagConstraints();
          gridBagConstraints1.gridx = 0;
          gridBagConstraints1.gridy = 0;
          gridBagConstraints1.fill = java.awt.GridBagConstraints.VERTICAL;
          gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 0);
          gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
          jP_south.add(jL_search, gridBagConstraints1);
          
          jT_search.setMinimumSize(new java.awt.Dimension(4, 20));
          jT_search.setPreferredSize(new java.awt.Dimension(50, 20));
          jT_search.addKeyListener(new java.awt.event.KeyAdapter() {
              public void keyReleased(java.awt.event.KeyEvent evt) {
                  jT_searchKeyReleased(evt);
              }
          });
          
          gridBagConstraints1 = new java.awt.GridBagConstraints();
          gridBagConstraints1.gridx = 1;
          gridBagConstraints1.gridy = 0;
          gridBagConstraints1.gridwidth = 2;
          gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
          gridBagConstraints1.ipadx = 106;
          gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 0);
          jP_south.add(jT_search, gridBagConstraints1);
          
          jb_set.setBackground(new java.awt.Color(230, 230, 230));
          jb_set.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/apply.jpg")));
          jb_set.setToolTipText("Set Restriction");
          jb_set.setBorderPainted(false);
          jb_set.setContentAreaFilled(false);
          jb_set.setFocusPainted(false);
          jb_set.setMargin(new java.awt.Insets(0, 0, 0, 0));
          jb_set.setMaximumSize(new java.awt.Dimension(80, 22));
          jb_set.setMinimumSize(new java.awt.Dimension(80, 22));
          jb_set.setPreferredSize(new java.awt.Dimension(80, 22));
          jb_set.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/apply_press.jpg")));
          jb_set.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/apply_over.jpg")));
          jb_set.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jb_setActionPerformed(evt);
              }
          });
          
          gridBagConstraints1 = new java.awt.GridBagConstraints();
          gridBagConstraints1.gridx = 0;
          gridBagConstraints1.gridy = 1;
          gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 0);
          gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
          jP_south.add(jb_set, gridBagConstraints1);
          
          jb_reset.setBackground(new java.awt.Color(230, 230, 230));
          jb_reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.jpg")));
          jb_reset.setToolTipText("Reset Restriction");
          jb_reset.setBorderPainted(false);
          jb_reset.setContentAreaFilled(false);
          jb_reset.setFocusPainted(false);
          jb_reset.setMargin(new java.awt.Insets(0, 0, 0, 0));
          jb_reset.setMaximumSize(new java.awt.Dimension(80, 22));
          jb_reset.setMinimumSize(new java.awt.Dimension(80, 22));
          jb_reset.setPreferredSize(new java.awt.Dimension(80, 22));
          jb_reset.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel_press.jpg")));
          jb_reset.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel_over.jpg")));
          jb_reset.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jb_resetActionPerformed(evt);
              }
          });
          
          gridBagConstraints1 = new java.awt.GridBagConstraints();
          gridBagConstraints1.gridx = 2;
          gridBagConstraints1.gridy = 1;
          gridBagConstraints1.insets = new java.awt.Insets(3, 0, 3, 0);
          gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
          jP_south.add(jb_reset, gridBagConstraints1);
          
          add(jP_south, java.awt.BorderLayout.SOUTH);
        
    }//GEN-END:initComponents

    private void jT_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jT_searchKeyReleased
        java.util.Vector V_appo_searc = new java.util.Vector();
        String str_Press = jT_search.getText().toUpperCase();
        String appo;
        boolean flag=false;
        jL_listforcategory.setEnabled(true);
        for (int i=0; i<elementHelp.length; i++)
        {   
            appo=(String)elementHelp[i];
            if ( appo.toUpperCase().indexOf(jT_search.getText().toUpperCase()) >= 0 )
            {
                V_appo_searc.addElement(appo);
                flag=true;
            }
        }
        if(!flag)
        {
            V_appo_searc.addElement("Not Found");
            jL_listforcategory.setEnabled(false);
        }
        jL_listforcategory.clearSelection();
        jL_listforcategory.setListData(V_appo_searc);  
    }//GEN-LAST:event_jT_searchKeyReleased

    private void jb_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_resetActionPerformed
        try
        {
            jL_listforcategory.clearSelection();
            jL_listforcategory.setListData(elementHelp);
            jT_search.setText("");
            jL_listforcategory.setEnabled(true);
        }
        catch (Exception e)
        { 
            System.out.println("Exception MDM_JP_RestrictionsHelp ");
        }
    }//GEN-LAST:event_jb_resetActionPerformed

    private void jb_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_setActionPerformed
        regElement();
    }//GEN-LAST:event_jb_setActionPerformed

    private void jL_listforcategoryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_listforcategoryMousePressed
        if(evt.getClickCount()>=2)
            regElement();      
    }//GEN-LAST:event_jL_listforcategoryMousePressed

    private void jL_listforcategoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jL_listforcategoryKeyReleased
        if((evt.getKeyCode()==10)&&(!jT_search.getText().equals("")))
            regElement();
    }//GEN-LAST:event_jL_listforcategoryKeyReleased

    private void jcListOrder_StateChanged(java.awt.event.ItemEvent evt) 
    {
        if(jcListOrder.getSelectedIndex()>=0)
        {
            if(data_TF != null)
            {
                String str[] = staticLib.helpVector.get_Descrizioni_conId(data_TF.idElement+(1000*jcListOrder.getSelectedIndex()),false,-1);
                if(str!=null)
                {
                    setElementList(str,data_TF);
                    //System.out.println("Order By: "+jcListOrder.getSelectedIndex());
                }
            }
        }	
    }
    
    private void regElement()
    {
        Object[] obj = jL_listforcategory.getSelectedValues();
        java.util.StringTokenizer token;
        Integer val;

        int MAX_ELEMENT=obj.length;
        //System.out.println("Elementi selezionati: "+MAX_ELEMENT);
        if(MAX_ELEMENT > 0)
        {
            if(br.isPresentEB(data_TF.idElement) == null)
            {
                local_i.addInsieme(data_TF.idElement,(new String(data_TF.longDescription)).trim(),br.getSize());
            }

            for(int i=0;i<MAX_ELEMENT;i++)
            {
                token = new java.util.StringTokenizer((String)obj[i]," ");

                //val=Integer.valueOf(token.nextToken());
                String valAscii=token.nextToken();
                //System.out.println("TE: "+new String(data_TF.longDescription).trim()+"   Selected: "+val);

                br.addRestriction(data_TF.idElement,
                new String(data_TF.longDescription).trim(),
                //val.intValue(),
                valAscii,
                //""+val.intValue(),
                valAscii,
                //new String(data_TF.shortDescription).trim(),
                true,
                data_TF.compareSelection,
                data_TF.priority,-1);
                br.applicaEccezioni(data_TF.idElement);
            }
            rList.refreshList();
        }
    }
    public void setElementList(String[] str,DATA_DATAELEMENT data_TRAF_ELEM)
    {
        this.data_TF = data_TRAF_ELEM;
        if(str == null)
        {
            disabilita();
        }
        else
        {
            elementHelp=str;
            jT_search.setText("");
            jL_listforcategory.setListData(elementHelp);
            jb_set.setEnabled(true);
            jb_reset.setEnabled(true);
            jT_search.setEnabled(true);
            jL_search.setEnabled(true);
            jL_listforcategory.setEnabled(true);
            jcListOrder.setEnabled(true);
        }
        jL_listforcategory.validate();
    }
    
    public void disabilita()
    {

        String str[]={"Help not available"};
        setElementList(str,null);
        jb_set.setEnabled(false);
        jb_reset.setEnabled(false);
        jT_search.setEnabled(false);
        jL_search.setEnabled(false);
        jL_listforcategory.setEnabled(false);
        jT_search.setText("");
        jcListOrder.setEnabled(false);
        labelOrderBy.setEnabled(false);
    }
    
    
    public void reset()
    {
        jcListOrder.setSelectedIndex(0);
        jcListOrder.convalida();
        //System.out.println("SjcListOrder.setSelectedIndex(0)");
    }
	
    public void set_disable() //disable()
    {
        labelOrderBy.setEnabled(false);
        jcListOrder.setEnabled(false);
    }
	
    public void set_enable() //enable()
    {
        jcListOrder.setEnabled(true);
        labelOrderBy.setEnabled(true);
    }
	
    public String[] getStringValues(javax.swing.JList list)
    {
        Object[] items=list.getSelectedValues();
        String[] app;

        if(items==null)
            return null;
        app = new String[items.length];

        for(int i=0;i<items.length;i++) 
            app[i]=items[i].toString();

        return app;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jP_north;
    private javax.swing.JLabel labelOrderBy;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jL_listforcategory;
    private javax.swing.JPanel jP_south;
    private javax.swing.JLabel jL_search;
    private javax.swing.JTextField jT_search;
    private javax.swing.JButton jb_set;
    private javax.swing.JButton jb_reset;
    // End of variables declaration//GEN-END:variables

    //private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    //private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
    private IconPool ip = new IconPool("/images/");
    private JComboIcon jcListOrder;
    
    private String[] elementHelp;
    private DATA_DATAELEMENT data_TF;    
    private BufferRestrizioni br;
    private MDM_JP_RestrictionList rList;
    private insiemi local_i;
}

