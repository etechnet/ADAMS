/*
 * MDM_JF_TE_search.java
 *
 * Created on 18 settembre 2007, 10.19
 */

/**
 *
 * @author  luca
 */
import javax.swing.tree.*;
import javax.swing.JTree;
import java.awt.Cursor;
public class MDM_JF_TE_search extends javax.swing.JFrame {

    /** Creates new form MDM_JF_TE_search */
    public MDM_JF_TE_search(JTree jTreeRelation) {
        initComponents();
         
        this.jTree1= jTreeRelation;

        jListTE = new JListIcon(ip);
        jScrollPane1.setViewportView(jListTE);
                
        jListTE.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTE.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListTE_ValueChanged(evt);
            }
        }
        );
               
        jListFindRelation = new JListIcon(ip);
        jListFindRelation.set_Font(fontNoSel,fontNoSel);
        jScrollPane2.setViewportView(jListFindRelation);
        
        jListTE.setCursor(Cur_hand);
        jB_find.setCursor(Cur_hand);
        
        jTF_search.setFont(staticLib.fontA10);
        jLabel1.setFont(staticLib.fontA11);
        jLabel2.setFont(staticLib.fontA11);
        jLabel3.setFont(staticLib.fontA11);
        
        //jListFindRelation.setCursor(Cur_hand);
        
        prepareSearch();
        
        setCenteredFrame(700,600);
        //show();
	setVisible(true);
    }

    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Dimension screenSize = kit.getScreenSize();        
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;        
        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));  
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTF_search = new javax.swing.JTextField();
        jB_find = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jB_close = new javax.swing.JButton();
        
        setTitle("Search");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        jPanel1.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jPanel1.setBackground(new java.awt.Color(230, 230, 230));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints1);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 4;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        jPanel1.add(jScrollPane2, gridBagConstraints1);
        
        jLabel2.setText("All Traffic Elements");
        jLabel2.setPreferredSize(new java.awt.Dimension(122, 22));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel2, gridBagConstraints1);
        
        jLabel1.setText("View Relations");
        jLabel1.setPreferredSize(new java.awt.Dimension(92, 22));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel1, gridBagConstraints1);
        
        jPanel2.setBackground(new java.awt.Color(230, 230, 230));
        jPanel2.setMinimumSize(new java.awt.Dimension(273, 40));
        jPanel2.setPreferredSize(new java.awt.Dimension(273, 40));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/find.png")));
        jLabel3.setText("Search:");
        jPanel2.add(jLabel3);
        
        jTF_search.setMinimumSize(new java.awt.Dimension(200, 22));
        jTF_search.setPreferredSize(new java.awt.Dimension(200, 22));
        jTF_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_searchActionPerformed(evt);
            }
        });
        
        jTF_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTF_searchKeyReleased(evt);
            }
        });
        
        jPanel2.add(jTF_search);
        
        jB_find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_find.jpg")));
        jB_find.setToolTipText("Find");
        jB_find.setBorderPainted(false);
        jB_find.setContentAreaFilled(false);
        jB_find.setFocusPainted(false);
        jB_find.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_find_press.jpg")));
        jB_find.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_find_over.jpg")));
        jB_find.setEnabled(false);
        jB_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_findActionPerformed(evt);
            }
        });
        
        jPanel2.add(jB_find);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jPanel2, gridBagConstraints1);
        
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
        
        jPanel3.setBackground(new java.awt.Color(230, 230, 230));
        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.jpg")));
        jB_close.setToolTipText("Close");
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_press.jpg")));
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close_over.jpg")));
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_closeActionPerformed(evt);
            }
        });
        
        jPanel3.add(jB_close);
        
        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);
        
        pack();
    }//GEN-END:initComponents

    private void jB_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_closeActionPerformed
         closeFrame();
    }//GEN-LAST:event_jB_closeActionPerformed

    private void jListTE_ValueChanged(javax.swing.event.ListSelectionEvent evt) 
    {
        jTF_search.setText(jListTE.getSelectedValue().toString().trim());
        if(jTF_search.getText().trim().length() >0)
            jB_find.setEnabled(true);
        else
            jB_find.setEnabled(false);
    }
    
    private void jTF_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTF_searchKeyReleased
        if(jTF_search.getText().trim().length() >0)
            jB_find.setEnabled(true);
        else
            jB_find.setEnabled(false);
    }//GEN-LAST:event_jTF_searchKeyReleased

    private void jTF_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_searchActionPerformed
        if(jTF_search.getText().trim().length() >0)
            find_TE_jTree();
    }//GEN-LAST:event_jTF_searchActionPerformed

    private void jB_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_findActionPerformed
        find_TE_jTree();
    }//GEN-LAST:event_jB_findActionPerformed

    private void closeFrame()
    {
        this.setVisible(false);
        //this.dispose();
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        closeFrame();
    }//GEN-LAST:event_exitForm

    public void prepareSearch()
    {      
        java.util.Vector V = new java.util.Vector();
       
        for(int i=1;i<=jTree1.getRowCount();i++)
            jTree1.expandRow(i);

        int ROW = jTree1.getRowCount();
        //System.out.println("getRowCount "+ROW);

        for(int x=1;x<=ROW;x++)
        {
            //System.out.print("ROW --> "+x);                
            TreePath path = jTree1.getPathForRow(x);                
            if(path != null)
            {  
                int pathCount = path.getPathCount();
                if (pathCount >2)
                {
                    for(int i=1;i<pathCount;i++)
                    {                            
                        String text="  "+(path.getPathComponent(i)).toString();
                       /* if (i==path.getPathCount()-1)                        
                            System.out.print(" "+text);
                        else
                            System.out.print(" "+text+"::");*/
                        
                        V.addElement(text);                        
                    }
                    //System.out.println();
                }
               // else
                 //   System.out.println("************************************* **** **** "); 
            }
            //else
                //System.out.println("PATH NULL");                
        } 

        java.util.List list = V.subList(0,V.size());
        java.util.Collections.sort(list);
        
        Object[] items = list.toArray();
        for(int i=0;i<items.length;i++)
        {
            //System.out.println("items "+i+" ="+(String)items[i]);
            jListTE.addElementNotPresent("item_analys_off.png","item_analys_on.png",(String)items[i]);
        }
        
        
        for(int i=jTree1.getRowCount(); i>0;i--)
            jTree1.collapseRow(i);

    }
    
    private void find_TE_jTree()
    {
        String strSearch = jTF_search.getText().trim();
                
        if(strSearch.length() > 0)
        {
            java.util.Vector V_expandPATH = new java.util.Vector();
            
            for(int i=1;i<=jTree1.getRowCount();i++)
                jTree1.expandRow(i);
    
            int ROW = jTree1.getRowCount();
            //System.out.println("getRowCount "+ROW);
            
            for(int x=1;x<=ROW;x++)
            {
                //System.out.print("ROW --> "+x);                 
                TreePath path = jTree1.getPathForRow(x);
                
                if(path != null)
                {  
                    int pathCount = path.getPathCount();
                    if (pathCount >2)
                    {                        
                        boolean collapseFlag = false;
                        for(int i=1;i<pathCount;i++)
                        {                            
                            String text= (path.getPathComponent(i)).toString();                            
                            //System.out.print("-"+text+"-");
                            if( (text).indexOf(strSearch) != -1  )
                            {
                                V_expandPATH.addElement(path);
                                 
                               /* if (i==path.getPathCount()-1)                                 
                                    System.out.print(" "+text);
                                else
                                    System.out.print(" "+text+"::");  */
                                
                                break;
                            }
                        }                        
                    }
                   
                }              
            }
            
            jListFindRelation.removeAll();
            
            for(int i=jTree1.getRowCount(); i>0;i--)
                jTree1.collapseRow(i);
            
            for(int x=0; x<V_expandPATH.size(); x++)
            {                
                TreePath path = (TreePath)V_expandPATH.elementAt(x);
                TreePath AppoPath = null;
                
                String RelationFilter ="";
                for(int i=1;i<path.getPathCount();i++)
                {
                    String text= (path.getPathComponent(i)).toString();
                    if (i == path.getPathCount()-1)
                        RelationFilter += text;
                    else
                        RelationFilter += text+"::";
                    
                    if( text.indexOf(strSearch) != -1  )
                    {
                        if(AppoPath == null)
                            AppoPath = path.getParentPath();
                        else
                            AppoPath = AppoPath.getParentPath();
                            
                        jTree1.expandPath(AppoPath);
                    }
                }      
                
                //System.out.println("- RelationFilter "+RelationFilter);
                jListFindRelation.addElement("foglia.png","foglia.png",RelationFilter);
                
               /* for(int z=0; z<path.getPathCount(); z++)
                {
                    path = path.getParentPath();
                    jTree1.expandPath(path); 
                }*/
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTF_search;
    private javax.swing.JButton jB_find;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jB_close;
    // End of variables declaration//GEN-END:variables

    private JTree jTree1;
    
    private IconPool ip                 = new IconPool("/images/");    
    private JListIcon jListTE = null;
    private JListIcon jListFindRelation = null;
    
    private Cursor Cur_default      = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_hand         = new Cursor(Cursor.HAND_CURSOR);
    
    private java.awt.Font fontNoSel = new java.awt.Font ("Verdana", 0, 10);
    
}
