import java.awt.Cursor;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;

/**
 *<p align="center"><font size="2"><b><font size="6" face="Times New Roman, Times, serif"> Network Traffic Matrix </font></b></font></p>
 *<p align="center"> <b>Author:</b></p>
 *<p align="center">-  Beltrame Luca  - luca.beltrame@e-tech.net</a></p>
 *<p align="center">-  Ficcadenti Raffaele  - raffaele.ficcadenti@e-tech.net</a></p>
 *
 * Classe di interfaccia grafica destinata alle selezioni di scelta del tipo di Ordinamento.
 * <p align="center">&nbsp;</p> 
 * @see JListIcon
 */
public class MDM_JP_SelectSort extends javax.swing.JPanel {

    /**
     * Costruttore di classe:
     * il seguente costrutture accetta in ingresso un parametrti tipo <b>STRUCT_PARAMS</b>,
     * per valorizzarne i campi: <b>FlagSort</b>,<b>ElementToSort</b>,<b>Ascendente</b>,<b>HexValue</b>.
     * </font></font></p></pre>  
     * @param struct_params riferimento all'oggetto <b>STRUCT_PARAMS</b>
     */
    public MDM_JP_SelectSort(STRUCT_PARAMS StructParams,getConfigFiltro Configuration) {
        initComponents();
        
        this.configuration = Configuration;
        this.localCounters = new Counters(Configuration.get_Counters());
        this.struct_params = StructParams;
        
        ip = new IconPool("/images/");
        jListSortBy = new JListIcon(ip);
        jListSortBy.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListSortBy);

        refresh();
        
        jListSortBy.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        	        	jList1ValueChanged(evt);
	            	}
        	}
        	);
        
        //cursor
        jListSortBy.setCursor(Cur_hand);
        jrb_Increasing.setCursor(Cur_hand);
        jrb_Decreasing.setCursor(Cur_hand);
        

        //Font
        jL_desc.setFont(staticLib.fontA10);
        jrb_Increasing.setFont(staticLib.fontA10);
        jrb_Decreasing.setFont(staticLib.fontA10);
        jL_sortCriteria.setFont(staticLib.fontA10);        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttGroup1 = new javax.swing.ButtonGroup();
        buttGroup2 = new javax.swing.ButtonGroup();
        jL_desc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jL_sortCriteria = new javax.swing.JLabel();
        jP_SortCriteria = new javax.swing.JPanel();
        jrb_Increasing = new javax.swing.JRadioButton();
        jrb_Decreasing = new javax.swing.JRadioButton();
        
        
        setLayout(null);
        
        setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Order Criteria ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11), java.awt.Color.black));
        setBackground(new java.awt.Color(230, 230, 230));
        jL_desc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png")));
        jL_desc.setText("List of Order Criteria");
        jL_desc.setForeground(java.awt.Color.black);
        add(jL_desc);
        jL_desc.setBounds(10, 30, 260, 20);
        
        add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 260, 230);
        
        jL_sortCriteria.setText("Sort Criteria");
        jL_sortCriteria.setForeground(java.awt.Color.black);
        jL_sortCriteria.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        add(jL_sortCriteria);
        jL_sortCriteria.setBounds(10, 280, 260, 20);
        
        jP_SortCriteria.setLayout(new java.awt.GridLayout(1, 0));
        
        jP_SortCriteria.setBackground(new java.awt.Color(230, 230, 230));
        jrb_Increasing.setToolTipText("Increasing");
        jrb_Increasing.setText("Increasing");
        buttGroup1.add(jrb_Increasing);
        jrb_Increasing.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Increasing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Increasing.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Increasing.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Increasing.setFocusPainted(false);
        jrb_Increasing.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Increasing.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Increasing.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jrb_Increasing.setContentAreaFilled(false);
        jrb_Increasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_sortActionPerformed(evt);
            }
        });
        
        jP_SortCriteria.add(jrb_Increasing);
        
        jrb_Decreasing.setToolTipText("Decreasing");
        jrb_Decreasing.setText("Decreasing");
        buttGroup1.add(jrb_Decreasing);
        jrb_Decreasing.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Decreasing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Decreasing.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Decreasing.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Decreasing.setFocusPainted(false);
        jrb_Decreasing.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Decreasing.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Decreasing.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jrb_Decreasing.setContentAreaFilled(false);
        jrb_Decreasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_sortActionPerformed(evt);
            }
        });
        
        jP_SortCriteria.add(jrb_Decreasing);
        
        add(jP_SortCriteria);
        jP_SortCriteria.setBounds(10, 300, 260, 20);
        
    }//GEN-END:initComponents

    private void jrb_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_sortActionPerformed
        if(evt.getSource()==jrb_Increasing)
            struct_params.Ascendent=true;
        else 
            struct_params.Ascendent=false;
    }//GEN-LAST:event_jrb_sortActionPerformed

    public void refresh()
    {
        aggiornamento=true;
        jListSortBy.removeAll();
        jListSortBy.addElement("item_order_red.png","item_order_red.png",staticLib.sortBy[0]);
        //System.out.println("SelectSort(REFRESH) TipoAnalisiTAG: "+staticLib.TipoAnalisiTAG);
        try
        {
            java.util.Vector appoSort = localCounters.getDicitureSort(staticLib.TipoAnalisiTAG);
            
            if(appoSort.size()>0)
            {
                for(int i=0;i<appoSort.size();i++)
                {
                //jListSortBy.addElementWithBulb(4,Color.blue,Color.green,(String)appoSort.elementAt(i));
                jListSortBy.addElement("item_order_off.png","item_order_on.png",(String)appoSort.elementAt(i));
                //System.out.println("SORT.refresh(): "+(String)appoSort.elementAt(i));	
                }
            }	
        }
        catch(Exception e)
        {
            //System.out.println("Non ci sono contatori associati");	
        }
        resetSelectSort();
        aggiornamento=false;
    }
    
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Forza la selezione al valore di default <b>None</b>.
     * </font></font></p></pre>  
     */ 
    public void resetSelectSort()
    {
        jListSortBy.setSelectedIndex(0); 
        jrb_Increasing.setSelected(true);
        //jrb_PercentValue.setSelected(true);
        
        jrb_Increasing.setEnabled(false);
        jrb_Decreasing.setEnabled(false);
        
        //DEFAULT VALUE;
        //System.out.println("INDICE:"+jListSortBy.getSelectedIndex()); 
        struct_params.ElementToSort = 0;
        //struct_params.IsPercent = true;
        struct_params.Ascendent = true;
        struct_params.FlagSort = false;
    } 

    public void setSelectSort(boolean flagsort,int elemToSort,boolean ascend,int indexSelected)
    {
        if(elemToSort == 0)
        {
            resetSelectSort();
        }
        else
        {
            struct_params.FlagSort = flagsort;
            struct_params.ElementToSort = elemToSort;
            struct_params.Ascendent = ascend;
            
            jListSortBy.setSelectedIndex(indexSelected);
            jrb_Increasing.setEnabled(true);
            jrb_Decreasing.setEnabled(true);
            
            jrb_Increasing.setSelected(ascend);
            jrb_Decreasing.setSelected(!ascend);
        }
    }
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) 
    {
        if(aggiornamento==false)
        {
            if (!evt.getValueIsAdjusting())
            {
                if(jListSortBy.getSelectedIndex() == 0)
                {
                    struct_params.ElementToSort = 0;
                    struct_params.FlagSort = false;
                    //System.out.println("SORT: "+struct_params.ElementToSort);
                    
                    resetSelectSort(); 
                }
                else
                {
                    struct_params.FlagSort = true;
                    struct_params.ElementToSort = localCounters.getIdSort(staticLib.TipoAnalisiTAG,(String)jListSortBy.getSelectedValue());//jListSortBy.getSelectedIndex();
                    
                    jrb_Increasing.setEnabled(true);
                    jrb_Decreasing.setEnabled(true);
                    
                    //System.out.println("TAG AnalisiID: "+staticLib.TipoAnalisiTAG);
                    //System.out.println("SORT ID: "+struct_params.ElementToSort);
                    //System.out.println("TAG: "+localCounters.getDicituraSort(staticLib.TipoAnalisiTAG,struct_params.ElementToSort-1));
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttGroup1;
    private javax.swing.ButtonGroup buttGroup2;
    private javax.swing.JLabel jL_desc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jL_sortCriteria;
    private javax.swing.JPanel jP_SortCriteria;
    public javax.swing.JRadioButton jrb_Increasing;
    public javax.swing.JRadioButton jrb_Decreasing;
    // End of variables declaration//GEN-END:variables

    private IconPool ip            = null;
    public JListIcon jListSortBy   = null;
    
    //private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    //private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
    private getConfigFiltro configuration;
    private STRUCT_PARAMS struct_params;
    private Counters localCounters;
    private boolean aggiornamento = true;
}