import java.util.Vector;
import javax.swing.JOptionPane;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.Dimension;

/**
 *<p align="center"><font size="2"><b><font size="6" face="Times New Roman, Times, serif"> Network Traffic Matrix </font></b></font></p>
 *<p align="center"> <b>Author:</b></p>
 *<p align="center">-  Beltrame Luca  - luca.beltrame@e-tech.net</a></p>
 *
 * Questa classe viene utilizzata per effettuare l'accesso all'applicativo. 
 * L'interfaccia, mette a disposizione componenti grafici per effettuare l'operazione di logon, viene richiesto all'utente
 * l'inserimento di una user-login e password, la classe tramite chiamata al server richiede se l'operazione di logon
 * effettuata risulta idonea per l'accesso all'applicativo NTM. 
 * La richiesta di controllo user-login e password viene effettuata tramite il metodo getUserProfile(user-login,password) 
 * della classe connCORBA (dichiarata e istanziate nella classe globale staticLib); se il metodo ritorna con esito positivo, 
 * viene effettuato un cotrollo per rilevare il livello di accesso dell'utente (abilitazioni consentite).
 *  * 
 * Inoltre l'interfaccia MDM_JD_ChangePWD mette a disposizione un form per effettuare il cambio della password dell'utente,
 * la classe MON_D_ChangePWD viene richiamata tramite specifico pulsante "Change password". 
 *
 *@see MDM_JD_ChangePWD
 */
public class MDM_JF_LoginStart_1 extends javax.swing.JFrame implements Runnable {


    /** 
     * Costruttore di default della classe.
     */
    public MDM_JF_LoginStart_1(javax.swing.JApplet applet) 
    {        
        this.appoJA = applet;

        connOK = staticLib.CORBA.openConnection();
        
        System.out.println("MDM STart");
        
        if(connOK)
            System.out.println("Connection CORBA... ok.");
        else
            System.out.println(" - Error Connection CORBA.");
            
            
        connOK = connOK & staticLib.CORBA.openConnection_config();
        
        
        if(connOK)
            System.out.println("Connection CONFIG... ok.");
        else
            System.out.println(" - Error Connection CONFIG.");
        
        if(staticLib.CORBA.openConnection_BuildJob())
        {
            System.out.println("Connection BUILD JOB... ok.");
        }else
        {
            System.out.println(" - Error Connection BUILD JOB.");
        }

        int j;
        if(connOK == true)
        {	
        	/* per test plugin */
		/*try {          
			plugin_base p_base=(plugin_base)Class.forName("plugin_numu").newInstance();
			
			p_base.pluginSetupConfig();
			p_base.pluginWorker();
			
			p_base.shutdown();
			
		} catch ( Exception e ) {
			e.printStackTrace() ;
		}*/

	
            initComponents();

            jCBox.setEnabled(false);
            jB_OK.setEnabled(false);

            event_KEY = (new java.awt.event.KeyAdapter() {
                    public void keyPressed(java.awt.event.KeyEvent evt) {
                    jT_KeyPressed(evt);
            }
            });

           
            jB_close.setCursor(Cur_hand);
            jCBox.setCursor(Cur_hand);
            jB_OK.setCursor(Cur_hand); 
            jL_icon.setFont(staticLib.fontA10);
            jCBox.setFont(staticLib.fontA9);
            jlBar.setFont(staticLib.fontA10);
                        
            //this.setSize(new java.awt.Dimension(298,438));
            int iRet=check_Login();
            if (iRet==-1)
                return;
            setCenteredFrame(400,300);
            //show();
	    this.setVisible(true);
	
        }
        else
        {
                staticLib.optionPanel("Connection failure.", "Errore",JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jP_TOT = new javax.swing.JPanel();
        jL_icon = new javax.swing.JLabel();
        jP_south = new javax.swing.JPanel();
        jCBox = new javax.swing.JComboBox();
        jlBar = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jB_close = new javax.swing.JButton();
        jB_OK = new javax.swing.JButton();

        setTitle("NTM Authentication");
        setBackground(new java.awt.Color(230, 230, 230));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jP_TOT.setBackground(new java.awt.Color(145, 181, 255));
        jP_TOT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 4));
        jP_TOT.setMinimumSize(new java.awt.Dimension(400, 300));
        jP_TOT.setPreferredSize(new java.awt.Dimension(400, 300));
        jP_TOT.setLayout(new java.awt.GridBagLayout());

        jL_icon.setBackground(new java.awt.Color(255, 255, 255));
        jL_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brends/mdm_381x54.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 104;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jP_TOT.add(jL_icon, gridBagConstraints);

        jP_south.setBackground(new java.awt.Color(183, 206, 255));
        jP_south.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));
        jP_south.setForeground(new java.awt.Color(255, 255, 255));
        jP_south.setMinimumSize(new java.awt.Dimension(250, 100));
        jP_south.setPreferredSize(new java.awt.Dimension(250, 100));
        jP_south.setLayout(new java.awt.GridBagLayout());

        jCBox.setBackground(new java.awt.Color(255, 255, 255));
        jCBox.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jP_south.add(jCBox, gridBagConstraints);

        jlBar.setForeground(new java.awt.Color(0, 0, 102));
        jlBar.setText("Loading...");
        jlBar.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 62;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jP_south.add(jlBar, gridBagConstraints);

        jProgressBar1.setForeground(new java.awt.Color(0, 255, 0));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(10, 18));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(148, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        jP_south.add(jProgressBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jP_TOT.add(jP_south, gridBagConstraints);

        jB_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_close.png"))); // NOI18N
        jB_close.setToolTipText("CLOSE");
        jB_close.setBorderPainted(false);
        jB_close.setContentAreaFilled(false);
        jB_close.setFocusPainted(false);
        jB_close.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_close_press.png"))); // NOI18N
        jB_close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_close_over.png"))); // NOI18N
        jB_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        jP_TOT.add(jB_close, gridBagConstraints);

        jB_OK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_ok.png"))); // NOI18N
        jB_OK.setToolTipText("Start M.D.M.");
        jB_OK.setBorderPainted(false);
        jB_OK.setContentAreaFilled(false);
        jB_OK.setFocusPainted(false);
        jB_OK.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jB_OK.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_OK.setMaximumSize(null);
        jB_OK.setMinimumSize(null);
        jB_OK.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_ok_press.png"))); // NOI18N
        jB_OK.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buttons/b_ok_over.png"))); // NOI18N
        jB_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        jP_TOT.add(jB_OK, gridBagConstraints);

        getContentPane().add(jP_TOT, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        if(firstToBack) 
        {          
            final javax.swing.JFrame f = this;
            new Thread() 
            { 
                public void run() 
                {
                    try { Thread.sleep(300); } catch(InterruptedException ie) {}  
                    f.toFront();
                }
            }.start();            
            firstToBack = false;
        }
    }//GEN-LAST:event_formWindowDeactivated

    private void jB_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ActionPerformed
        this.setCursor(Cur_wait);
        Object target = evt.getSource();

        if (target == jB_close)
        {
            //System.out.println("jB_close");
            closeFrame();
        }
        else // button jB_OK
        {
            stepStart_th = 0;
            t = null;
            TH_EXIT = false;
            t = new Thread(this,"ProgressBar");
            t.start();
            
            configuration = staticLib.CORBA.getConfiguration((String)jCBox.getSelectedItem());
            
            stepStart_th = 1;
            
            staticLib.NameConfig = new String((String)jCBox.getSelectedItem());

            if(configuration!=null)
            {
                if(connOK)
                {
                    stepStart_th = 2;                    
                }
                else
                {
                    stepStart_th = -1;
                    setProgresBar(0,"");
                    staticLib.optionPanel("Connessione con il MS non stabilita.", "Errore",JOptionPane.ERROR_MESSAGE);
                }               
            }
            else
            {
                stepStart_th = -1;
                setProgresBar(0,"");
                staticLib.optionPanel("Configuration not Found.", "Errore",JOptionPane.ERROR_MESSAGE);
            }                
        }
        this.setCursor(Cur_default);
    }//GEN-LAST:event_jB_ActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.closeFrame();
    }//GEN-LAST:event_exitForm

    public void closeFrame()
    {
       // t = null;
        TH_EXIT = true;
        dispose();
    }
 
   
    public void run()
    {               
        setGui_enabled(false);
        this.setCursor(Cur_wait);
        
        int count_progressStep = 5;
       
        if(stepStart_th == 0)
        {
            for(int i=0; i<10; i++)
            {
                if(TH_EXIT)
                    return;
                
                setProgresBar(count_progressStep,"Status Loading: "+count_progressStep+"%");
                count_progressStep = count_progressStep+2;
                try
                {
                    Thread.sleep(600);                    
                }catch(InterruptedException e){}

                if(stepStart_th != 0)
                    break;
                else
                    stepStart_th = 1;
            }            
        }                   
        
        count_progressStep = count_progressStep+2;
        if(stepStart_th == 1)
        {
            setProgresBar(count_progressStep,"Status Loading: "+count_progressStep+"%");
            int count_attesa = 480;
            while(stepStart_th == 1)
            { 
                if(TH_EXIT)
                    return;
                try
                {
                    Thread.sleep(500);
                    //System.out.println("Attesa....");
                    count_attesa--;
                    if(count_attesa == 0)
                        break;
                    
                }catch(InterruptedException e){}  
            }
        }
          
        count_progressStep = count_progressStep+2;
        if(stepStart_th == 2)
        {
            if (ntmframe==null)
            {
                if(TH_EXIT)
                    return;
                
                setProgresBar(count_progressStep,"Status Loading: "+count_progressStep+"%");
                ntmframe = new MDM_JF_Frame(jProgressBar1,jlBar,appoJA,configuration);
                closeFrame();
                stepStart_th = -1;
            }
            else
            {   
                ntmframe.toFront();
                closeFrame();
                stepStart_th = -1;
            }
        }

        if(stepStart_th == -1) //uscita
        {
            setProgresBar(0,"");       
        }
        
        this.setCursor(Cur_default);
        setGui_enabled(true);
     }
         
    private void setGui_enabled(boolean state)
    {
        jB_close.setEnabled(state);
        jB_OK.setEnabled(state);
        jCBox.setEnabled(state);  
        this.repaint();
    }
     
    private void setGui_enabled(boolean state, String str)
    {	 
        if (state == false)
        {   
            
            jCBox.removeAllItems();
        }
        else
        {    
        }
        jB_OK.setEnabled(state);
        jCBox.setEnabled(state);
    }
       
    private void jT_KeyPressed(java.awt.event.KeyEvent evt) 
    {
        setGui_enabled(false,"");
    }
    
    private int check_Login()
    {
        this.setCursor(Cur_wait);
        String str = "Uknow User";

        
        staticLib.STS_RC_GRANT_READ = false;
        staticLib.STS_RC_GRANT_EDIT = false;
        
        
        //str_login = jTF_login.getText();
        //String str_PWD = new String(jPF_pwd.getPassword()).trim();

        String str_Login = new String(staticLib.utenza);
	String str_PWD = new String(staticLib.token);

	//System.out.println("utenza="+staticLib.utenza);
	//System.out.println("str_Login="+str_Login);
            
        if ( (staticLib.utenza.compareTo("")!=0) && (staticLib.token.compareTo("")!=0) )
        {
            boolean flag	= false;
            int index	= 0;
            
            //boolean Authentication = staticLib.CORBA.LoginUser(str_Login,str_PWD,false);
            //System.out.println("Authentication ==> "+Authentication +" ----- RUOLO ==>"+staticLib.RUOLO);

						jCBox.addItem( new String("N.T.M.-Voce-Standard") );
						str = ("Welcome "+("ADAMS Test").trim());
            setGui_enabled(true,str);
            this.setCursor(Cur_default);
            
            /*if(Authentication == true)
            {
                S_USER sUser=staticLib.CORBA.getUserConfiguration(str_Login,staticLib.ID_MOD_NTM);

                if(sUser.profileSeq.length!=0)
                {
                    str = ("Welcome "+(new String(sUser.login)).trim());
                    setGui_enabled(true,str);
                    this.setCursor(Cur_default);
                    jCBox.removeAllItems();

                    //System.out.println("Ok, utente riconosciuto.");

                    for(int i=0;i<sUser.profileSeq.length;i++)
                    {
                        //System.out.println("Profile: "+new String(sUser.profileSeq[i].profile).trim());
                        //System.out.println("nFunzioni: "+sUser.profileSeq[i].functionSeq.length);


                        for(int j=0;j<sUser.profileSeq[i].functionSeq.length;j++)
                        {
                            //System.out.println("Function: "+new String(sUser.profileSeq[i].functionSeq[j].nameFunction).trim()+" ID: "+sUser.profileSeq[i].functionSeq[j].idFunction);
                            
                            
                            if( (new String(sUser.profileSeq[i].functionSeq[j].nameFunction).trim()).compareToIgnoreCase(staticLib.nameFunction_Read) == 0 )
                            {
                                staticLib.STS_RC_GRANT_READ = true;
                            }
                            else if ( (new String(sUser.profileSeq[i].functionSeq[j].nameFunction).trim()).compareToIgnoreCase(staticLib.nameFunction_Read_Edit) == 0 )
                            {
                                staticLib.STS_RC_GRANT_READ = true;
                                staticLib.STS_RC_GRANT_EDIT = true;
                            }
                            else
                                jCBox.addItem( new String(sUser.profileSeq[i].functionSeq[j].nameFunction).trim() );
                        }
                    }

                    
                    //System.out.println("PROFILE: ="+new String(sUser.profileSeq[0].profile).trim());
                    NTM_PROFILE_GRANT sProfile=staticLib.CORBA.getProfileConfigurationNTM(new String(sUser.profileSeq[0].profile).trim());

                    if(sProfile!=null)
                    {
                        //System.out.println("completeCalendar="+sProfile.completeNumber);
                        //System.out.println("wideCalnedar="+sProfile.wideCalnedar);

                        staticLib.flagPass=sProfile.completeNumber;
                        staticLib.flagCalendar=sProfile.wideCalnedar;
												staticLib.codaNumber=sProfile.queeNumber;
                        staticLib.jobSched = sProfile.jobSched;
                        //System.out.println("jobSched="+staticLib.jobSched);
                        
                        if(sProfile.queeNumber==0)
                        {
                            staticLib.utentePrivileggiato = true;
                        }else
                        {
                            staticLib.utentePrivileggiato = false;
                        }
                    }

                    return 1;
                }else
                {
                    staticLib.optionPanel("User without profile. ","Error Message",javax.swing.JOptionPane.ERROR_MESSAGE);
                    this.setCursor(Cur_default);
                    return -1;
                }
            }
            else
            {
                staticLib.optionPanel("User not allowed. ","Error Message",javax.swing.JOptionPane.ERROR_MESSAGE);
								this.setCursor(Cur_default);
                return -1;
            }*/
            
            /*USER_PROFILE up=null;//staticLib.CORBA.getUserProfile(staticLib.utenza,staticLib.token);

            if (up!=null)
            {
                str = ("Welcome "+(new String(up.descUser)).trim());
                idUser=up.ID_User;
                setGui_enabled(true,str);
                this.setCursor(Cur_default);
                jCBox.removeAllItems();
                //System.out.println("Ok, utente riconosciuto.");


                for(int i=0;i<up.ModuleEnalbled.length;i++)
                {
                    //if(up.ModuleEnalbled[i].ID_Module==staticLib.CORBA.STSEntryRef.local_ID_MOD_NTM)
                    if(up.ModuleEnalbled[i].ID_Module==local_ID_MOD_NTM)
                    {
                        if(up.ModuleEnalbled[i].idProfilo!=0)
                        {
                            //System.out.println("get profilo: "+(new String(up.ModuleEnalbled[i].nameProfilo)).trim());
                            ntmUser=staticLib.CORBA.readUsers( (new String(up.ModuleEnalbled[i].nameProfilo)).trim() );
                            break;
                        }else
                        {
                            //System.out.println("get utente semplice: "+str_Login);
                            ntmUser = staticLib.CORBA.readUsers(str_Login);
                            break;
                        }
                    }
                }

                //ntmUser=staticLib.CORBA.readUsers(up.login).trim());
                System.out.println("ntmUser.length="+ntmUser.length);
                if(ntmUser != null)
                {
                    for (int i=0;i<ntmUser.length;i++)
                    {
                        int j=0;
                        while( ! ((new String(ntmUser[i].enabledConfigurations[j])).trim()).equals("") )
                        {
                            strConfig.addElement((new String(ntmUser[i].enabledConfigurations[j])).trim());
                            System.out.println((new String(ntmUser[i].enabledConfigurations[j])).trim());
                            jCBox.addItem((new String(ntmUser[i].enabledConfigurations[j])).trim());
                            j++;
                        }
                    }
		    	if(ntmUser.length>0)
		    	{
		    		//System.out.println("ntmUser[i].configAdmin=: "+ntmUser[0].configAdmin);
		    		staticLib.flagPass=ntmUser[0].userAdmin;
                                staticLib.flagCalendar=ntmUser[0].configAdmin;
			}else
			{
				staticLib.flagPass=false;
                                staticLib.flagCalendar=false;
			}
                }
                else
                {
                    //System.out.println("Nessun profilo configurato");
                    str = ("User "+str_Login+" without a profile");
                    setGui_enabled(true,str);
                    jB_OK.setEnabled(false);
                    jCBox.setEnabled(false);
                    this.setCursor(Cur_default);
		    staticLib.flagPass=false;
                    staticLib.flagCalendar=false;
                    return -1;
                }
            }else
            {
                staticLib.optionPanel("User not allowed. ","Error Message",javax.swing.JOptionPane.ERROR_MESSAGE);
                str = ("Unknown User");
                setGui_enabled(false,str);
                this.setCursor(Cur_default);
                return -1;
            }*/
        }
        return 1;
    }
    
    private void setCenteredFrame(int width,int height)
    {
        java.awt.Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();        
        int screenWCenter = screenSize.width/2;
        int screenHCenter = screenSize.height/2;
        
        this.setSize(width,height);
        this.setLocation(screenWCenter-(width/2),screenHCenter-(height/2));
    }
    
    private void setProgresBar(int value,String str)		
    {
    	jProgressBar1.setValue(value);
        jlBar.setText(str);
       
        jProgressBar1.repaint();
        jlBar.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_OK;
    private javax.swing.JButton jB_close;
    private javax.swing.JComboBox jCBox;
    private javax.swing.JLabel jL_icon;
    private javax.swing.JPanel jP_TOT;
    private javax.swing.JPanel jP_south;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jlBar;
    // End of variables declaration//GEN-END:variables


    //public static Ntm_Frame ntmframe        = null;       // nello
    public MDM_JF_Frame ntmframe            = null;
        
    public Vector strConfig                 = new Vector();	
    private getConfigFiltro configuration   = null;
 //    private ADAMS_USER[] AdamsUser              = null;
//    public String str_login;
    public int idUser; 
    private boolean connOK;
    public int local_ID_MOD_NTM             = 1;

    /*
    * Thread per la gestione della status bar
    */
    private Thread t = null;
    private int stepStart_th  = -1; //avanzamento step del Thread
    
    private javax.swing.JApplet appoJA = null;
    
    private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    
    private java.awt.event.KeyListener event_KEY;
    private boolean TH_EXIT = false;
    private boolean firstToBack = true;
}
