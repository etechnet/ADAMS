import java.awt.Cursor;
import java.awt.Color;
import javax.swing.tree.*;
import com.sun.java.swing.plaf.windows.*;
import javax.swing.JTree;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;

/**
 *<p align="center"><font size="2"><b><font size="6" face="Times New Roman, Times, serif"> Network Traffic Matrix </font></b></font></p>
 *<p align="center"> <b>Author:</b></p>
 *<p align="center">-  Beltrame Luca  - luca.beltrame@e-tech.net</a></p>
 *<p align="center">-  Ficcadenti Raffaele  - raffaele.ficcadenti@e-tech.net</a></p>
 *
 * Classe di interfaccia grafica destinata alla costruzione dell'albero rappresentante tutte le Relazioni che l'utente
 * puï¿½ selezionare per una successiva elaborazione.
 * La classe ï¿½ strettamente legata alla struttura delle Relazioni, ed ï¿½ completamente dinamica.
 * <p align="center">&nbsp;</p> 
 * @see DATA_RELATIONS
 * @see getConfigFiltro
 * @see Relation
 */
public class MDM_JP_SelectRelations extends javax.swing.JPanel {

    /** 
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Costruttore della classe.
     * Il costruttore istanzia e configura l'alberatura delle relazioni sulla base della configurazione passata
     * in input(configuration),ed inoltre accetta in input la  struttura fda popolare rispetto alle 
     * selezioni effettuate.
     * </font></font></p></pre>  
     * @param Configuration oggetto ti tipo <b>getConfigFiltro</b>, contenente l'intera configurazione,
     * @param StructParams oggetto di tipo <b>STRUCT_PARAMS</b> contenente le eventuali selezioni effettuate dall'utente.
     * @see getConfigFiltro
     * @see STRUCT_PARAMS  
     */
    public MDM_JP_SelectRelations(getConfigFiltro Configuration,STRUCT_PARAMS StructParams,BufferRestrizioni BR) 
    {
        this.br = BR;
        this.configuration = Configuration;
        this.struct_params = StructParams;
        
        localDataElement = new TrafficElement(configuration.get_Traffic_Elements());
        localAnalisi        = new Analisi(configuration.get_TipoAnalisi());

        DATA_EXCEPTIONS[] localException=configuration.get_Exceptions();
        //////System.out.println("****************> <Eccezioni>: "+localDataElement.localElement.length);
        //for(int i=0;i<localException.length;i++)
           //System.out.println("ID: "+ localException[i].idException+"  TRIGGER_R:"+localException[i].idTriggerRestriction+" TRIGGRE_STATUS: "+localException[i].triggeredStatus +"  ACTION:  "+localException[i].action+" AGGREGATE_EXCEPTION: "+localException[i].idAggregateException);

        //System.out.println("****************> <DataElement>: "+localDataElement.localElement.length);
        //for(int i=0;i<localDataElement.localElement.length;i++)
        //{
            //System.out.println("ID: "+ localDataElement.localElement[i].idElement+"Desc: "+localDataElement.get_longDescription(localDataElement.localElement[i].idElement));		
        //}
        //creaStruct();
        
        initComponents();
                
        //DEFAULT VALUE:
        struct_params.RelationDirection=0;
        //struct_params.Relation=-1;
        staticLib.descRelation="";
        
        buttonGroup1.add(jrb_none1);
        jrb_none1.setSelected(true);
        
        //Font
        jrb_Direct.setFont(staticLib.fontA10);
        jrb_Inverse.setFont(staticLib.fontA10);
        jrb_Both.setFont(staticLib.fontA10);
        jrb_Decimal.setFont(staticLib.fontA10);
        jrb_Hex.setFont(staticLib.fontA10);
        jrb_prima.setFont(staticLib.fontA10);
        jrb_seconda.setFont(staticLib.fontA10);
        jrb_tutte.setFont(staticLib.fontA10);
        jl_Relation.setFont(staticLib.fontA11);
        jB_search.setFont(staticLib.fontA11);
        jB_FreeFormatRel.setFont(staticLib.fontA11);
       
        // Cursor
        jrb_Direct.setCursor(Cur_hand);
        jrb_Inverse.setCursor(Cur_hand);
        jrb_Both.setCursor(Cur_hand);
        jrb_Decimal.setCursor(Cur_hand);
        jrb_Hex.setCursor(Cur_hand);
        jrb_prima.setCursor(Cur_hand);
        jrb_seconda.setCursor(Cur_hand);
        jrb_tutte.setCursor(Cur_hand);
        jB_search.setCursor(Cur_hand);
        jB_FreeFormatRel.setCursor(Cur_hand);

        validateRelations();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jP_south = new javax.swing.JPanel();
        jl_Relation = new javax.swing.JLabel();
        jP_center = new javax.swing.JPanel();
        jScrollP_tree = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jB_search = new javax.swing.JButton();
        jB_FreeFormatRel = new javax.swing.JButton();
        jP_east = new javax.swing.JPanel();
        jL_relationDir = new javax.swing.JLabel();
        jP_relationDir = new javax.swing.JPanel();
        jrb_Direct = new javax.swing.JRadioButton();
        jrb_Inverse = new javax.swing.JRadioButton();
        jrb_Both = new javax.swing.JRadioButton();
        jL_dataFormat = new javax.swing.JLabel();
        jP_dataFormat = new javax.swing.JPanel();
        jrb_Decimal = new javax.swing.JRadioButton();
        jrb_Hex = new javax.swing.JRadioButton();
        jrb_prima = new javax.swing.JRadioButton();
        jrb_seconda = new javax.swing.JRadioButton();
        jrb_tutte = new javax.swing.JRadioButton();
        jP_graphics = new javax.swing.JPanel();
        jL_graphics = new javax.swing.JLabel();
        jP_button = new javax.swing.JPanel();
        jB_expands = new javax.swing.JButton();
        jB_reset = new javax.swing.JButton();
        
        
        setLayout(new java.awt.BorderLayout(10, 0));
        
        setBackground(new java.awt.Color(230, 230, 230));
        jP_south.setLayout(new java.awt.BorderLayout());
        
        jP_south.setBackground(new java.awt.Color(230, 230, 230));
        jP_south.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Selected Relation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jP_south.setMinimumSize(new java.awt.Dimension(69, 60));
        jP_south.setPreferredSize(new java.awt.Dimension(10, 60));
        jl_Relation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/foglia.png")));
        jl_Relation.setText("None");
        jP_south.add(jl_Relation, java.awt.BorderLayout.CENTER);
        
        add(jP_south, java.awt.BorderLayout.SOUTH);
        
        jP_center.setLayout(new java.awt.BorderLayout());
        
        jScrollP_tree.setBackground(new java.awt.Color(230, 230, 230));
        jScrollP_tree.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Relations ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jP_center.add(jScrollP_tree, java.awt.BorderLayout.CENTER);
        
        jPanel2.setBackground(new java.awt.Color(230, 230, 230));
        jPanel2.setMinimumSize(new java.awt.Dimension(273, 40));
        jPanel2.setPreferredSize(new java.awt.Dimension(273, 40));
        jB_search.setBackground(new java.awt.Color(230, 230, 230));
        jB_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/find.png")));
        jB_search.setText("Search");
        jB_search.setContentAreaFilled(false);
        jB_search.setFocusPainted(false);
        jB_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_searchActionPerformed(evt);
            }
        });
        
        jPanel2.add(jB_search);
        
        jB_FreeFormatRel.setBackground(new java.awt.Color(230, 230, 230));
        jB_FreeFormatRel.setText("Free Format Relation");
        jB_FreeFormatRel.setMaximumSize(new java.awt.Dimension(183, 32));
        jB_FreeFormatRel.setMinimumSize(new java.awt.Dimension(183, 32));
        jB_FreeFormatRel.setPreferredSize(new java.awt.Dimension(183, 32));
        jB_FreeFormatRel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FreeFormatRelActionPerformed(evt);
            }
        });
        
        jPanel2.add(jB_FreeFormatRel);
        
        jP_center.add(jPanel2, java.awt.BorderLayout.SOUTH);
        
        add(jP_center, java.awt.BorderLayout.CENTER);
        
        jP_east.setLayout(null);
        
        jP_east.setBackground(new java.awt.Color(230, 230, 230));
        jP_east.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Options ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jP_east.setPreferredSize(new java.awt.Dimension(300, 10));
        jL_relationDir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png")));
        jL_relationDir.setText("Relation Direct");
        jP_east.add(jL_relationDir);
        jL_relationDir.setBounds(20, 40, 260, 20);
        
        jP_relationDir.setLayout(new java.awt.GridLayout(1, 0));
        
        jP_relationDir.setBackground(new java.awt.Color(230, 230, 230));
        jP_relationDir.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(35, 121, 170), 1, true));
        jrb_Direct.setText("Direct");
        jrb_Direct.setToolTipText("Direct");
        buttonGroup1.add(jrb_Direct);
        jrb_Direct.setContentAreaFilled(false);
        jrb_Direct.setFocusPainted(false);
        jrb_Direct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_Direct.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Direct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Direct.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Direct.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Direct.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Direct.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Direct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_ActionPerformed(evt);
            }
        });
        
        jP_relationDir.add(jrb_Direct);
        
        jrb_Inverse.setText("Inverse");
        jrb_Inverse.setToolTipText("Inverse");
        buttonGroup1.add(jrb_Inverse);
        jrb_Inverse.setContentAreaFilled(false);
        jrb_Inverse.setFocusPainted(false);
        jrb_Inverse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_Inverse.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Inverse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Inverse.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Inverse.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Inverse.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Inverse.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Inverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_ActionPerformed(evt);
            }
        });
        
        jP_relationDir.add(jrb_Inverse);
        
        jrb_Both.setText("Both");
        jrb_Both.setToolTipText("Both");
        buttonGroup1.add(jrb_Both);
        jrb_Both.setContentAreaFilled(false);
        jrb_Both.setFocusPainted(false);
        jrb_Both.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_Both.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Both.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Both.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Both.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Both.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Both.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Both.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_ActionPerformed(evt);
            }
        });
        
        jP_relationDir.add(jrb_Both);
        
        jP_east.add(jP_relationDir);
        jP_relationDir.setBounds(20, 60, 260, 30);
        
        jL_dataFormat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png")));
        jL_dataFormat.setText("Data Format");
        jP_east.add(jL_dataFormat);
        jL_dataFormat.setBounds(20, 320, 120, 20);
        
        jP_dataFormat.setLayout(null);
        
        jP_dataFormat.setBackground(new java.awt.Color(230, 230, 230));
        jP_dataFormat.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jrb_Decimal.setSelected(true);
        jrb_Decimal.setText("Decimal");
        jrb_Decimal.setToolTipText("Decimal");
        buttonGroup2.add(jrb_Decimal);
        jrb_Decimal.setContentAreaFilled(false);
        jrb_Decimal.setFocusPainted(false);
        jrb_Decimal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Decimal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Decimal.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Decimal.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Decimal.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Decimal.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_ActionPerformed(evt);
            }
        });
        
        jP_dataFormat.add(jrb_Decimal);
        jrb_Decimal.setBounds(10, 0, 110, 38);
        
        jrb_Hex.setText("Hexadecimal");
        jrb_Hex.setToolTipText("Hexadecimal");
        buttonGroup2.add(jrb_Hex);
        jrb_Hex.setContentAreaFilled(false);
        jrb_Hex.setFocusPainted(false);
        jrb_Hex.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_Hex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off.gif")));
        jrb_Hex.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Hex.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over.gif")));
        jrb_Hex.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over.gif")));
        jrb_Hex.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on.gif")));
        jrb_Hex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_ActionPerformed(evt);
            }
        });
        
        jP_dataFormat.add(jrb_Hex);
        jrb_Hex.setBounds(10, 40, 110, 38);
        
        jrb_prima.setText("1st");
        jrb_prima.setToolTipText("1st");
        buttonGroup3.add(jrb_prima);
        jrb_prima.setContentAreaFilled(false);
        jrb_prima.setFocusPainted(false);
        jrb_prima.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_prima.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_prima.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_mini.gif")));
        jrb_prima.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_prima.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over_mini.gif")));
        jrb_prima.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_prima.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_mini.gif")));
        jrb_prima.setEnabled(false);
        jrb_prima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_psActionPerformed(evt);
            }
        });
        
        jP_dataFormat.add(jrb_prima);
        jrb_prima.setBounds(0, 90, 60, 18);
        
        jrb_seconda.setText("2nd");
        jrb_seconda.setToolTipText("2nd");
        buttonGroup3.add(jrb_seconda);
        jrb_seconda.setContentAreaFilled(false);
        jrb_seconda.setFocusPainted(false);
        jrb_seconda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_seconda.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_seconda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_mini.gif")));
        jrb_seconda.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_seconda.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over_mini.gif")));
        jrb_seconda.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_seconda.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_mini.gif")));
        jrb_seconda.setEnabled(false);
        jrb_seconda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_psActionPerformed(evt);
            }
        });
        
        jP_dataFormat.add(jrb_seconda);
        jrb_seconda.setBounds(60, 90, 60, 18);
        
        jrb_tutte.setSelected(true);
        jrb_tutte.setText("Both");
        jrb_tutte.setToolTipText("Both");
        buttonGroup3.add(jrb_tutte);
        jrb_tutte.setContentAreaFilled(false);
        jrb_tutte.setFocusPainted(false);
        jrb_tutte.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jrb_tutte.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrb_tutte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_mini.gif")));
        jrb_tutte.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_tutte.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_off_over_mini.gif")));
        jrb_tutte.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_over_mini.gif")));
        jrb_tutte.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check_on_mini.gif")));
        jrb_tutte.setEnabled(false);
        jrb_tutte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_psActionPerformed(evt);
            }
        });
        
        jP_dataFormat.add(jrb_tutte);
        jrb_tutte.setBounds(0, 110, 120, 18);
        
        jP_east.add(jP_dataFormat);
        jP_dataFormat.setBounds(20, 340, 120, 140);
        
        jP_graphics.setLayout(new java.awt.GridLayout(1, 0));
        
        jP_graphics.setBackground(new java.awt.Color(230, 230, 230));
        jP_graphics.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(31, 121, 170), 1, true));
        jL_graphics.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_graphics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/point.gif")));
        jP_graphics.add(jL_graphics);
        
        jP_east.add(jP_graphics);
        jP_graphics.setBounds(20, 95, 260, 220);
        
        jP_button.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jP_button.setBackground(new java.awt.Color(230, 230, 230));
        jP_button.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jB_expands.setBackground(new java.awt.Color(230, 230, 230));
        jB_expands.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/expands_tree.jpg")));
        jB_expands.setToolTipText("Expands Tree");
        jB_expands.setBorderPainted(false);
        jB_expands.setContentAreaFilled(false);
        jB_expands.setFocusPainted(false);
        jB_expands.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_expands.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/expands_tree_press.jpg")));
        jB_expands.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/expands_tree_over.jpg")));
        jB_expands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_expandsActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(9, 0, 9, 0);
        jP_button.add(jB_expands, gridBagConstraints1);
        
        jB_reset.setBackground(new java.awt.Color(230, 230, 230));
        jB_reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_tree.jpg")));
        jB_reset.setToolTipText("Reset");
        jB_reset.setBorderPainted(false);
        jB_reset.setContentAreaFilled(false);
        jB_reset.setFocusPainted(false);
        jB_reset.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jB_reset.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_tree_press.jpg")));
        jB_reset.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_tree_over.jpg")));
        jB_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_resetActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(9, 0, 9, 0);
        jP_button.add(jB_reset, gridBagConstraints1);
        
        jP_east.add(jP_button);
        jP_button.setBounds(160, 320, 120, 160);
        
        add(jP_east, java.awt.BorderLayout.EAST);
        
    }//GEN-END:initComponents

    private String getFreeFormatRelationName(java.util.Vector V_name)
    {
        String str_free_relationsName = "";
        String dot = " ::";            
        int num_rel = V_name.size();
        for(int i=0; i<num_rel; i++)
        {
            if(i == (num_rel-1))
                dot = "";

            str_free_relationsName = str_free_relationsName + ((String)V_name.elementAt(i)) +dot;
        }
        return str_free_relationsName;
    }
    
    
    private void jB_FreeFormatRelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FreeFormatRelActionPerformed
       // System.out.println("jB_FreeFormatRelActionPerformed");
        
        if(jD_RelationBuild == null)
        {
            jD_RelationBuild = new MDM_JD_RelationBuild(staticLib.frame_principale,this.configuration);
        }  
        
        //System.out.println(" struct_params.Relation --> "+struct_params.Relation);
        if(staticLib.RELATION_FREEFORMAT_ID == struct_params.Relation)
            jb_reset_forFreeFormat();
        else
            jb_reset();
        
        jD_RelationBuild.open_RelationBuild();
        
        if(jD_RelationBuild.get_ConfirmFreeReleation())
        {
            //System.out.println("OK confermata la FREE FORMAT RELATION");    
            
            
            java.util.Vector V_Free_RelationsName = jD_RelationBuild.get_V_RELATION_NAME();
            java.util.Vector V_Free_RelationsID = jD_RelationBuild.get_V_FREE_RELATION_ID();
            
            //System.out.println(" ********* ");           
            int findRel =  ctrl_RelationExist(V_Free_RelationsID);
            //System.out.println("findRel "+findRel);
            if(findRel > 1)
            {
                staticLib.optionPanel("This Free Format Relation: \n < "+getFreeFormatRelationName(V_Free_RelationsName)+" > \n is already on the list of Relations. ", "WARNING - Free Format Relation.",javax.swing.JOptionPane.WARNING_MESSAGE);  
                //System.out.println("RELAZIONE ESISTENTE NELLA CONFIGURAZIONE ---- return");
                return;
            }      
            
            //Controllo la dimensione in byte dei singoli TraffiElement per non susperare la dimensione MAX di una relazione
            //System.out.println(" **** Controllo byte MAX di una relazione *** " );
            int ctrl_byteSize = 0;
            for(int z=0; z<V_Free_RelationsID.size(); z++)
            {
                int id_TE_appo = (Integer)(V_Free_RelationsID.elementAt(z));
                
                //System.out.print("TE --> "+localDataElement.get_shortDescription(id_TE_appo));
                //System.out.println("  "+localDataElement.get_longDescription(id_TE_appo));
            
                int byte_TE = localDataElement.get_BiteSize_TE(id_TE_appo);
                //System.out.println("Size: "+byte_TE);
                ctrl_byteSize = ctrl_byteSize+byte_TE;
           }
            
            //System.out.println("Dimensione Relazione FreeFormat = "+ctrl_byteSize+" byte." );
            //System.out.println("MAX_KEY_LENGTH = "+staticLib.MAX_KEY_LENGTH+" byte." );
            
            if( ctrl_byteSize > staticLib.MAX_KEY_LENGTH )
            {
                staticLib.optionPanel("Relation length greater than max size (max "+staticLib.MAX_KEY_LENGTH+" byte).", "WARNING",javax.swing.JOptionPane.WARNING_MESSAGE);
                 return;
            }
            
            String str_free_relationsName = getFreeFormatRelationName(V_Free_RelationsName);            
            jl_Relation.setText(str_free_relationsName);            
            jL_graphics.setIcon(icon_point_direct);
            
            //++++++++++++
            staticLib.descRelation=str_free_relationsName;            
            staticLib.Tabella.setEnabledAt(2,true);
                            
            int idRel = staticLib.RELATION_FREEFORMAT_ID;            
            struct_params.Relation = idRel;
            int num_relID = V_Free_RelationsID.size();
            
            struct_params.freeFormat = true;
            struct_params.ffRelation = new int[staticLib.MAX_DIMENSION];
            //Azzero ffRelation
            for(int z=0; z<struct_params.ffRelation.length; z++)
                struct_params.ffRelation[z] = 0;
            
            // Inserisco gli ID della relazione FreeFormat
            for(int x=0; x<num_relID; x++)
                struct_params.ffRelation[x] = ((Integer)V_Free_RelationsID.elementAt(x)).intValue();
  
            
            //System.out.println(" localRelation.get_Relation_conId("+idRel+") ");
            DATA_RELATIONS appoR_free = configuration.get_Relations_FreeFormat();
            staticLib.vincoli=appoR_free.tiedRestrictions;            
            
            //System.out.println("ID REL: "+idRel);

            if(appoR_free.admitHexValues)
            {
                jrb_Decimal.setSelected(true);
                jrb_Decimal.setEnabled(true);
                jrb_Hex.setEnabled(true);
                struct_params.HexValue=0;
                jrb_prima.setEnabled(false);
                jrb_seconda.setEnabled(false);
                jrb_tutte.setEnabled(false);
                jrb_tutte.setSelected(true);    
            }
            else
            {
                jrb_Decimal.setEnabled(false);
                jrb_Hex.setEnabled(false); 
                struct_params.HexValue=0;
                jrb_prima.setEnabled(false);
                jrb_seconda.setEnabled(false);
                jrb_tutte.setEnabled(false);
            }

            if(appoR_free.admittedDirections==0) // diretta
            {
                jrb_Direct.setEnabled(true);
                jrb_Inverse.setEnabled(false);
                jrb_Both.setEnabled(false);

                jrb_Direct.setSelected(true);
                diretta=true;
                struct_params.RelationDirection=0;
                jL_graphics.setIcon(icon_point_direct);	
            }
            else if(appoR_free.admittedDirections==1) //inversa
            {
                jrb_Direct.setEnabled(false);
                jrb_Inverse.setEnabled(true);
                jrb_Both.setEnabled(false);

                jrb_Inverse.setSelected(true);
                jl_Relation.setText(inverti(jl_Relation.getText()));
                diretta=false;
                struct_params.RelationDirection=1;	
                jL_graphics.setIcon(icon_point_inverse);																		
            }
            else if(appoR_free.admittedDirections==2) //entrambe
            {
                jrb_Direct.setEnabled(true);
                jrb_Inverse.setEnabled(true);
                jrb_Both.setEnabled(true);

                jrb_Direct.setSelected(true);
                diretta=true;
                struct_params.RelationDirection=0;
                jL_graphics.setIcon(icon_point_both);
            }
            // ++++++++++++          

        }
                
        // Add your handling code here:
    }//GEN-LAST:event_jB_FreeFormatRelActionPerformed

    private void reset_StructFreeFormat()
    {
        struct_params.freeFormat = false;
        struct_params.ffRelation = new int[staticLib.MAX_DIMENSION];        
    }
    
    public void closeFrameSearch()
    {
        if(JF_TE_search != null)
            JF_TE_search.setVisible(false);
    }
    
    private void jB_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_searchActionPerformed
        
        if(JF_TE_search == null)
            JF_TE_search = new MDM_JF_TE_search(jTree1);
        else
        {
            JF_TE_search.setVisible(true);
            JF_TE_search.toFront();
        }
         
    }//GEN-LAST:event_jB_searchActionPerformed
    
    private void jB_expandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_expandsActionPerformed
        for(int i=1;i<=jTree1.getRowCount();i++)
            jTree1.expandRow(i);
    }//GEN-LAST:event_jB_expandsActionPerformed
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Inverte la relazione selezionata, solo se ammesso.
     * </font></font></p></pre>  
     */
    public String inverti(String str)
    {	
        java.util.StringTokenizer token;
        token=new java.util.StringTokenizer(str,"::");
        String st1,st2;

        st1=token.nextToken();
        st2=token.nextToken();
        diretta=false;
        return st2+" ::"+st1;
    }
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Metodo preposto al reset tolole delle relazioni e dei vari widget della classe,
     * inoltre ripristina le selezioni di defult. 
     * </font></font></p></pre>  
     */
    public void resetRelations()
    {
        struct_params.RelationDirection=0;
        struct_params.HexValue=0;
        staticLib.descRelation="";
        struct_params.Relation=-1;
        reset_StructFreeFormat();

        validateRelations();

        jrb_Direct.setEnabled(false);
        jrb_Inverse.setEnabled(false);
        jrb_Both.setEnabled(false);
        
        jrb_Decimal.setEnabled(false);
        jrb_Hex.setEnabled(false);
        
        jrb_prima.setEnabled(false);
        jrb_seconda.setEnabled(false);
        jrb_tutte.setEnabled(false);
        
        jl_Relation.setText(" None");
        staticLib.Tabella.setEnabledAt(1,true);			
        staticLib.Tabella.setEnabledAt(2,false);
        
        
        if(JF_TE_search != null)
        {
            JF_TE_search.dispose();
            JF_TE_search = null;
        }
    }
    
    private void jrb_psActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_psActionPerformed
        // Add your handling code here:
        if(evt.getSource()==jrb_prima)
        {	
            struct_params.HexValue=1;
        }else if(evt.getSource()==jrb_seconda)
        {	
            struct_params.HexValue=2;
        }else if(evt.getSource()==jrb_tutte)
        {	
            struct_params.HexValue=3;
        }
    }//GEN-LAST:event_jrb_psActionPerformed

    private void jrb_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_ActionPerformed
        // Add your handling code here:
        Object target = evt.getSource();
        
        if (target == jrb_Direct)
        {
            jL_graphics.setIcon(icon_point_direct);
            if(!diretta)
            {
                    jl_Relation.setText(inverti(jl_Relation.getText()));
                    diretta = true;
            }            	
            struct_params.RelationDirection = 0; 
        }
        else if (target == jrb_Inverse)
        {
            jL_graphics.setIcon(icon_point_inverse);
            if(diretta)
            {
                jl_Relation.setText(inverti(jl_Relation.getText()));
                diretta = false;
            }
            struct_params.RelationDirection = 1;
        }
        else if(target == jrb_Both)
        {
            jL_graphics.setIcon(icon_point_both);
            struct_params.RelationDirection = 2;            
        }
        else if(target == jrb_Hex)
        {
            struct_params.HexValue=3;
            jrb_prima.setEnabled(true);
            jrb_seconda.setEnabled(true);
            jrb_tutte.setEnabled(true);
            jrb_tutte.setSelected(true);            
        }
        else if(target == jrb_Decimal)
        {
            struct_params.HexValue=0;
            jrb_prima.setEnabled(false);
            jrb_seconda.setEnabled(false);
            jrb_tutte.setEnabled(false);
        }
    }//GEN-LAST:event_jrb_ActionPerformed

    private void jb_reset()
    {
         //Add your handling code here:
        jrb_none1.setSelected(true);
        jL_graphics.setIcon(icon_point);
        
        for(int i=jTree1.getRowCount(); i>0;i--)
                jTree1.collapseRow(i);

        jTree1.clearSelection();
        
        struct_params.Relation=-1;
        br.celarAll();
        resetRelations();
    }
    
    private void jb_reset_forFreeFormat()
    {
        //System.out.println(" jb_reset_forFreeFormat .....");
         //Add your handling code here:
        jrb_none1.setSelected(true);
        jL_graphics.setIcon(icon_point);
        
        for(int i=jTree1.getRowCount(); i>0;i--)
                jTree1.collapseRow(i);

        jTree1.clearSelection();
        
        struct_params.Relation=-5;
        //br.celarAll();
        resetRelations();
    }
    
    private void jB_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_resetActionPerformed
        // Add your handling code here:
        jb_reset(); 
    }//GEN-LAST:event_jB_resetActionPerformed
    
    
    
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) 
    {
        TreePath path=evt.getPath();
        int pathCount = path.getPathCount();
              
        reset_StructFreeFormat();
        
        if (pathCount >2)
        {
            jl_Relation.setText("");   
            jL_graphics.setIcon(icon_point_direct);
            for(int i=1;i<pathCount;i++)
            {
                String text="  "+(path.getPathComponent(i)).toString();
                if (i==path.getPathCount()-1)
                {
                    jl_Relation.setText(jl_Relation.getText()+text);
                    //br.celarAll();
                    // Devo salvare l'idRelation da qualche parte e la descrizione della medesima
                    int idRel=((Nodo)path.getPathComponent(i)).id_Relation;
                    staticLib.descRelation = jl_Relation.getText();                         
                    staticLib.Tabella.setEnabledAt(2,true);
                    struct_params.Relation=idRel;  
                    DATA_RELATIONS appoR = localRelation.get_Relation_conId(idRel);
                    staticLib.vincoli=appoR.tiedRestrictions;
                    //System.out.println("ID REL: "+idRel);
                    
                    if(appoR.admitHexValues)
                    {
                        jrb_Decimal.setSelected(true);
                        jrb_Decimal.setEnabled(true);
                        jrb_Hex.setEnabled(true);
                        struct_params.HexValue=0;
                        jrb_prima.setEnabled(false);
                        jrb_seconda.setEnabled(false);
                        jrb_tutte.setEnabled(false);
                        jrb_tutte.setSelected(true);    
                    }
                    else
                    {
                        jrb_Decimal.setEnabled(false);
                        jrb_Hex.setEnabled(false); 
                        struct_params.HexValue=0;
                        jrb_prima.setEnabled(false);
                        jrb_seconda.setEnabled(false);
                        jrb_tutte.setEnabled(false);
                    }

                    if(appoR.admittedDirections==0) // diretta
                    {
                        jrb_Direct.setEnabled(true);
                        jrb_Inverse.setEnabled(false);
                        jrb_Both.setEnabled(false);

                        jrb_Direct.setSelected(true);
                        diretta=true;
                        struct_params.RelationDirection=0;
                        jL_graphics.setIcon(icon_point_direct);	
                    }
                    else if(appoR.admittedDirections==1) //inversa
                    {
                        jrb_Direct.setEnabled(false);
                        jrb_Inverse.setEnabled(true);
                        jrb_Both.setEnabled(false);

                        jrb_Inverse.setSelected(true);
                        jl_Relation.setText(inverti(jl_Relation.getText()));
                        diretta=false;
                        struct_params.RelationDirection=1;	
                        jL_graphics.setIcon(icon_point_inverse);																		
                    }
                    else if(appoR.admittedDirections==2) //entrambe
                    {
                        jrb_Direct.setEnabled(true);
                        jrb_Inverse.setEnabled(true);
                        jrb_Both.setEnabled(true);

                        jrb_Direct.setSelected(true);
                        diretta=true;
                        struct_params.RelationDirection=0;
                        jL_graphics.setIcon(icon_point_both);
                    }
                }
                else
                    jl_Relation.setText(jl_Relation.getText()+text+" ::");
            }
        }
        else     
        {
            jL_graphics.setIcon(icon_point);
            jl_Relation.setText(" None");
            staticLib.Tabella.setEnabledAt(2,false);
            
            struct_params.Relation=-1;
            jrb_Decimal.setEnabled(false);
            jrb_Hex.setEnabled(false);
            
            jrb_Direct.setEnabled(false);
            jrb_Inverse.setEnabled(false);
            jrb_Both.setEnabled(false);	
            
            jrb_prima.setEnabled(false);
            jrb_seconda.setEnabled(false);
            jrb_tutte.setEnabled(false);            
        }    
    }
    
    //ritorna idRelazione individuata
    private int ctrl_next_element(int[] nextLevel,int id_TE)
    {    
        try
        {
            for(int x=0; x<nextLevel.length; x++)
            {
                DATA_RELATIONS rel = localRelation.get_Relation_conId(nextLevel[x]);            

                //System.out.println("ctrl_next_element Cerco "+id_TE);
                if(rel.idFirstElement == id_TE)
                {
                    //System.out.println("nextlevel rel.id -----> "+rel.idRelation);
                    return rel.idRelation;
                }            
            }
        }
        catch (java.lang.NullPointerException e)
        {
             //System.out.println("catch ----> ctrl_next_element  -----> "+ (-1) );
             return -1;  
        }
       return -1;        
    }
    
    // 0 --> non esiste;   (>1) idRelazione (>1) --> esiste;  -1 --> errore;
    private int ctrl_RelationExist(java.util.Vector V_ID_Rel)
    {
        //System.out.println(" ENTRO ctrl_RelationExist() ");
        
        int SIZE = V_ID_Rel.size();
        int find_relation = 0;
        
        if(SIZE < 2)
        {
            System.out.println(" Err. la relazione non è valida (minimo due elementi) - ctrl_RelationExist() - ");
            return -1;
        }
        
        int first_E = (Integer)V_ID_Rel.elementAt(0);
        int secon_E = (Integer)V_ID_Rel.elementAt(1);
                
        for(int i=0;i<localRelation.localRelationInt.length;i++)
        {             
            //System.out.println(" Ciclo relazioni di Base con idParentRelation = 0" );
            if(localRelation.get_idParentRelation(i) == 0)
            {
                //System.out.println(" Controllo relazione id ---> "+ localRelation.get_idRelation(i) );
                
                if( (localRelation.get_idFirstElement(i) == first_E) && (localRelation.get_idSecondElement(i)) == secon_E )
                {                    
                    //System.out.println( "Trovata relazione di base -- [ first_E :: secon_E]  ");
                    //System.out.print(localDataElement.get_longDescription(localRelation.get_idFirstElement(i)) +"::" );
                    //System.out.println(localDataElement.get_longDescription(localRelation.get_idSecondElement(i)));
                                       
                    if(SIZE == 2)
                    {
                        return localRelation.get_idRelation(i);
                    }
                    else
                    {        
                        ////System.out.println("cerco Next Level:");
                        int nextLevel[] = localRelation.localRelationInt[i].nextLevelRelations;
                        for(int x=2; x<SIZE; x++)
                        {                       
                            int ID_Rel_Find = ctrl_next_element(nextLevel,(Integer)V_ID_Rel.elementAt(x));
                            //System.out.print("Elemento della Relazione : --> "+(x+1)+"° posizione.");
                            //System.out.println("  ID Next Level: --> "+ID_Rel_Find);
                            if(ID_Rel_Find != -1)
                            {
                                DATA_RELATIONS appo_rel = localRelation.get_Relation_conId(ID_Rel_Find);
                                nextLevel = appo_rel.nextLevelRelations;
                                find_relation = ID_Rel_Find;
                            }
                            else
                            {
                                //find_relation = -1;
                                return -1;
                            }
                        }
                    }
                    
                }  
            }
        }
        return find_relation;       
    }
    
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Metodo mediante il quale viene convalidato l'albero delle relazioni.
     * </font></font></p></pre>
     */
    public void validateRelations()
    {
        //int[] x=localAnalisi.get_relationList(struct_params.AnalysisType);
        //configuration.get_Relations(x);
        localRelation=new Relation(configuration.get_Relations(localAnalisi.get_relationList(struct_params.AnalysisType)));

       /* System.out.println("********Tipo Analisi: "+struct_params.AnalysisType);
        System.out.println("****************> <Relation Len>: "+localRelation.localRelationInt.length);
        for(int i=0;i<localRelation.localRelationInt.length;i++)
        {
            System.out.println("******************" + i + "********************");
            System.out.println("idRelation: 		"+ localRelation.get_idRelation(i));
            System.out.println("idParentRelation: 	"+ localRelation.get_idParentRelation(i));
            System.out.println("admitNetworkAnalisys: 	"+ localRelation.get_admitNetworkAnalisys(i));
            System.out.println("ghostRelation: 		"+ localRelation.get_ghostRelation(i));
            System.out.println("FE: "+ localDataElement.get_longDescription(localRelation.get_idFirstElement(i)));
            //localRelation.get_idFirstElement(i));
            System.out.println("SE: "+ localDataElement.get_longDescription(localRelation.get_idSecondElement(i)));
            //localRelation.get_idSecondElement(i));
            //System.out.println("Restriction Level: "+ localRelation.get_restrictionLevels(i));
            System.out.print("Next Level: ");
            int j=0;
            while(localRelation.localRelationInt[i].nextLevelRelations[j]!=0)
            {
                    System.out.print("  "+localRelation.localRelationInt[i].nextLevelRelations[j]);
                    j++;
            }
            System.out.println("");
            j=0;
          }*/
         
        
        if(jTree1!=null)
            remove(jTree1);
		
        creaStruct();
        
        jTree1 = new JTree(relazioni);

        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        DefaultTreeSelectionModel model=new DefaultTreeSelectionModel();

        model.setSelectionMode(1);
    	renderer.setLeafIcon(icon_foglia);
    	renderer.setBackgroundNonSelectionColor(Color.gray);
    	renderer.setBorderSelectionColor(Color.black);
    	renderer.setClosedIcon(icon_tab_close);
    	renderer.setOpenIcon(icon_tab_open);
    	renderer.setTextSelectionColor(Color.black);
    	renderer.setTextNonSelectionColor(Color.white);
    	renderer.setBackgroundSelectionColor(Color.lightGray);
		
        //////System.out.println("MODEL: "+model.getSelectionMode());
        jTree1.setSelectionModel(model);
    	jTree1.setBackground(Color.gray);
    	jTree1.setCellRenderer(renderer);
    	jTree1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    	jTree1.setUI(new WindowsTreeUI());
	jTree1.setFont(staticLib.fontA10);
    	jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
    		public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
    			jTree1ValueChanged(evt);
    		}
    	}
    	);
			
       	jScrollP_tree.setViewportView(jTree1);
		
     	if(struct_params.HexValue==0)
        {
            jrb_prima.setEnabled(false);
            jrb_seconda.setEnabled(false);
            jrb_tutte.setEnabled(false);
            jrb_Decimal.setEnabled(false);
            jrb_Hex.setEnabled(false);
        }
        if(struct_params.RelationDirection==0)
        {
            jrb_Direct.setEnabled(false);
            jrb_Inverse.setEnabled(false);
            jrb_Both.setEnabled(false);
        }
		
		
        repaint();
    }
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Questo metodo si prende carico della costruzione strutturale dell'albero 
     * partendo dalla struttura dati delle relazioni.
     * La costruzione dell'albero ï¿½ totalmente dinamica ed ï¿½ strettamente dipendente dalla struttura dati
     * correntemente caricata.
     * </font></font></p></pre>  
     * @see DATA_RELATIONS
     */
    public void creaStruct()
    {
        //////System.out.println("Sto creando l'albero magico: "+staticLib.NTenabled);
        relazioni = new Nodo(-1,-1,"Relations List");
        String strDescription;

        //CREO 2 LIVELLI 
        v_livVector=new livVector1();
        v_livVector.add_Level();
        v_livVector.add_Level();

        Nodo nodoTempPadre;
        Nodo nodoTempFiglio;

        int numRelation=localRelation.num_Relation();
        //********************************************************************
        //********************************************************************
        // ORDINAMENTO ALBERO

        DATA_RELATIONS[] appoREL;
        appoREL=localRelation.localRelationInt;

        for(int i=0;i<numRelation;i++)
        {
            for(int j=i+1;j<numRelation;j++)
            {
                if(appoREL[i].idParentRelation>appoREL[j].idParentRelation)
                {
                        DATA_RELATIONS swap;
                        swap=appoREL[i];
                        appoREL[i]=appoREL[j];
                        appoREL[j]=swap;
                }
                else if(appoREL[i].idParentRelation==appoREL[j].idParentRelation)
                {
                    String FE_I,SE_I,FE_J,SE_J;
                    FE_I=localDataElement.get_longDescription(localRelation.localRelationInt[i].idFirstElement);
                    SE_I=localDataElement.get_longDescription(localRelation.localRelationInt[i].idSecondElement);
                    FE_J=localDataElement.get_longDescription(localRelation.localRelationInt[j].idFirstElement);
                    SE_J=localDataElement.get_longDescription(localRelation.localRelationInt[j].idSecondElement);

                    if(appoREL[i].idParentRelation==0)
                    {
                        if(FE_I.compareToIgnoreCase(FE_J)>0)
                        {
                            DATA_RELATIONS swap;
                            swap=appoREL[i];
                            appoREL[i]=appoREL[j];
                            appoREL[j]=swap;
                        }
                        else if(FE_I.compareToIgnoreCase(FE_J)==0)
                        {
                            if(SE_I.compareToIgnoreCase(SE_J)>0)
                            {
                                DATA_RELATIONS swap;
                                swap=appoREL[i];
                                appoREL[i]=appoREL[j];
                                appoREL[j]=swap;
                            }
                        }
                    }else
                    {
                        if(FE_I.compareToIgnoreCase(FE_J)>0)
                        {
                            DATA_RELATIONS swap;
                            swap=appoREL[i];
                            appoREL[i]=appoREL[j];
                            appoREL[j]=swap;
                        }
                    }
                }
            }
        }

        //********************************************************************

        int level=1;
        for(int i=0;i<numRelation;i++)
        {
            //AGGIUNGO SOLO ELEMENTI con idParent=0 ==> Relazione di 2^ Liv.
            if (localRelation.get_idParentRelation(i)==0 && (localRelation.get_admitNetworkAnalisys(i) || !staticLib.NTenabled) && !localRelation.get_ghostRelation(i))
            //if (localRelation.get_idParentRelation(i)==0 && localRelation.get_admitNetworkAnalisys(i) && !localRelation.get_ghostRelation(i))
            {

                int idFirstElelement    =localRelation.get_idFirstElement(i);
                int idSecondElement	=localRelation.get_idSecondElement(i);
                int idRelation		=localRelation.get_idRelation(i);

                // MI PAPPO IL firstElement DELLA RELAZZIONE di 2^ Liv.
                strDescription=localDataElement.get_longDescription(idFirstElelement);

                nodoTempPadre=new Nodo(idRelation,idFirstElelement,strDescription);

                if (!v_livVector.is_PresentNodo(level,nodoTempPadre))
                {
                    // AGGIUNGO NODO SE NON ESISTE
                    relazioni.add(nodoTempPadre);
                    v_livVector.add_NodoAtLevel(level,nodoTempPadre);
                }else
                {
                    //MI PRENDO IL RIFERIMENTO DEL NODO ESISTENTE
                    nodoTempPadre=v_livVector.get_NodoOfLevel(1,nodoTempPadre);
                }

                // MI PAPPO IL secondElement DELLA RELAZZIONE di 2^ Liv.
                strDescription=localDataElement.get_longDescription(idSecondElement);
                nodoTempFiglio=new Nodo(idRelation,idSecondElement,strDescription);
                nodoTempPadre.add(nodoTempFiglio);
                v_livVector.add_NodoAtLevel(level+1,nodoTempFiglio);
            }
        }//END FOR
        for(int i=0;i<v_livVector.num_NodiAtLevel(2);i++)
        {
            Nodo n=v_livVector.get_NodoOfLevel(2,i);
            DATA_RELATIONS rel=localRelation.get_Relation_conId(n.id_Relation);	

            if((rel.admitNetworkAnalisys || !staticLib.NTenabled) && !rel.ghostRelation)
            //if(rel.admitNetworkAnalisys  && !rel.ghostRelation)
            {							    	                          	                
                creaAlbero(n,rel);
            }
        }
    }       
        
    private void creaAlbero(Nodo padre,DATA_RELATIONS rel)
    {
        int i=0;

        while(rel.nextLevelRelations[i]>0)
        {
            int id=rel.nextLevelRelations[i];
            DATA_RELATIONS appo=localRelation.get_Relation_conId(id);

            if(appo!=null)
            {
                Nodo n=new Nodo(appo.idRelation,appo.idFirstElement,localDataElement.get_longDescription(appo.idFirstElement));
                //System.out.println("Rel:" + appo.idRelation + "  " + localDataElement.get_longDescription(appo.idFirstElement) + "NT: "+appo.admitNetworkAnalisys+"  nextLevel[0]: "+appo.nextLevelRelations[0]);
                if ( (appo.nextLevelRelations[0]>0) && (appo.admitNetworkAnalisys || !staticLib.NTenabled) && !appo.ghostRelation)
                //if ( (appo.nextLevelRelations[0]>0) && appo.admitNetworkAnalisys  && !appo.ghostRelation)
                {
                    creaAlbero(n,appo);
                }
                if ( appo.admitNetworkAnalisys || !staticLib.NTenabled ) 
                        padre.add(n);
            }else
            {
                //staticLib.optionPanel("Configuration ERROR Relation <"+id+"> not found.", "Error",JOptionPane.ERROR_MESSAGE);
            }
            i++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel jP_south;
    private javax.swing.JLabel jl_Relation;
    private javax.swing.JPanel jP_center;
    private javax.swing.JScrollPane jScrollP_tree;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jB_search;
    private javax.swing.JButton jB_FreeFormatRel;
    private javax.swing.JPanel jP_east;
    private javax.swing.JLabel jL_relationDir;
    private javax.swing.JPanel jP_relationDir;
    private javax.swing.JRadioButton jrb_Direct;
    private javax.swing.JRadioButton jrb_Inverse;
    private javax.swing.JRadioButton jrb_Both;
    private javax.swing.JLabel jL_dataFormat;
    private javax.swing.JPanel jP_dataFormat;
    private javax.swing.JRadioButton jrb_Decimal;
    private javax.swing.JRadioButton jrb_Hex;
    private javax.swing.JRadioButton jrb_prima;
    private javax.swing.JRadioButton jrb_seconda;
    private javax.swing.JRadioButton jrb_tutte;
    private javax.swing.JPanel jP_graphics;
    private javax.swing.JLabel jL_graphics;
    private javax.swing.JPanel jP_button;
    private javax.swing.JButton jB_expands;
    private javax.swing.JButton jB_reset;
    // End of variables declaration//GEN-END:variables

    private Cursor Cur_hand         = new Cursor(Cursor.HAND_CURSOR);
    private javax.swing.JRadioButton jrb_none1 = new javax.swing.JRadioButton();
    
    private javax.swing.ImageIcon icon_point            = new javax.swing.ImageIcon(getClass().getResource("/images/point.gif"));
    private javax.swing.ImageIcon icon_point_direct     = new javax.swing.ImageIcon(getClass().getResource("/images/point_on.gif"));
    private javax.swing.ImageIcon icon_point_inverse    = new javax.swing.ImageIcon(getClass().getResource("/images/point_on_inv.gif"));
    private javax.swing.ImageIcon icon_point_both       = new javax.swing.ImageIcon(getClass().getResource("/images/point_on_both.gif"));
    
    private javax.swing.ImageIcon icon_tab_close = new javax.swing.ImageIcon(getClass().getResource("/images/folder_cyan.png"));
    private javax.swing.ImageIcon icon_tab_open = new javax.swing.ImageIcon(getClass().getResource("/images/folder_blue.png"));
    private javax.swing.ImageIcon icon_foglia   = new javax.swing.ImageIcon(getClass().getResource("/images/foglia.png"));

    private BufferRestrizioni   br;
    private getConfigFiltro     configuration;
    private STRUCT_PARAMS 	struct_params;
    private TrafficElement      localDataElement;
    private Relation            localRelation;
    private Analisi             localAnalisi;
    private JTree               jTree1;
    private Nodo                relazioni;
    private livVector1 		v_livVector;
    
    private boolean  diretta = true;
       
    private MDM_JF_TE_search  JF_TE_search;
    private MDM_JD_RelationBuild jD_RelationBuild;
}
