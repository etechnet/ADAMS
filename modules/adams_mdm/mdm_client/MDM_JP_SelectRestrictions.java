import java.awt.Cursor;
import java.awt.Color;
import java.util.*;
import net.etech.*;
import net.etech.ASP.*;
import net.etech.MDM.*;
import net.etech.loadconfig.*;

/**
 *<p align="center"><font size="2"><b><font size="6" face="Times New Roman, Times, serif"> Network Traffic Matrix </font></b></font></p>
 *<p align="center"> <b>Author:</b></p>
 *<p align="center">-  Beltrame Luca  - luca.beltrame@e-tech.net</a></p>
 *<p align="center">-  Ficcadenti Raffaele  - raffaele.ficcadenti@e-tech.net</a></p>
 *
 * Classe  di interfaccia grafica destinata alla costruzione della lista delle restrizioni, e di ogni singola restrizione.
 * La classe è strettamente legata alla struttura dati dei Traffic Element e delle Relazioni, ed è completamente dinamica.
 * <p align="center">&nbsp;</p> 
 * @see DATA__TRAFFICELEMENT
 * @see DATA_RELATIONS
 * @see getConfigFiltro
 * @see Relation
 * @see TrafficElement
 */
public class MDM_JP_SelectRestrictions extends javax.swing.JPanel implements Runnable {

    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Costruttore della classe.
     * Il costruttore istanzia e configura le restrizioni ammesse per la particolare relazione selezionata
     * la configurazione avviene sulla base della struttura di configurazione caricata precedentemente tramite CORBA dal Master Server.
     * </font></font></p></pre>  
     * @param configuration oggetto ti tipo <b>getConfigFiltro</b>, contenente l'intera configurazione,
     * @param br oggetto di tipo <b>BufferRestrizioni</b>, verrà popolato man mano che l'utente effettuerà le selezioni.
     * @see getConfigFiltro
     * @see BufferRestrizioni  
     */
    public MDM_JP_SelectRestrictions(getConfigFiltro Configuration,BufferRestrizioni BR) {
        
        this.configuration = Configuration;
	this.br = BR;
        
        current_idRelations = -1;
        restrictionList1 = new MDM_JP_RestrictionList(br);
        
        initComponents();
        
        jListIconRestrictions = new JListIcon(ip);
        //jListIconRestrictions.setBackground(new Color (230,230,230));
        jListIconRestrictions.setFont(staticLib.fontA9);
        jListIconRestrictions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScroll_listRestrictions.setViewportView(jListIconRestrictions);
        
        jListIconRestrictions.setFlagColor(true);
        
        jListInsiemi= new JListIcon(ip2);
	jListInsiemi.setBackground(new Color (230,230,230));
        jListInsiemi.setSelection(false);
	jScrollPane1.setViewportView(jListInsiemi);
        
        GRAPH_INSIEMI = new insiemi(jListInsiemi);
        GRAPH_INSIEMI.setInsiemi(75,75,15,30);
        jListInsiemi.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        jListInsiemi.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListValueChanged(evt);
        }
        }
        );
        restrictionList1.setInsieme(GRAPH_INSIEMI);        
        
        jP_restSelected.add("Center",restrictionList1);
        Jp_FlowGraph.add("Center",GRAPH_INSIEMI);
        Jp_FlowGraph.add("East",jScrollPane1);
        
        rHelp = new MDM_JP_RestrictionsHelp(br,restrictionList1,GRAPH_INSIEMI);
        //staticLib.rHelp = rHelp;    //nello  
        staticLib.rHelp1 = rHelp;
        
        jP_rest_Help.add(rHelp,java.awt.BorderLayout.CENTER);
        
         //Font
        jL1.setFont(staticLib.fontA10);
        jL_current_Relation.setFont(staticLib.fontA9);
        jL_restrictions.setFont(staticLib.fontA10);
        jL_flow.setFont(staticLib.fontA10);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_restrictions = new javax.swing.JPanel();
        jP_relations_sel = new javax.swing.JPanel();
        jL_current_Relation = new javax.swing.JLabel();
        jScroll_listRestrictions = new javax.swing.JScrollPane();
        jL1 = new javax.swing.JLabel();
        jL_restrictions = new javax.swing.JLabel();
        jP_restrictionSum = new javax.swing.JPanel();
        jL_flow = new javax.swing.JLabel();
        jP_restSelected = new javax.swing.JPanel();
        Jp_FlowGraph = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jbResetRestriction = new javax.swing.JButton();
        jP_rest_Help = new javax.swing.JPanel();
        jP_Rest_value = new javax.swing.JPanel();
        
        setLayout(null);
        
        setBackground(new java.awt.Color(230, 230, 230));
        jP_restrictions.setLayout(null);
        
        jP_restrictions.setBackground(new java.awt.Color(230, 230, 230));
        jP_restrictions.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Restrictions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jP_relations_sel.setLayout(new java.awt.BorderLayout());
        
        jP_relations_sel.setBackground(new java.awt.Color(230, 230, 230));
        jP_relations_sel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(35, 121, 170), 1, true));
        jP_relations_sel.add(jL_current_Relation, java.awt.BorderLayout.CENTER);
        
        jP_restrictions.add(jP_relations_sel);
        jP_relations_sel.setBounds(10, 50, 310, 30);
        
        jP_restrictions.add(jScroll_listRestrictions);
        jScroll_listRestrictions.setBounds(10, 110, 310, 445);
        
        jL1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b_mini_vok.png")));
        jL1.setText("Current Relation Selected");
        jP_restrictions.add(jL1);
        jL1.setBounds(10, 30, 310, 18);
        
        jL_restrictions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png")));
        jL_restrictions.setText("List of Restrictions");
        jP_restrictions.add(jL_restrictions);
        jL_restrictions.setBounds(10, 90, 310, 20);
        
        add(jP_restrictions);
        jP_restrictions.setBounds(0, 0, 330, 565);
        
        jP_restrictionSum.setLayout(null);
        
        jP_restrictionSum.setBackground(new java.awt.Color(230, 230, 230));
        jP_restrictionSum.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Restrictions Selected", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        jL_flow.setText("Flow Graph");
        jP_restrictionSum.add(jL_flow);
        jL_flow.setBounds(10, 320, 330, 15);
        
        jP_restSelected.setLayout(new java.awt.BorderLayout());
        
        jP_restSelected.setBackground(new java.awt.Color(230, 230, 230));
        jP_restrictionSum.add(jP_restSelected);
        jP_restSelected.setBounds(10, 30, 300, 290);
        
        Jp_FlowGraph.setLayout(new java.awt.BorderLayout());
        
        Jp_FlowGraph.setBackground(new java.awt.Color(230, 230, 230));
        Jp_FlowGraph.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(35, 121, 170), 1, true));
        jScrollPane1.setBackground(new java.awt.Color(230, 230, 230));
        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(150, 3));
        Jp_FlowGraph.add(jScrollPane1, java.awt.BorderLayout.EAST);
        
        jP_restrictionSum.add(Jp_FlowGraph);
        Jp_FlowGraph.setBounds(10, 340, 300, 170);
        
        jPanel5.setBackground(new java.awt.Color(230, 230, 230));
        jbResetRestriction.setBackground(new java.awt.Color(230, 230, 230));
        jbResetRestriction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_restrict.jpg")));
        jbResetRestriction.setToolTipText("Reset All Restrictions");
        jbResetRestriction.setBorderPainted(false);
        jbResetRestriction.setContentAreaFilled(false);
        jbResetRestriction.setFocusPainted(false);
        jbResetRestriction.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_restrict_press.jpg")));
        jbResetRestriction.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_restrict_over.jpg")));
        jbResetRestriction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetRestrictionActionPerformed(evt);
            }
        });
        
        jPanel5.add(jbResetRestriction);
        
        jP_restrictionSum.add(jPanel5);
        jPanel5.setBounds(10, 520, 300, 40);
        
        add(jP_restrictionSum);
        jP_restrictionSum.setBounds(640, 0, 320, 565);
        
        jP_rest_Help.setLayout(new java.awt.GridLayout(1, 1));
        
        jP_rest_Help.setBackground(new java.awt.Color(230, 230, 230));
        jP_rest_Help.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Restriction Help", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        add(jP_rest_Help);
        jP_rest_Help.setBounds(340, 330, 290, 235);
        
        jP_Rest_value.setBackground(new java.awt.Color(230, 230, 230));
        jP_Rest_value.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), " Restrictions Value", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Verdana", 1, 11)));
        add(jP_Rest_value);
        jP_Rest_value.setBounds(340, 0, 290, 330);
        
    }//GEN-END:initComponents

    private void jbResetRestrictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetRestrictionActionPerformed
        resetRestrictions();
        GRAPH_INSIEMI.finezza();
    }//GEN-LAST:event_jbResetRestrictionActionPerformed

    private void resetAllGUI()
    {
        restrictionList1.setVisible(false);
        if(insertRestriction!=null )
            insertRestriction.setVisible(false);
    }

    private void jListValueChanged(javax.swing.event.ListSelectionEvent evt) 
    {
        if (!evt.getValueIsAdjusting())
        {
            ////System.out.println("JL: "+(String)jListInsiemi.getSelectedValue());
            jListIconRestrictions.setSelectedValue((String)jListInsiemi.getSelectedValue(),true);
        }
    }
    
    public boolean checkVincolo(int[] vincoli, int id)
    {
        /*for(int i=0; i<vincoli.length;i++)
            System.out.println("vincoli "+vincoli[i]);
        System.out.println("ID "+id);*/
        
        int i;
        i=0;
        while(vincoli[i]!=0)
        {
            if(id==vincoli[i])
                return true;
            i++;
        }
        return false;
    }
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Metodo preposto costruzione dell intera interfaccia grafica, la costruzione è dinamica, cio vuol dire che al variare della configurazione
     * varia di conseguenza l'interfaccia.
     * </font></font></p></pre>  
     */
    public boolean setGUIRelation()
    {        
        
        //************************** INIZIALIZZAZIONE LISTA RESTRIZIONI ***************************************
        //System.out.println("SetGUI Changed: "+staticLib.struc_paramsCURRENT.Relation+"  Relation ID: "+current_idRelations);
        staticLib.oldIDREL=-1;
        //staticLib.jTabbe_Tot.setEnabledAt(3,false);
        
        //System.out.println(staticLib.struc_paramsCURRENT.Relation+" ---- "+current_idRelations );
        
        if(staticLib.struc_paramsCURRENT.Relation != current_idRelations) 
        {  
            jP_Rest_value.removeAll();
            
            if(Jp_wait == null)
            {
                Jp_wait = new MDM_JP_wait(" Please Wait... ",iconWait);
                Jp_wait.setBounds(80,30,120,100);
            }
            jP_Rest_value.setLayout(null);
            jP_Rest_value.add(Jp_wait);
            
            this.setCursor(Cur_wait);
            set_GUIcursor(Cur_wait);
            setGuiEnabled(false);
            
            jListIconRestrictions.setCursor(Cur_wait);
            
            /*if( jListIconRestrictions.getItemCount() > 0)
                jListIconRestrictions.removeAll();*/
            
            jScroll_listRestrictions.remove(jListIconRestrictions);
            jListIconRestrictions = new JListIcon(ip);
            jListIconRestrictions.setFont(staticLib.fontA9);
            jListIconRestrictions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            jScroll_listRestrictions.setViewportView(jListIconRestrictions);
        
            jListIconRestrictions.setFlagColor(true);
            setGuiEnabled(false);
            rHelp.reset();
            staticLib.jsl = new java.util.Vector();
            staticLib.jslTE = new java.util.Vector();

            //staticLib.flagPass=false;
            //System.out.println("Disattivo la password...");

            rHelp.disabilita();
            current_idRelations = staticLib.struc_paramsCURRENT.Relation;

            //System.out.println("SetGUI Changed: "+staticLib.struc_paramsCURRENT.Relation+"  Relation ID: "+current_idRelations);
            jL_current_Relation.setText(staticLib.descRelation);
            Relation localRelation;

            // PRENDO tutte le RELAZIONI
            localRelation = new Relation(configuration.get_AllRelations());

            //PRENDO tutti GLI ELEMENTI DI TRAFFICO
            localTrafficElement = new TrafficElement(configuration.get_Traffic_Elements());

            //prendiamo la singola relazione avente id selezionato
            DATA_RELATIONS rel = localRelation.get_Relation_conId(staticLib.struc_paramsCURRENT.Relation);

            //Riempimento lista restrizioni
            int[] appoRestrictionLevel;
            
            if(rel.restrictions != null)
            {
                appoRestrictionLevel = rel.restrictions;
            }
            else
            {
                System.out.println("Errore MDM_JP_SelectRestrictions.java");
                
                this.setCursor(Cur_default);
                set_GUIcursor(Cur_default);
                setGuiEnabled(true);
                jListIconRestrictions.setCursor(Cur_hand);
                return false;
            }


            //***********************************************************
            // Inserisco Le restrizioni nella Lista
            //***********************************************************
            String[] defaultIcon={"","trunk.gif","trunk.gif","called_ac.gif","","","","","domestic.gif","called_ac.gif","domestic.gif","","","","","",""};
            //Elemento di traffico di appoggio.
            DATA_DATAELEMENT appoTrafficElement;

            int h1=0;
            int idRest=0;
            int contREST=0;


            //***********************************************************************
            //***********************************************************************
            //			ORDINAMENTO DELLE RESTRIZIONI
            //***********************************************************************

            h1=0;
            while(appoRestrictionLevel[h1]>0)
            {
                h1++;	
            }
            //System.out.println("NUMERO DI RESTRIZIONI "+h1);

            int[] tempIDRest=new int[h1];
            String[] tempLongDesc=new String[h1];
            DATA_DATAELEMENT tempTE;

            for(int i=0;i<h1;i++)
            {
                tempIDRest[i]=appoRestrictionLevel[i];
                tempTE=(DATA_DATAELEMENT)localTrafficElement.get_Traffic_Element(tempIDRest[i]);
                tempLongDesc[i] = new String(tempTE.longDescription).trim();
                //System.out.println("---->>> Traffic Element: "+tempLongDesc[i]);
            }

            for(int i=0;i<h1;i++)
            {
                for(int j=i+1;j<h1;j++)
                {
                    if(tempLongDesc[i].compareToIgnoreCase(tempLongDesc[j])>0)
                    {
                        String appo;
                        appo=tempLongDesc[i];
                        tempLongDesc[i]=tempLongDesc[j];
                        tempLongDesc[j]=appo;
                        int swap;
                        swap=tempIDRest[i];
                        tempIDRest[i]=tempIDRest[j];
                        tempIDRest[j]=swap;
                    }
                }
            }

            contREST=0;

            for(int i=0;i<h1;i++)
            {						
                idRest=tempIDRest[i];
                idTRAFFIC_ELEMENT[contREST]=idRest;
                contREST++;
            }
            resetRestrictions();
            contREST=0;
            //***********************************************************************
            //***********************************************************************
            //System.out.println("indice h1: "+h1);
            for(int i=0;i<h1;i++)
            {
                //System.out.println("indice I: "+i);
                idRest=tempIDRest[i];
                idTRAFFIC_ELEMENT[contREST] = idRest;

                appoTrafficElement=(DATA_DATAELEMENT)localTrafficElement.get_Traffic_Element(idRest);
                String strIcona=new String(appoTrafficElement.pixmapFileName).trim();
		//System.out.println("PIXMAP FILE: "+strIcona);
                if(strIcona.equals(""))
                    strIcona = approssimaIcona(new String(appoTrafficElement.shortDescription).trim());

                if(checkVincolo(rel.tiedRestrictions,idRest))
                {
                    // RESTRIZIONE VINCOLATA---> controllo se c'e qualche valore di dafault da settare.
                    jListIconRestrictions.addElement(strIcona,strIcona,new String(appoTrafficElement.longDescription).trim(),Color.red);
                    
                    //System.out.println("idRest "+idRest);
                    //System.out.println("defaultValue "+appoTrafficElement.defaultValue);
                    if (appoTrafficElement.defaultValue != 0)
                    {
                        int val,PD=0;
                        val=(int)appoTrafficElement.defaultValue;
                        
                        /*System.out.println("----------");
                        for(int z=0;z<appoTrafficElement.valueList.length; z++)
                        {
                            System.out.println("valueList "+appoTrafficElement.valueList[z]);
                            System.out.println("valueListLabel "+new String(appoTrafficElement.valueListLabel[z]).trim());
                        }
                        System.out.println("----------");*/
                        
                        while((appoTrafficElement.valueList[PD]!=0)||(new String(appoTrafficElement.valueListLabel[PD]).trim().length() != 0))
                        {
                            //System.out.println("DEFAULT VAL: "+val+"  Current val: "+(int)appoTrafficElement.valueList[PD]+"  Current valLabel: "+new String(appoTrafficElement.valueListLabel[PD]).trim());
                            if(((int)appoTrafficElement.valueList[PD])==val)
                            {
                                br.addRestrictionGUI3(appoTrafficElement.idElement,
                                        new String(appoTrafficElement.longDescription).trim(),
                                        ""+(int)appoTrafficElement.valueList[PD],
                                        new String(appoTrafficElement.valueListLabel[PD]).trim(),
                                        true,
                                        appoTrafficElement.compareSelection,
                                        appoTrafficElement.priority,
                                        appoTrafficElement.exceptions[0]);
                                br.applicaEccezioni(appoTrafficElement.idElement);
                                break;
                                
                            }
                            PD++;
                        }
                    }	
                }
                else
                {
                    jListIconRestrictions.addElement(strIcona,strIcona,new String(appoTrafficElement.longDescription).trim(),Color.black);		
                }
                contREST++;
            }				
	
            jListIconRestrictions.addElement("mode.gif","mode.gif","Normal/Exclusive Mode",Color.black); 		
            //jListIconRestrictions.addElement("dimension.gif","dimension.gif","Dimension Relation",Color.black);

            idTRAFFIC_ELEMENT[contREST+0]=1961;
            //idTRAFFIC_ELEMENT[contREST+1]=1962;
            //System.out.println("#Restrictions: "+(contREST));
            //jListIconRestrictions.setSelectionColor(Color.lightGray); 
            //jListIconRestrictions.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

            //***********************************************************************
            //***********************************************************************

            jListIconRestrictions.setSelectedIndex(0);
            index_Sel = jListIconRestrictions.getSelectedIndex();

            if(contREST> 0)
            {
                //********************************
                //	Settagio panello restrizioni
                //********************************
                if(insertRestriction==null)
                {
                    insertRestriction = new jpRestrictions(localTrafficElement,restrictionList1,GRAPH_INSIEMI,br);
                    op.putOBJ(idTRAFFIC_ELEMENT[index_Sel],insertRestriction);	
                    restrictionList1.setJR(insertRestriction);							
                }
                
                insertRestriction.setDataElement(idTRAFFIC_ELEMENT[index_Sel]);
                //System.out.println("setTrafficElement 3");
                insertRestriction.validateRest();
                
			  
                staticLib.struc_paramsCURRENT.Filters = br.creaRest();
                
                
                DATA_DATAELEMENT te=(DATA_DATAELEMENT)localTrafficElement.get_Traffic_Element(idTRAFFIC_ELEMENT[index_Sel]);
                rHelp.disabilita();
                
                
                if( ( staticLib.helpVector.HelpDescPresent(te.idElement) == -1) || (te.idElement==8) || (te.idElement==10) || (te.idElement==41) || (te.idElement==42) )
                {
                    staticLib.struc_paramsCURRENT.Filters = br.creaRest();
                    DATA_HELP[] dataHelp = staticLib.CORBA.getHelp((new String(te.shortDescription)).trim());
                    if(dataHelp != null)
                    {
                        //rHelp.set_enable();
                        staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(te.idElement,dataHelp));

                        DATA_HELP[] appoOrdinato1 = new DATA_HELP[dataHelp.length];
                        DATA_HELP[] appoOrdinato2 = new DATA_HELP[dataHelp.length];
                        for(int i=0;i<dataHelp.length;i++)
                        {
                                appoOrdinato1[i] = new DATA_HELP(dataHelp[i].key,dataHelp[i].data);
                                appoOrdinato2[i] = new DATA_HELP(dataHelp[i].key,dataHelp[i].data);		
                        }

                        staticLib.CORBA.ordina(appoOrdinato1,1);
                        staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(te.idElement+1000,appoOrdinato1));

                        staticLib.CORBA.ordina(appoOrdinato2,2);
                        staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(te.idElement+2000,appoOrdinato2));
                    }
                    else
                    {
                         //rHelp.set_disable();
                    }
                    //System.out.println("Sizeof(helpVector)="+staticLib.helpVector.size());
                }else
                {
                    //rHelp.set_enable();	
                }
                rHelp.setElementList(staticLib.helpVector.get_Descrizioni_conId(te.idElement,false,0),te);
                
                try
                {
                    jP_Rest_value.remove(Jp_wait);
                }
                catch(Exception ex){}
                
                jP_Rest_value.setLayout(layoutRest);
                jP_Rest_value.repaint();
                jP_Rest_value.add(insertRestriction);
                setGUI(insertRestriction);
		
		if(te.guiObject==JPLUGINGUIOBJECT)//JPLUGINGUIOBJECT)
	    	{
	   		//System.out.println("Gestito da PLUGIN 3.");
			try {          
				
				String strPlugin=configuration.get_NamePlugin(te.idPluginGUI);
				if(!strPlugin.equals(""))
				{
					int id=strPlugin.indexOf(".class");
					strPlugin=strPlugin.substring(0,id);
					//System.out.println("strPluginName="+strPlugin);
					
					plugin_base p_base=(plugin_base)Class.forName(strPlugin).newInstance();
					
					p_base.pluginSetupConfig(null,br,te);
					p_base.pluginWorker();
					
					p_base.shutdown();
					
	                                restrictionList1.refreshList();
                                }else
                                {
                                	JD_Message op = new JD_Message(null,true,"Undefined plugin: <"+te.idPluginGUI+">.","Info",JD_Message.INFO);
                                }
				
			} catch ( Exception e ) {
				e.printStackTrace() ;
			}
		 }
		   
		
            }
            else
            {
                if (selectMode==null)
                {
                    selectMode=new MDM_JP_RestrictionMode(GRAPH_INSIEMI);
                    
                    try
                    {
                        jP_Rest_value.remove(Jp_wait);
                    }
                    catch(Exception ex){}
                    
                    jP_Rest_value.setLayout(layoutRest);
                    jP_Rest_value.repaint();
                    jP_Rest_value.add(selectMode);
                }
                setGUI(selectMode);
                p_attuale = selectMode;
            }

            //Refresh del sommario per i valori di default......
            //br.applicaEccezioni(); 
            restrictionList1.refreshList();	
            //**********************************************************
            // Attacco l'evento alla lista delle restrizioni
            //**********************************************************

            if (eventList == null)
            {
                eventList = (new javax.swing.event.ListSelectionListener() {
                        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                                    jList2ValueChanged(evt);
                                }
                            }
                        );
            }
            jListIconRestrictions.addListSelectionListener(eventList);
            
            jScroll_listRestrictions.setViewportView(jListIconRestrictions);
            
                        
            jScroll_listRestrictions.validate();
            jScroll_listRestrictions.repaint();
        }
        this.setCursor(Cur_default);
        set_GUIcursor(Cur_default);
        setGuiEnabled(true);
        //jListIconRestrictions.setCursor(Cur_hand);
        staticLib.jTabbe_Tot.setEnabledAt(3,true);
        return true;
    }
    
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Metodo preposto al reset delle selezioni effettuate dall'utente.
     * </font></font></p></pre>  
     */	
    public void resetRestrictions()
    {
        br.celarAll();
        index_Sel=-1;
        staticLib.struc_paramsCURRENT.OppositeRestriction = false;
        staticLib.struc_paramsCURRENT.SingleRelation = false;

        restrictionList1.resetRest();
        //System.out.println("dopo restrictionList1.resetRest(); "); 

        //******************************************
        // Reset interfaccia
        //******************************************
        try
        {
                selectMode.validateMode();
        }
        catch(Exception e)
        {
                //System.out.println("Err: 1");
        }

        try
        {
                selectDimension.validateDimension();
        }
        catch(Exception e)
        {
                //System.out.println("Err: 2");
        }

        try
        {
            jListIconRestrictions.setSelectedIndex(0);
            insertRestriction.setDataElement(idTRAFFIC_ELEMENT[0]);
	    //System.out.println("setTrafficElement 1");
            insertRestriction.validateRest();
            staticLib.jsl = new java.util.Vector();
            staticLib.jslTE = new java.util.Vector();

        }
        catch(Exception e)
        {
            //System.out.println("Err: 4");
        }

        //************************************************
        //	Reset Grafico
        //************************************************
        if(!GRAPH_INSIEMI.returnStatus())
        {
                GRAPH_INSIEMI.inverseIntersect2();
        }
        GRAPH_INSIEMI.removeAllInsiemi();
        /**
        * Reset Object pool
        */
        op=null;
        op=new OBJpool();
    }
    
    private boolean exeEvent_jList2ValueChanged()
    {
        setGUI(null); 
        DATA_DATAELEMENT trafficElement;
        
        rHelp.reset(); 
        //stampaData("nel TH 1");
        int appo_index_Sel = jListIconRestrictions.getSelectedIndex();

        if(index_Sel != appo_index_Sel)
        {
            index_Sel = appo_index_Sel; // ID della restrizione

            //System.out.println("1) Id Help selezionato: "+idTRAFFIC_ELEMENT[index_Sel]);
            if(idTRAFFIC_ELEMENT[index_Sel]<1961)
            {
                //stampaData("nel TH 2");
                try
                {
                    trafficElement=(DATA_DATAELEMENT)localTrafficElement.get_Traffic_Element(idTRAFFIC_ELEMENT[index_Sel]);
                    //System.out.println("TYPE GUI: "+trafficElement.guiObject);
                    //System.out.println("idPluginGUI: "+trafficElement.idPluginGUI);
                    
                    {
	                    //System.out.println("2) Id Help selezionato: "+idTRAFFIC_ELEMENT[index_Sel]);
	                    
	                    //localTrafficElement.get_Traffic_Element(idTE);
	                    //System.out.println("trafficElement.idElement="+trafficElement.idElement);
	                    insertRestriction=(jpRestrictions)op.getOBJ(idTRAFFIC_ELEMENT[index_Sel]);
	                    rHelp.disabilita();
	
				DATA_HELP[] dataHelp=null;//staticLib.CORBA.getHelp((new String(trafficElement.shortDescription)).trim());
	                    if( ( staticLib.helpVector.HelpDescPresent(trafficElement.idElement) == -1) || (trafficElement.idElement == 8) || (trafficElement.idElement==10) || (trafficElement.idElement==41) || (trafficElement.idElement==42) )
	                    {
			    	//stampaData("nel TH 3");
	                        staticLib.struc_paramsCURRENT.Filters = br.creaRest();
	                        dataHelp = staticLib.CORBA.getHelp((new String(trafficElement.shortDescription)).trim());
	
	                        if(dataHelp!=null)
	                        {
	                            //rHelp.set_enable();
	                            staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(trafficElement.idElement,dataHelp));
	
	                            DATA_HELP[] appoOrdinato1=new DATA_HELP[dataHelp.length];
	                            DATA_HELP[] appoOrdinato2=new DATA_HELP[dataHelp.length];
	                            //stampaData("nel TH 3.1");
	                            for(int i=0;i<dataHelp.length;i++)
	                            {
	                                appoOrdinato1[i]=new DATA_HELP(dataHelp[i].key,dataHelp[i].data);
	                                appoOrdinato2[i]=new DATA_HELP(dataHelp[i].key,dataHelp[i].data);		
	                            }
	                            //stampaData("nel TH 3.1");
	                            staticLib.CORBA.ordina(appoOrdinato1,1);
	                            staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(trafficElement.idElement+1000,appoOrdinato1));
	
	                            staticLib.CORBA.ordina(appoOrdinato2,2);
	                            staticLib.helpVector.add_HelpDescBase(new HelpDescBASE(trafficElement.idElement+2000,appoOrdinato2));
	                        }	
	                        else
	                        {
	                            //rHelp.set_disable();
	
	                        }
	                        //System.out.println("Sizeof(helpVector)="+staticLib.helpVector.size());
	                    }
	                    else
	                    {
	                        //rHelp.set_disable();
	                        rHelp.setElementList(staticLib.helpVector.get_Descrizioni_conId(trafficElement.idElement,false,0),trafficElement);
	                    }
	                        
	                    if(dataHelp!=null)
	                    {
	                        //stampaData("nel TH 4");
	                            rHelp.setElementList(staticLib.helpVector.get_Descrizioni_conId(trafficElement.idElement,false,0),trafficElement);
	                            //stampaData("nel TH 4.1");
	                    }else
	                    {
	                        //stampaData("nel TH 5");
	                            rHelp.set_disable();
	                    }
	
	                        //stampaData("nel TH 6");
	                    //System.out.println("GET OBJpool: "+insertRestriction+" Index_sel: "+idTRAFFIC_ELEMENT[index_Sel]+ "    SIZE OBJpool"+op.size());
	                    if (insertRestriction==null)
	                    {
	                        //System.out.println("**********************Sono qua");
	                        insertRestriction = new jpRestrictions(localTrafficElement,restrictionList1,GRAPH_INSIEMI,br);
	                        insertRestriction.setDataElement(idTRAFFIC_ELEMENT[index_Sel]);
	                        //System.out.println("setTrafficElement 2");
	                        insertRestriction.validateRest();
	                        
	                        try
	                        {
	                            jP_Rest_value.remove(Jp_wait);
	                        }
	                        catch(Exception ex){}
	                        
	                        jP_Rest_value.setLayout(layoutRest);
	                        jP_Rest_value.repaint();
	                        jP_Rest_value.add(insertRestriction);
	                        op.putOBJ(idTRAFFIC_ELEMENT[index_Sel],insertRestriction);
	
	                    }
		            restrictionList1.setJR(insertRestriction);	
		            insertRestriction.validateList();
		            setGUI(insertRestriction);	
		            
		            if(trafficElement.guiObject==JPLUGINGUIOBJECT)//JPLUGINGUIOBJECT)
                    	    {
                   		//System.out.println("Gestito da PLUGIN. 2("+trafficElement.idPluginGUI+")");
                    		rHelp.disabilita();
				try {        
					String strPlugin=configuration.get_NamePlugin(trafficElement.idPluginGUI);
					if(!strPlugin.equals(""))
					{
						int id=strPlugin.indexOf(".class");
						strPlugin=strPlugin.substring(0,id);
						//System.out.println("strPluginName="+strPlugin);  
						
						plugin_base p_base=(plugin_base)Class.forName(strPlugin).newInstance();
						
						p_base.pluginSetupConfig(null,br,trafficElement);
						p_base.pluginWorker();
						
						p_base.shutdown();
						
		                                restrictionList1.refreshList();
					}else
					{
						JD_Message op = new JD_Message(null,true,"Undefined plugin <"+trafficElement.idPluginGUI+">.","Info",JD_Message.INFO);
					}	
				} catch ( Exception e ) {
				e.printStackTrace() ;
				}
			   }
            	    }
                    			
                }catch(Exception e)
                {
                    return true;
                }
            }
            else
            {
                if(idTRAFFIC_ELEMENT[index_Sel]==1961)	// Mode
                {
                    //if (selectMode==null)
                    {
                        selectMode=new MDM_JP_RestrictionMode(GRAPH_INSIEMI);
                        
                        try
                        {
                            jP_Rest_value.remove(Jp_wait);
                        }
                        catch(Exception ex){}
                        
                        jP_Rest_value.setLayout(layoutRest);
                        jP_Rest_value.repaint();
                        jP_Rest_value.add(selectMode);
                    }
                    rHelp.disabilita();
                    setGUI(selectMode);
                    selectMode.validateMode();
                }
                else if(idTRAFFIC_ELEMENT[index_Sel]==1962)	// Dimension
                {
                    //if (selectDimension==null)
                    {
                        
                        selectDimension = new MDM_JP_RestrictionDimension();
                        
                        try
                        {
                            jP_Rest_value.remove(Jp_wait);
                        }
                        catch(Exception ex){}
                        
                        jP_Rest_value.setLayout(layoutRest);
                        jP_Rest_value.repaint();
                        jP_Rest_value.add(selectDimension);
                    }
                    rHelp.disabilita();
                    setGUI(selectDimension);
                    selectDimension.repaint();
                    selectDimension.validate();
                    selectDimension.validateDimension();
                }
            }
        }
        
        return true;
    }
    
    public void stampaData(String desc)
    {
        System.out.println(desc);
        if(staticLib.struc_paramsCURRENT.ElaborationData != null)
        {
            int LENGTH_Data_Process = staticLib.struc_paramsCURRENT.ElaborationData.length;
            System.out.println(desc+" - LENGTH ElaborationData ==> "+LENGTH_Data_Process);
            for(int i=0; i<LENGTH_Data_Process; i++)
            {
                System.out.println(desc+" - ElaborationData --> "+ (new String(staticLib.struc_paramsCURRENT.ElaborationData[i].dateString)).trim() );
            }           
        }else
            System.out.println(desc+" - LENGTH ElaborationData ==> NULL");
    }
    
    
    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt)
    { 	 
        if (!evt.getValueIsAdjusting())
        {            
            Operation_TH = exeEvent_jList2;  //Case Thread 
            TH = null;
            TH_EXIT = false;
            TH = new Thread(this,"TH MDM_JP_SelectRestrictions");
            TH.start();            
        }
    }
    
    private void setGUI(javax.swing.JPanel p)
    {
        if(p == null)
        {
            p_attuale.setVisible(false);
            return;
        }
        
        try
        {
            p_attuale.setVisible(false);
        }catch(Exception e)
        {}
        p.setVisible(true);
        p_attuale = p;  
        jP_Rest_value.validate();
    }
    
    /**
    * <pre>
    * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
    * Metodo incaricato a settare le icone di default delle varie restrizioni, in caso ci siano errori nella configurazione.
    * </font></font></p></pre>  
    * @param str stringa descrittiva dell'Elemento di Traffico caratterizzante la restrizione selezionata.
    */
    public String approssimaIcona(String str)
    {
        //*******************************
        //	Gestione icone di default
        //*******************************
        //System.out.println("Desc_: "+str);

        if(str.equals("FE")||str.equals("FU")||str.equals("TE")||str.equals("TU"))
            return "trunk.gif";
        if(str.equals("CEE")||str.equals("CEU"))
            return "ctrlelem.gif";
        if(str.equals("CCE")||str.equals("CCO"))
            return "called_ac.gif";
        if(str.equals("CAU"))
            return "inc.gif";
        if(str.equals("SRV_FL_NAZ")||str.equals("FL_NAZ")||str.equals("FL_NAZ_CTO")||str.equals("FL_NAZ_CTE")||str.equals("FL_INT_CTO")||str.equals("FL_INT_CTE"))
            return "domestic.gif";
        if(str.equals("IRI"))
            return "iri.gif";
        if(str.equals("ACE")||str.equals("ACO")||str.equals("ACOI")||str.equals("ACEI"))
            return "ac.gif";	
        if(str.equals("OCO")||str.equals("NUMCIFREU")||str.equals("NUM_U_CTE")||str.equals("NUM_U"))				
            return "office_code.gif";
        if(str.equals("CAE"))				
            return "inc.gif";
        if(str.equals("ISTR"))				
            return "inter_link.gif";
        if(str.equals("RFI"))				
            return "anomalie.gif";
        if(str.equals("ISDN"))				
            return "isdn.gif";
        if(str.equals("TELESRV"))				
            return "fax.gif";
        if(str.equals("SRV")||str.equals("SRVEXT"))
            return "service1.gif";
        if(str.equals("BEARER"))				
            return "64.gif";
        if(str.equals("HOUR")||str.equals("ORA_STOP"))
            return "hour.gif";
        if(str.equals("OVFL"))				
            return "inter_link.gif";						
        return "under.gif";

    }
    
    public void run()
    {               
        this.setCursor(Cur_wait);
        set_GUIcursor(Cur_wait);
        setGuiEnabled(false);

        
        //System.out.println("Inizio THREAD");
        //stampaData("Inizio");
        
        if(Operation_TH == exeEvent_jList2)
        {
           
            if(Jp_wait == null)
            {
                Jp_wait = new MDM_JP_wait(" Please Wait... ",iconWait); 
                Jp_wait.setBounds(80,30,120,100);
            }
            jP_Rest_value.setLayout(null);
            jP_Rest_value.add(Jp_wait);
            
            //staticLib.jsl=new Vector();
            
            boolean finito = exeEvent_jList2ValueChanged();           
            
            try
            {
                jP_Rest_value.remove(Jp_wait);
            }
            catch(Exception ex){}

        }

        //System.out.println("Fine THREAD");
        //stampaData("Fine");

        setGuiEnabled(true);
        set_GUIcursor(Cur_default);
        this.setCursor(Cur_default);
    }
    
    /**
     * Ritorna un'oggetto di tipo javax.swing.JPanel, ccontenente widget per la selezione dei valori della restrizione selezionata.
     */
    public javax.swing.JPanel get_jP_Rest_value()
    {
        return jP_Rest_value;
    }
    
    /**
     * Metodo utilizzato per l'abilitazione/disabilitazione dell'interfaccia.
     *@param flag Se true abilita l'interfaccia altrimenti disabilita.
     */
    public void setGuiEnabled(boolean flag)
    {
        //System.out.println("setGuiEnabled "+flag );
        
        //p_attuale.setEnabled(flag);
        //rHelp.setEnabled(flag);
        restrictionList1.setGuiEnabled(flag);
        jListInsiemi.setEnabled(flag);
        
        jListIconRestrictions.setEnabled(flag);
        
        //jP_restrictions.setEnabled(flag);
        jP_relations_sel.setEnabled(flag);
        jL_current_Relation.setEnabled(flag);
        jL1.setEnabled(flag);
        jL_restrictions.setEnabled(flag);
        jP_restrictionSum.setEnabled(flag);
        jL_flow.setEnabled(flag);
        jP_restSelected.setEnabled(flag);
        Jp_FlowGraph.setEnabled(flag);
        jPanel5.setEnabled(flag);
        jbResetRestriction.setEnabled(flag);
        jP_rest_Help.setEnabled(flag);
        jP_Rest_value.setEnabled(flag);
        staticLib.Tabella.setEnabledAt(3,flag);
        staticLib.Tabella.setEnabledAt(0,flag);
               
        jScroll_listRestrictions.setViewportView(jListIconRestrictions);
        
        staticLib.Tabella.validate();
        staticLib.Tabella.repaint();
         
        /*try
        {
            System.out.println(" updateUI(A)");
            if((staticLib.Tabella.isShowing())&&(staticLib.Tabella.isVisible()))
                staticLib.Tabella.updateUI();
            System.out.println(" updateUI(B)");
                      
        }
        catch (java.lang.NullPointerException e)
        {
            System.out.println("Exception updateUI(2)");
        }*/
            
    }
    
    
    private void set_GUIcursor(Cursor cursor)
    {
        //p_attuale.setCursor(cursor);
        //rHelp.setCursor(cursor);
        restrictionList1.setCursor(cursor);
        jListInsiemi.setCursor(cursor);
        //jP_restrictions.setCursor(cursor);
        jP_relations_sel.setCursor(cursor);
        jL_current_Relation.setCursor(cursor);
        jScroll_listRestrictions.setCursor(cursor);
        jL1.setCursor(cursor);
        jL_restrictions.setCursor(cursor);
        jP_restrictionSum.setCursor(cursor);
        jL_flow.setCursor(cursor);
        jP_restSelected.setCursor(cursor);
        Jp_FlowGraph.setCursor(cursor);
        jScrollPane1.setCursor(cursor);
        jPanel5.setCursor(cursor);
        jbResetRestriction.setCursor(cursor);
        jP_rest_Help.setCursor(cursor);
        jP_Rest_value.setCursor(cursor);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jP_restrictions;
    private javax.swing.JPanel jP_relations_sel;
    private javax.swing.JLabel jL_current_Relation;
    private javax.swing.JScrollPane jScroll_listRestrictions;
    private javax.swing.JLabel jL1;
    private javax.swing.JLabel jL_restrictions;
    private javax.swing.JPanel jP_restrictionSum;
    private javax.swing.JLabel jL_flow;
    private javax.swing.JPanel jP_restSelected;
    private javax.swing.JPanel Jp_FlowGraph;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbResetRestriction;
    private javax.swing.JPanel jP_rest_Help;
    private javax.swing.JPanel jP_Rest_value;
    // End of variables declaration//GEN-END:variables
    
    private Cursor Cur_default  = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor Cur_hand     = new Cursor(Cursor.HAND_CURSOR);
    private Cursor Cur_wait     = new Cursor(Cursor.WAIT_CURSOR);
    
    private getConfigFiltro     configuration; //Configurazione
    public BufferRestrizioni   br;
    /**
     * <pre>
     * <p align="left"><font size="2"><font face="Arial, Helvetica, sans-serif">
     * Identificativo della relazione correntemente in uso.
     * </font></font></p></pre>  
     */  
    public int current_idRelations;
    private int	index_Sel = -1;
    
    private JListIcon	jListIconRestrictions;
    private IconPool	ip = new IconPool("/images/");
    private JListIcon   jListInsiemi;
    private IconPool	ip2 = new IconPool("/images/");
    
    private MDM_JP_RestrictionList restrictionList1;
    private TrafficElement localTrafficElement;
    private int[] idTRAFFIC_ELEMENT = new int[1000];
    private jpRestrictions insertRestriction;
    private insiemi  GRAPH_INSIEMI;
    private MDM_JP_RestrictionsHelp rHelp;
    private OBJpool op = new OBJpool();
    private MDM_JP_RestrictionMode selectMode;
    private javax.swing.JPanel p_attuale;
    private MDM_JP_RestrictionDimension selectDimension;

    private boolean TH_EXIT = false;
    private Thread TH = null;
    private int Operation_TH = -1; //Controllo operazione del thread
    private final int exeEvent_jList2 = 1;

    //private MDM_JD_wait F_wait_Restr = null;
    private MDM_JP_wait Jp_wait = null;
    private javax.swing.event.ListSelectionListener eventList = null;
    private javax.swing.ImageIcon iconWait = new javax.swing.ImageIcon(getClass().getResource("/images/clock_anim.gif"));
    private java.awt.FlowLayout layoutRest = new java.awt.FlowLayout();
    
    public static final int JPLUGINGUIOBJECT	    = 5;

}
