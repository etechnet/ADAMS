
# import all relevant

set (ADAMS_SHAREDLIBCMD $ENV{ADAMS_SHAREDLIBCMD})
set (ADAMS_SHAREDLIBSEARCH $ENV{ADAMS_SHAREDLIBSEARCH})
set (ADAMS_CFLAGS $ENV{ADAMS_CFLAGS})
set (ADAMS_SYSLIBS $ENV{ADAMS_SYSLIBS})
set (ADAMS_CXXFLAGS $ENV{ADAMS_CXXFLAGS})
set (ADAMS_SHFLAGS $ENV{ADAMS_SHFLAGS})
set (ADAMS_SHAREDLIBLINK $ENV{ADAMS_SHAREDLIBLINK})
set (ADAMS_C_SHAREDLIBLINK $ENV{ADAMS_C_SHAREDLIBLINK})
set (ADAMS_LFLAGS $ENV{ADAMS_LFLAGS})
set (ADAMS_DEFINE $ENV{ADAMS_DEFINE})
set (ADAMS_INCLUDE_PATH $ENV{ADAMS_INCLUDE_PATH})
set (ADAMS_LIB_PATH $ENV{ADAMS_LIB_PATH})
set (ADAMS_3RDPARTY_PATH $ENV{ADAMS_3RDPARTY_PATH})
set (ADAMS_SHARED_PATH $ENV{ADAMS_SHARED_PATH})
set (ADAMS_INCLUDE $ENV{ADAMS_INCLUDE})
set (ADAMS_JAVAIDL $ENV{ADAMS_JAVAIDL})
set (ADAMS_HOME $ENV{ADAMS_HOME})
set (ADAMS_PREFIX $ENV{ADAMS_PREFIX})
set (ADAMS_BUILD_INSTALL $ENV{ADAMS_BUILD_INSTALL})
set (ADAMS_INSTALL_LIB_NAME $ENV{ADAMS_INSTALL_LIB_NAME})
set (ADAMS_LIB $ENV{ADAMS_LIB_PATH} $ENV{ADAMS_BUILD_INSTALL}/${ADAMS_INSTALL_LIB_NAME})
set (ADAMS_WEB_INSTALL $ENV{ADAMS_WEB_INSTALL})
set (ADAMS_OPSYS $ENV{ADAMS_OPSYS})
set (ADAMS_MODE $ENV{ADAMS_MODE})
set (ADAMS_DB_TYPE $ENV{ADAMS_DB_TYPE})
set (USE_NATIVE_QT $ENV{USE_NATIVE_QT})
set (USE_NATIVE_JACORB $ENV{USE_NATIVE_JACORB})
set (ADAMS_IDL_PATH $ENV{ADAMS_IDL_PATH})
set (ADAMS_XML_PATH $ENV{ADAMS_XML_PATH})
set (ADAMS_JAVA_ORB_LIB $ENV{ADAMS_JAVA_ORB_LIB})
set (ADAMS_CLASSPATH $ENV{ADAMS_CLASSPATH})
set (ADAMS_PLATFORM $ENV{ADAMS_PLATFORM})
set (ADAMS_RUNTIME_LIB_PATH $ENV{ADAMS_RUNTIME_LIB_PATH})
set (ADAMS_DB_TYPE $ENV{ADAMS_DB_TYPE})
set (ADAMS_JAVA_DB_DRIVER_CANONICAL_NAME $ENV{ADAMS_JAVA_DB_DRIVER_CANONICAL_NAME})
set (ADAMS_JAVA_DB_DRIVER $ENV{ADAMS_JAVA_DB_DRIVER})
set (ADAMS_JAVA_DB_DRIVER_VERSION $ENV{ADAMS_JAVA_DB_DRIVER_VERSION})
set (ADAMS_DB_DRIVER_PATH $ENV{ADAMS_DB_DRIVER_PATH})
set (ADAMS_JAVA_DB_DRIVER_LIB $ENV{ADAMS_JAVA_DB_DRIVER_LIB})
set (ADAMS_TAO_BASE $ENV{ADAMS_TAO_BASE})
set (ADAMS_TAO_BINDIR $ENV{ADAMS_TAO_BINDIR})
set (ADAMS_TAO_LIBDIR $ENV{ADAMS_TAO_LIBDIR})
set (ADAMS_TAO_INCDIR $ENV{ADAMS_TAO_INCDIR})
set (ADAMS_TAO_INCLUDE $ENV{ADAMS_TAO_INCLUDE})
set (ADAMS_CORBA_CFLAGS $ENV{ADAMS_CORBA_CFLAGS})
set (ADAMS_CORBA_DEFINES $ENV{ADAMS_CORBA_DEFINES})
set (ADAMS_OPTIMIZE_CFLAGS_RELEASE $ENV{ADAMS_OPTIMIZE_CFLAGS_RELEASE})
set (ADAMS_OPTIMIZE_CFLAGS_DEBUG $ENV{ADAMS_OPTIMIZE_CFLAGS_DEBUG})
set (CMAKE_BUILD_TYPE_VAR $ENV{CMAKE_BUILD_TYPE_VAR})
set (ADAMS_RUNTIME_LIB_PATH $ENV{ADAMS_RUNTIME_LIB_PATH})
set (ADAMS_RUNTIME_BIN_PATH $ENV{ADAMS_RUNTIME_BIN_PATH})
set (ADAMS_RUNTIME_SHARED_PATH $ENV{ADAMS_RUNTIME_SHARED_PATH})
set (ADAMS_INSTALL_JAR_PACKAGES_DIR $ENV{ADAMS_INSTALL_JAR_PACKAGES_DIR})

#---

# Installation setup

# Build install is make inside source dir instead than in ADAMS_PREFIX path that is
# real world installation path
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET (CMAKE_INSTALL_PREFIX
    ${ADAMS_BUILD_INSTALL} CACHE PATH "ADAMS install prefix" FORCE
    )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
SET (INSTALL_LIB_DIR ${ADAMS_INSTALL_LIB_NAME} CACHE PATH "ADAMS installation directory for libraries")
# Generic Java setup
SET (INSTALL_JAR_DIR ${ADAMS_INSTALL_JAR_PACKAGES_DIR} CACHE PATH "ADAMS installation directory for packages")
set (CMAKE_JAVA_INCLUDE_PATH ${CMAKE_JAVA_INCLUDE_PATH} ${ADAMS_JAVA_ORB_LIB})
set (ADAMS_JAR_PACKAGE_DIR ${ADAMS_BUILD_INSTALL}/${INSTALL_JAR_DIR})
set (ADAMS_JAVA_STUBS_OUTPUT_DIR ${CMAKE_BINARY_DIR}/java_stubs)
set (CMAKE_JAVA_INCLUDE_PATH ${CMAKE_JAVA_INCLUDE_PATH} ${ADAMS_JAVA_STUBS_OUTPUT_DIR})
set (JAVA_STUBS_GENERATION_TARGET_FILE ${ADAMS_JAVA_STUBS_OUTPUT_DIR}/.generated)
set (ADAMS_JAVA_PACKAGES_OUTPUT_DIR ${CMAKE_BINARY_DIR}/packages)
set (CMAKE_JAVA_INCLUDE_PATH ${CMAKE_JAVA_INCLUDE_PATH} ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR})
set (JAVA_JAR_EXPANSION_TARGET_FILE ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR}/.generated)
set (ADAMS_IDL_MODULES_DEFINES -D_ASP_IDL -D_SSM_IDL -D_MDM_IDL -D_ETSS_IDL)

############

# Build mode and options
SET(CMAKE_CXX_FLAGS_RELEASE ${ADAMS_OPTIMIZE_CFLAGS_RELEASE})
SET(CMAKE_C_FLAGS_RELEASE ${ADAMS_OPTIMIZE_CFLAGS_RELEASE})
SET(CMAKE_CXX_FLAGS_DEBUG ${ADAMS_OPTIMIZE_CFLAGS_DEBUG})
SET(CMAKE_C_FLAGS_DEBUG ${ADAMS_OPTIMIZE_CFLAGS_DEBUG})
SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE_VAR})
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# CXX idl generation macros

SET (IDL $ENV{ADAMS_TAO_BINDIR}/tao_idl)

IF ($ENV{ADAMS_OPSYS} STREQUAL "LINUX")
SET (IDL_COMMON_FLAGS -t $ENV{TMPDIR} -as -in -Sa -St -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h)
ELSE ($ENV{ADAMS_OPSYS} STREQUAL "LINUX")
SET (IDL_COMMON_FLAGS -t $ENV{TMPDIR} -in -Sa -St -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h)
ENDIF ($ENV{ADAMS_OPSYS} STREQUAL "LINUX")

SET (CORBA_LIBS TAO_Utils TAO_PI TAO_CodecFactory TAO_PortableServer TAO_IORTable TAO_CosNaming TAO_AnyTypeCode TAO ACE)
SET (CORBA_GENERATED_HH_PATH ${ADAMS_INCLUDE_PATH}/generated)
set (IDL_INCLUDES -I${ADAMS_INCLUDE_PATH} -I${ADAMS_IDL_PATH})
set (IDLFLAGS ${IDL_COMMON_FLAGS} ${IDL_INCLUDES})



MACRO(GENERATE_CXX_IDL_STUBS)
	foreach(GENERATE_IDL ${ARGN})
		get_filename_component(IDLNAME ${GENERATE_IDL} NAME_WE)
# 		set(GEN_IDL_OUT_NAME ${CORBA_GENERATED_HH_PATH}/${IDLNAME})

		list(APPEND IDL_GEN_CPP_FILES ${IDLNAME}C.cpp ${IDLNAME}S.cpp)
		list(APPEND IDL_GEN_HH_FILES ${CORBA_GENERATED_HH_PATH}/${IDLNAME}C.h ${CORBA_GENERATED_HH_PATH}/${IDLNAME}S.h)

		add_custom_command(OUTPUT ${IDLNAME}C.cpp ${IDLNAME}S.cpp ${CORBA_GENERATED_HH_PATH}/${IDLNAME}C.h ${CORBA_GENERATED_HH_PATH}/${IDLNAME}S.h
				  COMMAND cpp -P -C ${IDL_INCLUDES} ${ADAMS_IDL_PATH}/${GENERATE_IDL} ${GENERATE_IDL}
				  COMMAND ${IDL} ${IDLFLAGS} ${GENERATE_IDL}
				  COMMAND mv ${IDLNAME}C.h ${IDLNAME}S.h ${CORBA_GENERATED_HH_PATH}
				  COMMENT "Compiling ${GENERATE_IDL}"
				  DEPENDS ${ADAMS_IDL_PATH}/${GENERATE_IDL}
				  )
	endforeach(GENERATE_IDL)

	set_source_files_properties(${IDL_GEN_CPP_FILES} PROPERTIES GENERATED TRUE)

ENDMACRO(GENERATE_CXX_IDL_STUBS)

MACRO(MOC_HDRS_FROM_TOP_INCLUDE)
	foreach(MOCHDR ${ARGN})
		LIST(APPEND MOC_HDRS ${ADAMS_INCLUDE_PATH}/${MOCHDR})
	endforeach(MOCHDR)
ENDMACRO(MOC_HDRS_FROM_TOP_INCLUDE)

# JAVA idl generation macros

MACRO(CHECK_JAVA_STUBS_DIR)
	IF (NOT EXISTS ${ADAMS_JAVA_STUBS_OUTPUT_DIR})
		MESSAGE (STATUS "Creating Java IDL stubs temp directory: ${ADAMS_JAVA_STUBS_OUTPUT_DIR}")
		FILE (MAKE_DIRECTORY ${ADAMS_JAVA_STUBS_OUTPUT_DIR})
	ENDIF (NOT EXISTS ${ADAMS_JAVA_STUBS_OUTPUT_DIR})
ENDMACRO(CHECK_JAVA_STUBS_DIR)

MACRO(GENERATE_JAVA_STUBS_FOR_IDL idl_filename)
	message(STATUS "Set generating from ${idl_filename} in ${ADAMS_JAVA_STUBS_OUTPUT_DIR}")
	CHECK_JAVA_STUBS_DIR()
	add_custom_command (
		OUTPUT ${idl_filename}.done
		COMMAND ${ADAMS_JAVAIDL} -d ${ADAMS_JAVA_STUBS_OUTPUT_DIR} ${ADAMS_INCLUDE} -I${ADAMS_IDL_PATH} ${ADAMS_IDL_PATH}/${idl_filename}
		COMMAND touch ${idl_filename}.done
		DEPENDS ${ADAMS_IDL_PATH}/${idl_filename}
		COMMENT "Compiling ${idl_filename}"
	)
ENDMACRO(GENERATE_JAVA_STUBS_FOR_IDL)

MACRO(GENERATE_JAVA_IDL_STUBS)
	EXPAND_IDL_DEPS(${ARGN})
# 	MESSAGE(STATUS "Generating STUBs...")
	FOREACH(_in_FILE ${ARGN})
		GENERATE_JAVA_STUBS_FOR_IDL(${_in_FILE})
	ENDFOREACH(_in_FILE ${ARGN})

	add_custom_target(JAVA_STUBS_GENERATION_TARGET
		COMMAND touch ${JAVA_STUBS_GENERATION_TARGET_FILE}
		DEPENDS ${_expanded_idl_deps}
	)

# 	MESSAGE(STATUS "Done !")
ENDMACRO(GENERATE_JAVA_IDL_STUBS)

MACRO(EXPAND_IDL_DEPS)
	FOREACH(_in_FILE ${ARGN})
# 		MESSAGE(STATUS "Expanding dependencies for ${_in_FILE}")
		LIST(APPEND _expanded_idl_deps ${_in_FILE}.done)
	ENDFOREACH(_in_FILE ${ARGN})
# 	MESSAGE(STATUS "Done !")
	MESSAGE(STATUS "Depends expanded to ${_expanded_idl_deps}")
ENDMACRO(EXPAND_IDL_DEPS)

MACRO(DO_EXPAND_JAR_PACKAGE jar_filename)
	message(STATUS "Expanding package ${jar_filename} in ${ADAMS_JAVA_STUBS_OUTPUT_DIR}")
	IF (NOT EXISTS ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR})
		MESSAGE (STATUS "Creating java packages temp directory: ${ADAMS_JAVA_STUBS_OUTPUT_DIR}")
		FILE (MAKE_DIRECTORY ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR})
	ENDIF (NOT EXISTS ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR})
	add_custom_command (
		OUTPUT ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR}/${jar_filename}.done
		COMMAND ${Java_JAR_EXECUTABLE} xf ${ADAMS_JAR_PACKAGE_DIR}/${jar_filename}
		COMMAND touch ${jar_filename}.done
		DEPENDS ${ADAMS_JAR_PACKAGE_DIR}/${jar_filename}
		WORKING_DIRECTORY ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR}
		COMMENT "Expanding ${_expanded_jar_deps}"
	)
ENDMACRO(DO_EXPAND_JAR_PACKAGE)

MACRO(EXPAND_JARPACK_DEPS)
	FOREACH(_in_FILE ${ARGN})
		LIST(APPEND _expanded_jar_deps ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR}/${_in_FILE}.done)
	ENDFOREACH(_in_FILE ${ARGN})
ENDMACRO(EXPAND_JARPACK_DEPS)

MACRO(EXPAND_JAR_PACKAGES)
	EXPAND_JARPACK_DEPS(${ARGN})
	FOREACH(_in_FILE ${ARGN})
		DO_EXPAND_JAR_PACKAGE(${_in_FILE})
	ENDFOREACH(_in_FILE ${ARGN})

	add_custom_target(EXPAND_JAR_PACKAGES_TARGET
		COMMAND touch ${JAVA_JAR_EXPANSION_TARGET_FILE}
		DEPENDS ${_expanded_jar_deps}
	)

ENDMACRO(EXPAND_JAR_PACKAGES)

MACRO(SETUP_JAVA_DB_DRIVER)
	MESSAGE(STATUS "Current project: " ${CMAKE_PROJECT_NAME})
	execute_process(COMMAND ${Java_JAR_EXECUTABLE} -xf ${ADAMS_JAVA_DB_DRIVER_LIB}
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
	FILE (GLOB_RECURSE db_jar_resources_com RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "com/*")
	FILE (GLOB_RECURSE db_jar_resources_org RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "org/*")
	set  (additional_db_driver ${db_jar_resources_org} ${db_jar_resources_com})
ENDMACRO(SETUP_JAVA_DB_DRIVER)

MACRO(ADD_DB_DRIVER_TO_JAR)
	add_custom_command(TARGET ${CMAKE_PROJECT_NAME}
		POST_BUILD
		COMMAND ${Java_JAR_EXECUTABLE} uf ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.jar com org
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		COMMENT "Adding ADAMS DB Driver to project jar"
	)
ENDMACRO(ADD_DB_DRIVER_TO_JAR)

MACRO(ADD_PACKAGES_TO_JAR)
	add_custom_command(TARGET ${CMAKE_PROJECT_NAME}
		POST_BUILD
		COMMAND ${Java_JAR_EXECUTABLE} uf ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.jar net
		WORKING_DIRECTORY ${ADAMS_JAVA_PACKAGES_OUTPUT_DIR}
		COMMENT "Adding ADAMS Packages to project jar"
		DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PROJECT_NAME}.jar
	)
ENDMACRO(ADD_PACKAGES_TO_JAR)

#---